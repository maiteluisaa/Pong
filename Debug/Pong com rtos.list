
Pong com rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008748  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c0  08008858  08008858  00018858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f18  08008f18  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08008f18  08008f18  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f18  08008f18  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f18  08008f18  00018f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f1c  08008f1c  00018f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08008f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002404  20000180  080090a0  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002584  080090a0  00022584  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e74c  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004842  00000000  00000000  0003e8f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f8  00000000  00000000  00043138  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014d0  00000000  00000000  00044830  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000199c8  00000000  00000000  00045d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001582e  00000000  00000000  0005f6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008233d  00000000  00000000  00074ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f7233  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cf8  00000000  00000000  000f72b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	08008840 	.word	0x08008840

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	08008840 	.word	0x08008840

08000150 <cmd_LCD>:
//----------------------------------------------------------------------------------------------
/*	There are two memory banks in the LCD, data/RAM and commands. This
	function sets the DC pin high or low depending, and then sends the data byte */
//----------------------------------------------------------------------------------------------
void cmd_LCD(uint32_t data)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	uint32_t i=8;
 8000158:	2308      	movs	r3, #8
 800015a:	60fb      	str	r3, [r7, #12]

	CLR_DC();					// comando para o LCD
 800015c:	2200      	movs	r2, #0
 800015e:	2120      	movs	r1, #32
 8000160:	481d      	ldr	r0, [pc, #116]	; (80001d8 <cmd_LCD+0x88>)
 8000162:	f002 fab4 	bl	80026ce <HAL_GPIO_WritePin>

	//Send the data
	CLR_CE();
 8000166:	2200      	movs	r2, #0
 8000168:	2140      	movs	r1, #64	; 0x40
 800016a:	481b      	ldr	r0, [pc, #108]	; (80001d8 <cmd_LCD+0x88>)
 800016c:	f002 faaf 	bl	80026ce <HAL_GPIO_WritePin>
	do								// MSB primeiro
	{	i--;
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	3b01      	subs	r3, #1
 8000174:	60fb      	str	r3, [r7, #12]
		if(tst_bit(data,i))
 8000176:	2201      	movs	r2, #1
 8000178:	68fb      	ldr	r3, [r7, #12]
 800017a:	fa02 f303 	lsl.w	r3, r2, r3
 800017e:	461a      	mov	r2, r3
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	4013      	ands	r3, r2
 8000184:	2b00      	cmp	r3, #0
 8000186:	d005      	beq.n	8000194 <cmd_LCD+0x44>
			SET_DIN();
 8000188:	2201      	movs	r2, #1
 800018a:	2110      	movs	r1, #16
 800018c:	4812      	ldr	r0, [pc, #72]	; (80001d8 <cmd_LCD+0x88>)
 800018e:	f002 fa9e 	bl	80026ce <HAL_GPIO_WritePin>
 8000192:	e004      	b.n	800019e <cmd_LCD+0x4e>
		else
			CLR_DIN();
 8000194:	2200      	movs	r2, #0
 8000196:	2110      	movs	r1, #16
 8000198:	480f      	ldr	r0, [pc, #60]	; (80001d8 <cmd_LCD+0x88>)
 800019a:	f002 fa98 	bl	80026ce <HAL_GPIO_WritePin>
		PULSO_CLK();
 800019e:	201e      	movs	r0, #30
 80001a0:	f000 fbd8 	bl	8000954 <atraso_us>
 80001a4:	2201      	movs	r2, #1
 80001a6:	2108      	movs	r1, #8
 80001a8:	480b      	ldr	r0, [pc, #44]	; (80001d8 <cmd_LCD+0x88>)
 80001aa:	f002 fa90 	bl	80026ce <HAL_GPIO_WritePin>
 80001ae:	201e      	movs	r0, #30
 80001b0:	f000 fbd0 	bl	8000954 <atraso_us>
 80001b4:	2200      	movs	r2, #0
 80001b6:	2108      	movs	r1, #8
 80001b8:	4807      	ldr	r0, [pc, #28]	; (80001d8 <cmd_LCD+0x88>)
 80001ba:	f002 fa88 	bl	80026ce <HAL_GPIO_WritePin>

	}while(i!=0);
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d1d5      	bne.n	8000170 <cmd_LCD+0x20>

	SET_CE();
 80001c4:	2201      	movs	r2, #1
 80001c6:	2140      	movs	r1, #64	; 0x40
 80001c8:	4803      	ldr	r0, [pc, #12]	; (80001d8 <cmd_LCD+0x88>)
 80001ca:	f002 fa80 	bl	80026ce <HAL_GPIO_WritePin>
}
 80001ce:	bf00      	nop
 80001d0:	3710      	adds	r7, #16
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	40010800 	.word	0x40010800

080001dc <data_LCD>:
//----------------------------------------------------------------------------------------------
void data_LCD(uint32_t data)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
	uint32_t i=8;
 80001e4:	2308      	movs	r3, #8
 80001e6:	60fb      	str	r3, [r7, #12]

	SET_DC();					// dado para o LCD
 80001e8:	2201      	movs	r2, #1
 80001ea:	2120      	movs	r1, #32
 80001ec:	481d      	ldr	r0, [pc, #116]	; (8000264 <data_LCD+0x88>)
 80001ee:	f002 fa6e 	bl	80026ce <HAL_GPIO_WritePin>

	//Send the data
	CLR_CE();
 80001f2:	2200      	movs	r2, #0
 80001f4:	2140      	movs	r1, #64	; 0x40
 80001f6:	481b      	ldr	r0, [pc, #108]	; (8000264 <data_LCD+0x88>)
 80001f8:	f002 fa69 	bl	80026ce <HAL_GPIO_WritePin>
	do								// MSB primeiro
	{	i--;
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	3b01      	subs	r3, #1
 8000200:	60fb      	str	r3, [r7, #12]
		if(tst_bit(data,i))
 8000202:	2201      	movs	r2, #1
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	fa02 f303 	lsl.w	r3, r2, r3
 800020a:	461a      	mov	r2, r3
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	4013      	ands	r3, r2
 8000210:	2b00      	cmp	r3, #0
 8000212:	d005      	beq.n	8000220 <data_LCD+0x44>
			SET_DIN();
 8000214:	2201      	movs	r2, #1
 8000216:	2110      	movs	r1, #16
 8000218:	4812      	ldr	r0, [pc, #72]	; (8000264 <data_LCD+0x88>)
 800021a:	f002 fa58 	bl	80026ce <HAL_GPIO_WritePin>
 800021e:	e004      	b.n	800022a <data_LCD+0x4e>
		else
			CLR_DIN();
 8000220:	2200      	movs	r2, #0
 8000222:	2110      	movs	r1, #16
 8000224:	480f      	ldr	r0, [pc, #60]	; (8000264 <data_LCD+0x88>)
 8000226:	f002 fa52 	bl	80026ce <HAL_GPIO_WritePin>
		PULSO_CLK();
 800022a:	201e      	movs	r0, #30
 800022c:	f000 fb92 	bl	8000954 <atraso_us>
 8000230:	2201      	movs	r2, #1
 8000232:	2108      	movs	r1, #8
 8000234:	480b      	ldr	r0, [pc, #44]	; (8000264 <data_LCD+0x88>)
 8000236:	f002 fa4a 	bl	80026ce <HAL_GPIO_WritePin>
 800023a:	201e      	movs	r0, #30
 800023c:	f000 fb8a 	bl	8000954 <atraso_us>
 8000240:	2200      	movs	r2, #0
 8000242:	2108      	movs	r1, #8
 8000244:	4807      	ldr	r0, [pc, #28]	; (8000264 <data_LCD+0x88>)
 8000246:	f002 fa42 	bl	80026ce <HAL_GPIO_WritePin>

	}while(i!=0);
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d1d5      	bne.n	80001fc <data_LCD+0x20>

	SET_CE();
 8000250:	2201      	movs	r2, #1
 8000252:	2140      	movs	r1, #64	; 0x40
 8000254:	4803      	ldr	r0, [pc, #12]	; (8000264 <data_LCD+0x88>)
 8000256:	f002 fa3a 	bl	80026ce <HAL_GPIO_WritePin>
}
 800025a:	bf00      	nop
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40010800 	.word	0x40010800

08000268 <inic_LCD>:
//-----------------------------------------------------------------------------------------------
void inic_LCD()
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	// Reset the LCD to a known state
	CLR_RST();
 800026c:	2200      	movs	r2, #0
 800026e:	2180      	movs	r1, #128	; 0x80
 8000270:	480d      	ldr	r0, [pc, #52]	; (80002a8 <inic_LCD+0x40>)
 8000272:	f002 fa2c 	bl	80026ce <HAL_GPIO_WritePin>
	atraso_us(10);
 8000276:	200a      	movs	r0, #10
 8000278:	f000 fb6c 	bl	8000954 <atraso_us>
	SET_RST();
 800027c:	2201      	movs	r2, #1
 800027e:	2180      	movs	r1, #128	; 0x80
 8000280:	4809      	ldr	r0, [pc, #36]	; (80002a8 <inic_LCD+0x40>)
 8000282:	f002 fa24 	bl	80026ce <HAL_GPIO_WritePin>

	cmd_LCD(0x21);			//Tell LCD that extended commands follow
 8000286:	2021      	movs	r0, #33	; 0x21
 8000288:	f7ff ff62 	bl	8000150 <cmd_LCD>
//	cmd_LCD(0xB0);			//Set LCD Vop (Contrast): Try 0xB1(good @ 3.3V) or 0xBF if your display is too dark ->Original: cmd_LCD(0xB0);
	cmd_LCD(0x03);			//Set Temp coefficent
 800028c:	2003      	movs	r0, #3
 800028e:	f7ff ff5f 	bl	8000150 <cmd_LCD>
	cmd_LCD(0x13);			//LCD bias mode 1:48: Try 0x13 or 0x14
 8000292:	2013      	movs	r0, #19
 8000294:	f7ff ff5c 	bl	8000150 <cmd_LCD>

	cmd_LCD(0x20);			//We must send 0x20 before modifying the display control mode
 8000298:	2020      	movs	r0, #32
 800029a:	f7ff ff59 	bl	8000150 <cmd_LCD>
	cmd_LCD(0x0C);			//Set display control, normal mode. 0x0D for inverse
 800029e:	200c      	movs	r0, #12
 80002a0:	f7ff ff56 	bl	8000150 <cmd_LCD>
}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40010800 	.word	0x40010800

080002ac <goto_XY>:
//-----------------------------------------------------------------------------------------------
void goto_XY(uint32_t x, uint32_t y)  // 0<=x<=83  0<=y<=5
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	6039      	str	r1, [r7, #0]
	if(y>5)	y=5;
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	2b05      	cmp	r3, #5
 80002ba:	d901      	bls.n	80002c0 <goto_XY+0x14>
 80002bc:	2305      	movs	r3, #5
 80002be:	603b      	str	r3, [r7, #0]
	if(x>84)	x=83;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b54      	cmp	r3, #84	; 0x54
 80002c4:	d901      	bls.n	80002ca <goto_XY+0x1e>
 80002c6:	2353      	movs	r3, #83	; 0x53
 80002c8:	607b      	str	r3, [r7, #4]

	indice_fb =  x + (84*y);		// indice para ser empregado no fb
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	2254      	movs	r2, #84	; 0x54
 80002ce:	fb02 f203 	mul.w	r2, r2, r3
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4413      	add	r3, r2
 80002d6:	4a03      	ldr	r2, [pc, #12]	; (80002e4 <goto_XY+0x38>)
 80002d8:	6013      	str	r3, [r2, #0]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	20000394 	.word	0x20000394

080002e8 <escreve2fb>:
//-----------------------------------------------------------------------------------------------
void escreve2fb(unsigned char imagem[])				// altera o frame buffer, uso para c�pia de figura
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for(i=0; i<504; i++){
 80002f0:	2300      	movs	r3, #0
 80002f2:	60fb      	str	r3, [r7, #12]
 80002f4:	e012      	b.n	800031c <escreve2fb+0x34>
		fb[i]= imagem[i];
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	4413      	add	r3, r2
 80002fc:	7819      	ldrb	r1, [r3, #0]
 80002fe:	4a0b      	ldr	r2, [pc, #44]	; (800032c <escreve2fb+0x44>)
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	4413      	add	r3, r2
 8000304:	460a      	mov	r2, r1
 8000306:	701a      	strb	r2, [r3, #0]
		data_LCD(fb[i]);
 8000308:	4a08      	ldr	r2, [pc, #32]	; (800032c <escreve2fb+0x44>)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	4413      	add	r3, r2
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ff63 	bl	80001dc <data_LCD>
	for(i=0; i<504; i++){
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	3301      	adds	r3, #1
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000322:	d3e8      	bcc.n	80002f6 <escreve2fb+0xe>
	}
}
 8000324:	bf00      	nop
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	2000019c 	.word	0x2000019c

08000330 <imprime_LCD>:
//-----------------------------------------------------------------------------------------------
void imprime_LCD()		// desenha em todo o LCD
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
	uint32_t i;

	for (i=0 ; i < 504 ; i++)
 8000336:	2300      	movs	r3, #0
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	e009      	b.n	8000350 <imprime_LCD+0x20>
		data_LCD(fb[i]);
 800033c:	4a08      	ldr	r2, [pc, #32]	; (8000360 <imprime_LCD+0x30>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4413      	add	r3, r2
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ff49 	bl	80001dc <data_LCD>
	for (i=0 ; i < 504 ; i++)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	3301      	adds	r3, #1
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000356:	d3f1      	bcc.n	800033c <imprime_LCD+0xc>
}
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	2000019c 	.word	0x2000019c

08000364 <caractere_LCD>:
/* This function takes in a character, looks it up in the font table/array and writes it to the screen
 * each character is 8 bits tall and 5 bits wide. We pad one blank column of pixels on each side of
 * the character for readability.
 * Os caracteres s� podem ser escritos na linha correspondente ao banco	(0-5)							*/
void caractere_LCD(char character)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
	uint32_t i;

	fb[indice_fb] = 0x00;		//Blank vertical line padding
 800036e:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <caractere_LCD+0x6c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a18      	ldr	r2, [pc, #96]	; (80003d4 <caractere_LCD+0x70>)
 8000374:	2100      	movs	r1, #0
 8000376:	54d1      	strb	r1, [r2, r3]
	indice_fb++;
 8000378:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <caractere_LCD+0x6c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	3301      	adds	r3, #1
 800037e:	4a14      	ldr	r2, [pc, #80]	; (80003d0 <caractere_LCD+0x6c>)
 8000380:	6013      	str	r3, [r2, #0]

	for( i= 0 ; i < 5 ; i++)
 8000382:	2300      	movs	r3, #0
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	e016      	b.n	80003b6 <caractere_LCD+0x52>
	{
		fb[indice_fb] = ASCII[character - 0x20][i];//0x20 is the ASCII character for Space (' '). The font table starts with this character
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	f1a3 0220 	sub.w	r2, r3, #32
 800038e:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <caractere_LCD+0x6c>)
 8000390:	6819      	ldr	r1, [r3, #0]
 8000392:	4811      	ldr	r0, [pc, #68]	; (80003d8 <caractere_LCD+0x74>)
 8000394:	4613      	mov	r3, r2
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	4413      	add	r3, r2
 800039a:	18c2      	adds	r2, r0, r3
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	4413      	add	r3, r2
 80003a0:	781a      	ldrb	r2, [r3, #0]
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <caractere_LCD+0x70>)
 80003a4:	545a      	strb	r2, [r3, r1]
		indice_fb++;
 80003a6:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <caractere_LCD+0x6c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	3301      	adds	r3, #1
 80003ac:	4a08      	ldr	r2, [pc, #32]	; (80003d0 <caractere_LCD+0x6c>)
 80003ae:	6013      	str	r3, [r2, #0]
	for( i= 0 ; i < 5 ; i++)
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	3301      	adds	r3, #1
 80003b4:	60fb      	str	r3, [r7, #12]
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	2b04      	cmp	r3, #4
 80003ba:	d9e5      	bls.n	8000388 <caractere_LCD+0x24>
	}

	fb[indice_fb] = 0x00; //Blank vertical line padding
 80003bc:	4b04      	ldr	r3, [pc, #16]	; (80003d0 <caractere_LCD+0x6c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <caractere_LCD+0x70>)
 80003c2:	2100      	movs	r1, #0
 80003c4:	54d1      	strb	r1, [r2, r3]
}
 80003c6:	bf00      	nop
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	20000394 	.word	0x20000394
 80003d4:	2000019c 	.word	0x2000019c
 80003d8:	08008930 	.word	0x08008930

080003dc <string_LCD>:
//-----------------------------------------------------------------------------------------------
void string_LCD(char *msg)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	while(*msg)
 80003e4:	e006      	b.n	80003f4 <string_LCD+0x18>
		caractere_LCD(*msg++);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	1c5a      	adds	r2, r3, #1
 80003ea:	607a      	str	r2, [r7, #4]
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	4618      	mov	r0, r3
 80003f0:	f7ff ffb8 	bl	8000364 <caractere_LCD>
	while(*msg)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d1f4      	bne.n	80003e6 <string_LCD+0xa>
}
 80003fc:	bf00      	nop
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <string_LCD_Nr>:
//-----------------------------------------------------------------------------------------------
void string_LCD_Nr(char * msg, uint32_t valor,			// escreve uma mensagem com um n�mero
								uint32_t quant2Print)	// quant2Print � o n�mero de digitos para serem impressos
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08a      	sub	sp, #40	; 0x28
 8000408:	af00      	add	r7, sp, #0
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	60b9      	str	r1, [r7, #8]
 800040e:	607a      	str	r2, [r7, #4]
	uint32_t n=0, i;
 8000410:	2300      	movs	r3, #0
 8000412:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned char digitos[10];	// m�ximo de 10 digitos

	for(i=0; i<10; i++)
 8000414:	2300      	movs	r3, #0
 8000416:	623b      	str	r3, [r7, #32]
 8000418:	e008      	b.n	800042c <string_LCD_Nr+0x28>
		digitos[i]= ' ';
 800041a:	f107 0214 	add.w	r2, r7, #20
 800041e:	6a3b      	ldr	r3, [r7, #32]
 8000420:	4413      	add	r3, r2
 8000422:	2220      	movs	r2, #32
 8000424:	701a      	strb	r2, [r3, #0]
	for(i=0; i<10; i++)
 8000426:	6a3b      	ldr	r3, [r7, #32]
 8000428:	3301      	adds	r3, #1
 800042a:	623b      	str	r3, [r7, #32]
 800042c:	6a3b      	ldr	r3, [r7, #32]
 800042e:	2b09      	cmp	r3, #9
 8000430:	d9f3      	bls.n	800041a <string_LCD_Nr+0x16>

	string_LCD(msg);
 8000432:	68f8      	ldr	r0, [r7, #12]
 8000434:	f7ff ffd2 	bl	80003dc <string_LCD>

	do
	{
		digitos[n] = ((valor%10) + 48);	//pega o resto da divisao por 10
 8000438:	68b9      	ldr	r1, [r7, #8]
 800043a:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <string_LCD_Nr+0xa4>)
 800043c:	fba3 2301 	umull	r2, r3, r3, r1
 8000440:	08da      	lsrs	r2, r3, #3
 8000442:	4613      	mov	r3, r2
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4413      	add	r3, r2
 8000448:	005b      	lsls	r3, r3, #1
 800044a:	1aca      	subs	r2, r1, r3
 800044c:	b2d3      	uxtb	r3, r2
 800044e:	3330      	adds	r3, #48	; 0x30
 8000450:	b2d9      	uxtb	r1, r3
 8000452:	f107 0214 	add.w	r2, r7, #20
 8000456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000458:	4413      	add	r3, r2
 800045a:	460a      	mov	r2, r1
 800045c:	701a      	strb	r2, [r3, #0]
		valor /=10;						//pega o inteiro da divis�o por 10
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	4a11      	ldr	r2, [pc, #68]	; (80004a8 <string_LCD_Nr+0xa4>)
 8000462:	fba2 2303 	umull	r2, r3, r2, r3
 8000466:	08db      	lsrs	r3, r3, #3
 8000468:	60bb      	str	r3, [r7, #8]
		n++;
 800046a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800046c:	3301      	adds	r3, #1
 800046e:	627b      	str	r3, [r7, #36]	; 0x24

	}while (valor!=0);
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d1e0      	bne.n	8000438 <string_LCD_Nr+0x34>

	if(quant2Print != 0)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d011      	beq.n	80004a0 <string_LCD_Nr+0x9c>
	{
		n = quant2Print;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	627b      	str	r3, [r7, #36]	; 0x24
		do
		{
			caractere_LCD(digitos[n-1]);
 8000480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000482:	3b01      	subs	r3, #1
 8000484:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000488:	4413      	add	r3, r2
 800048a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff ff68 	bl	8000364 <caractere_LCD>
			n--;
 8000494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000496:	3b01      	subs	r3, #1
 8000498:	627b      	str	r3, [r7, #36]	; 0x24
		} while (n!=0);
 800049a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800049c:	2b00      	cmp	r3, #0
 800049e:	d1ef      	bne.n	8000480 <string_LCD_Nr+0x7c>
	}

}
 80004a0:	bf00      	nop
 80004a2:	3728      	adds	r7, #40	; 0x28
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	cccccccd 	.word	0xcccccccd

080004ac <limpa_LCD>:
//-----------------------------------------------------------------------------------------------
//Clears the LCD by writing zeros to the entire screen
void limpa_LCD()
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
	uint32_t i;

	for ( i= 0 ; i < 504 ; i++)
 80004b2:	2300      	movs	r3, #0
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	e007      	b.n	80004c8 <limpa_LCD+0x1c>
		fb[i] = 0x00;
 80004b8:	4a08      	ldr	r2, [pc, #32]	; (80004dc <limpa_LCD+0x30>)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4413      	add	r3, r2
 80004be:	2200      	movs	r2, #0
 80004c0:	701a      	strb	r2, [r3, #0]
	for ( i= 0 ; i < 504 ; i++)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	3301      	adds	r3, #1
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80004ce:	d3f3      	bcc.n	80004b8 <limpa_LCD+0xc>
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	2000019c 	.word	0x2000019c

080004e0 <desenha_pixel>:
// Desenha pixel
//-----------------------------------------------------------------------------------------------
void desenha_pixel(uint32_t x,				/* ponto horizontal para o pixel: 0 -> 83 (esq -> dir)	*/
				   uint32_t y,				/* ponto vertical para o pixel: 0 -> 47 (cima -> baixo)	*/
				   uint32_t propr)			/* 0 =  apaga pixel, 1 = liga pixel				*/
{
 80004e0:	b480      	push	{r7}
 80004e2:	b087      	sub	sp, #28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
	uint32_t i;

	if(x>83)	x=83;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	2b53      	cmp	r3, #83	; 0x53
 80004f0:	d901      	bls.n	80004f6 <desenha_pixel+0x16>
 80004f2:	2353      	movs	r3, #83	; 0x53
 80004f4:	60fb      	str	r3, [r7, #12]
	if(y>47)	y=47;
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	2b2f      	cmp	r3, #47	; 0x2f
 80004fa:	d901      	bls.n	8000500 <desenha_pixel+0x20>
 80004fc:	232f      	movs	r3, #47	; 0x2f
 80004fe:	60bb      	str	r3, [r7, #8]

	i = x + (84*(y/8));		/* determina��o do indice do byte a ser alterado [0 - 503]	*/
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	08db      	lsrs	r3, r3, #3
 8000504:	2254      	movs	r2, #84	; 0x54
 8000506:	fb02 f303 	mul.w	r3, r2, r3
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	4413      	add	r3, r2
 800050e:	617b      	str	r3, [r7, #20]

	if(propr==0)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d116      	bne.n	8000544 <desenha_pixel+0x64>
		clr_bit(fb[i],y%8);
 8000516:	4a18      	ldr	r2, [pc, #96]	; (8000578 <desenha_pixel+0x98>)
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	4413      	add	r3, r2
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	b25a      	sxtb	r2, r3
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	f003 0307 	and.w	r3, r3, #7
 8000526:	2101      	movs	r1, #1
 8000528:	fa01 f303 	lsl.w	r3, r1, r3
 800052c:	b25b      	sxtb	r3, r3
 800052e:	43db      	mvns	r3, r3
 8000530:	b25b      	sxtb	r3, r3
 8000532:	4013      	ands	r3, r2
 8000534:	b25b      	sxtb	r3, r3
 8000536:	b2d9      	uxtb	r1, r3
 8000538:	4a0f      	ldr	r2, [pc, #60]	; (8000578 <desenha_pixel+0x98>)
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	4413      	add	r3, r2
 800053e:	460a      	mov	r2, r1
 8000540:	701a      	strb	r2, [r3, #0]
	else
		set_bit(fb[i],y%8);

}
 8000542:	e013      	b.n	800056c <desenha_pixel+0x8c>
		set_bit(fb[i],y%8);
 8000544:	4a0c      	ldr	r2, [pc, #48]	; (8000578 <desenha_pixel+0x98>)
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	4413      	add	r3, r2
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	b25a      	sxtb	r2, r3
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	f003 0307 	and.w	r3, r3, #7
 8000554:	2101      	movs	r1, #1
 8000556:	fa01 f303 	lsl.w	r3, r1, r3
 800055a:	b25b      	sxtb	r3, r3
 800055c:	4313      	orrs	r3, r2
 800055e:	b25b      	sxtb	r3, r3
 8000560:	b2d9      	uxtb	r1, r3
 8000562:	4a05      	ldr	r2, [pc, #20]	; (8000578 <desenha_pixel+0x98>)
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	4413      	add	r3, r2
 8000568:	460a      	mov	r2, r1
 800056a:	701a      	strb	r2, [r3, #0]
}
 800056c:	bf00      	nop
 800056e:	371c      	adds	r7, #28
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	2000019c 	.word	0x2000019c

0800057c <desenha_linha>:
//-----------------------------------------------------------------------------------------------
// Desenha linha - ALGORITMO DE BRESENHAM - (http://www.etechplanet.com/codesnippets/computer-graphics-draw-a-line-using-bresenham-algorithm.aspx)
//-----------------------------------------------------------------------------------------------
void desenha_linha(struct  pontos_t *p,		/*  p.x1=x1, p.y1=y1, p.x2=x2, p.y2=y2, passagem dos pontos por struct	*/
						   uint32_t prop)	/* 0 =  apaga pixel, 1 = liga pixel				*/
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b092      	sub	sp, #72	; 0x48
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
	uint32_t i, x, y, x1, y1, x2, y2;
	int32_t dx, dy, dx1, dy1, px, py, xe, ye;

	x1 = p->x1;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	62bb      	str	r3, [r7, #40]	; 0x28
	y1 = p->y1;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
	x2 = p->x2;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	623b      	str	r3, [r7, #32]
	y2 = p->y2;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	61fb      	str	r3, [r7, #28]

	dx = x2-x1;
 800059e:	6a3a      	ldr	r2, [r7, #32]
 80005a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005a2:	1ad3      	subs	r3, r2, r3
 80005a4:	61bb      	str	r3, [r7, #24]
	dy = y2-y1;
 80005a6:	69fa      	ldr	r2, [r7, #28]
 80005a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	617b      	str	r3, [r7, #20]
	dx1 = abs(dx);
 80005ae:	69bb      	ldr	r3, [r7, #24]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	bfb8      	it	lt
 80005b4:	425b      	neglt	r3, r3
 80005b6:	613b      	str	r3, [r7, #16]
	dy1 = abs(dy);
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	bfb8      	it	lt
 80005be:	425b      	neglt	r3, r3
 80005c0:	60fb      	str	r3, [r7, #12]
	px = 2*dy1 - dx1;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	005a      	lsls	r2, r3, #1
 80005c6:	693b      	ldr	r3, [r7, #16]
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
	py = 2*dx1 - dy1;
 80005cc:	693b      	ldr	r3, [r7, #16]
 80005ce:	005a      	lsls	r2, r3, #1
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	1ad3      	subs	r3, r2, r3
 80005d4:	637b      	str	r3, [r7, #52]	; 0x34

	if(dy1 <= dx1)
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	693b      	ldr	r3, [r7, #16]
 80005da:	429a      	cmp	r2, r3
 80005dc:	dc4a      	bgt.n	8000674 <desenha_linha+0xf8>
	{	if(dx >= 0)
 80005de:	69bb      	ldr	r3, [r7, #24]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	db06      	blt.n	80005f2 <desenha_linha+0x76>
		{	x = x1;
 80005e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e6:	643b      	str	r3, [r7, #64]	; 0x40
			y = y1;
 80005e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
			xe = x2;
 80005ec:	6a3b      	ldr	r3, [r7, #32]
 80005ee:	633b      	str	r3, [r7, #48]	; 0x30
 80005f0:	e005      	b.n	80005fe <desenha_linha+0x82>
		}
		else
		{	x = x2;
 80005f2:	6a3b      	ldr	r3, [r7, #32]
 80005f4:	643b      	str	r3, [r7, #64]	; 0x40
			y = y2;
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xe = x1;
 80005fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005fc:	633b      	str	r3, [r7, #48]	; 0x30
		}
		desenha_pixel(x,y,prop);
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000602:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000604:	f7ff ff6c 	bl	80004e0 <desenha_pixel>
		for(i=0; x<xe; i++)
 8000608:	2300      	movs	r3, #0
 800060a:	647b      	str	r3, [r7, #68]	; 0x44
 800060c:	e02d      	b.n	800066a <desenha_linha+0xee>
		{
			x++;
 800060e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000610:	3301      	adds	r3, #1
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
			if(px<0)
 8000614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000616:	2b00      	cmp	r3, #0
 8000618:	da05      	bge.n	8000626 <desenha_linha+0xaa>
				px = px + 2*dy1;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000620:	4413      	add	r3, r2
 8000622:	63bb      	str	r3, [r7, #56]	; 0x38
 8000624:	e019      	b.n	800065a <desenha_linha+0xde>
			else
			{
				if((dx<0 && dy<0) || (dx>0 && dy>0))
 8000626:	69bb      	ldr	r3, [r7, #24]
 8000628:	2b00      	cmp	r3, #0
 800062a:	da02      	bge.n	8000632 <desenha_linha+0xb6>
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	2b00      	cmp	r3, #0
 8000630:	db05      	blt.n	800063e <desenha_linha+0xc2>
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	2b00      	cmp	r3, #0
 8000636:	dd06      	ble.n	8000646 <desenha_linha+0xca>
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	2b00      	cmp	r3, #0
 800063c:	dd03      	ble.n	8000646 <desenha_linha+0xca>
					y++;
 800063e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000640:	3301      	adds	r3, #1
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000644:	e002      	b.n	800064c <desenha_linha+0xd0>
				else
					y--;
 8000646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000648:	3b01      	subs	r3, #1
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
				px = px + 2*(dy1-dx1);
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000656:	4413      	add	r3, r2
 8000658:	63bb      	str	r3, [r7, #56]	; 0x38
			}
			desenha_pixel(x,y,prop);
 800065a:	683a      	ldr	r2, [r7, #0]
 800065c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800065e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000660:	f7ff ff3e 	bl	80004e0 <desenha_pixel>
		for(i=0; x<xe; i++)
 8000664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000666:	3301      	adds	r3, #1
 8000668:	647b      	str	r3, [r7, #68]	; 0x44
 800066a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800066c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800066e:	429a      	cmp	r2, r3
 8000670:	d3cd      	bcc.n	800060e <desenha_linha+0x92>
				py = py + 2*(dx1-dy1);
			}
			desenha_pixel(x,y,prop);
		}
	}
}
 8000672:	e049      	b.n	8000708 <desenha_linha+0x18c>
		if(dy >= 0)
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	2b00      	cmp	r3, #0
 8000678:	db06      	blt.n	8000688 <desenha_linha+0x10c>
		{	x=x1;
 800067a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067c:	643b      	str	r3, [r7, #64]	; 0x40
			y=y1;
 800067e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000680:	63fb      	str	r3, [r7, #60]	; 0x3c
			ye=y2;
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000686:	e005      	b.n	8000694 <desenha_linha+0x118>
		{	x=x2;
 8000688:	6a3b      	ldr	r3, [r7, #32]
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
			y=y2;
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
			ye=y1;
 8000690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
		desenha_pixel(x,y,prop);
 8000694:	683a      	ldr	r2, [r7, #0]
 8000696:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000698:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800069a:	f7ff ff21 	bl	80004e0 <desenha_pixel>
		for(i=0;y<ye;i++)
 800069e:	2300      	movs	r3, #0
 80006a0:	647b      	str	r3, [r7, #68]	; 0x44
 80006a2:	e02d      	b.n	8000700 <desenha_linha+0x184>
			y++;
 80006a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006a6:	3301      	adds	r3, #1
 80006a8:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(py <= 0)
 80006aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	dc05      	bgt.n	80006bc <desenha_linha+0x140>
				py = py + 2*dx1;
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006b6:	4413      	add	r3, r2
 80006b8:	637b      	str	r3, [r7, #52]	; 0x34
 80006ba:	e019      	b.n	80006f0 <desenha_linha+0x174>
				if((dx<0 && dy<0) || (dx>0 && dy>0))
 80006bc:	69bb      	ldr	r3, [r7, #24]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	da02      	bge.n	80006c8 <desenha_linha+0x14c>
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	db05      	blt.n	80006d4 <desenha_linha+0x158>
 80006c8:	69bb      	ldr	r3, [r7, #24]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	dd06      	ble.n	80006dc <desenha_linha+0x160>
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	dd03      	ble.n	80006dc <desenha_linha+0x160>
					x++;
 80006d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006d6:	3301      	adds	r3, #1
 80006d8:	643b      	str	r3, [r7, #64]	; 0x40
 80006da:	e002      	b.n	80006e2 <desenha_linha+0x166>
					x--;
 80006dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006de:	3b01      	subs	r3, #1
 80006e0:	643b      	str	r3, [r7, #64]	; 0x40
				py = py + 2*(dx1-dy1);
 80006e2:	693a      	ldr	r2, [r7, #16]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006ec:	4413      	add	r3, r2
 80006ee:	637b      	str	r3, [r7, #52]	; 0x34
			desenha_pixel(x,y,prop);
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80006f4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80006f6:	f7ff fef3 	bl	80004e0 <desenha_pixel>
		for(i=0;y<ye;i++)
 80006fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006fc:	3301      	adds	r3, #1
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
 8000700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000702:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000704:	429a      	cmp	r2, r3
 8000706:	d3cd      	bcc.n	80006a4 <desenha_linha+0x128>
}
 8000708:	bf00      	nop
 800070a:	3748      	adds	r7, #72	; 0x48
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <desenha_circulo>:
//--------------------------------------------------------------------------------------------------------------
// Desenha Circulo - Algoritmo de Ponto M�dio http://rosettacode.org/wiki/Bitmap/Midpoint_circle_algorithm#C
//--------------------------------------------------------------------------------------------------------------
void desenha_circulo(int32_t x0, int32_t y0,int32_t radius,	// valores int se fazem necess�rio devido as compara��es
											 uint32_t prop) // 0 =  paga pixel, 1 = liga pixel
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
 800071c:	603b      	str	r3, [r7, #0]
	  int f, ddF_x, ddF_y, x, y;

	  if(x0>83)	x0=83;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2b53      	cmp	r3, #83	; 0x53
 8000722:	dd01      	ble.n	8000728 <desenha_circulo+0x18>
 8000724:	2353      	movs	r3, #83	; 0x53
 8000726:	60fb      	str	r3, [r7, #12]
	  if(y0>47) y0=47;
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	2b2f      	cmp	r3, #47	; 0x2f
 800072c:	dd01      	ble.n	8000732 <desenha_circulo+0x22>
 800072e:	232f      	movs	r3, #47	; 0x2f
 8000730:	60bb      	str	r3, [r7, #8]

	  f = 1 - radius;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f1c3 0301 	rsb	r3, r3, #1
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
	  ddF_x = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
	  ddF_y = -2 * radius;
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	4613      	mov	r3, r2
 8000742:	07db      	lsls	r3, r3, #31
 8000744:	1a9b      	subs	r3, r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	61fb      	str	r3, [r7, #28]
	  x = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
	  y = radius;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	617b      	str	r3, [r7, #20]

	  // evita a impress�o fora do dom�nio de x e y (erros de impress�o)
	  if((y0 + radius) < 48)		desenha_pixel(x0, y0 + radius,prop);
 8000752:	68ba      	ldr	r2, [r7, #8]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4413      	add	r3, r2
 8000758:	2b2f      	cmp	r3, #47	; 0x2f
 800075a:	dc07      	bgt.n	800076c <desenha_circulo+0x5c>
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4413      	add	r3, r2
 8000764:	683a      	ldr	r2, [r7, #0]
 8000766:	4619      	mov	r1, r3
 8000768:	f7ff feba 	bl	80004e0 <desenha_pixel>
	  if((y0 - radius) >= 0)		desenha_pixel(x0, y0 - radius,prop);
 800076c:	68ba      	ldr	r2, [r7, #8]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	db07      	blt.n	8000786 <desenha_circulo+0x76>
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	68ba      	ldr	r2, [r7, #8]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	4619      	mov	r1, r3
 8000782:	f7ff fead 	bl	80004e0 <desenha_pixel>
	  if((x0 + radius) < 84)		desenha_pixel(x0 + radius, y0,prop);
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4413      	add	r3, r2
 800078c:	2b53      	cmp	r3, #83	; 0x53
 800078e:	dc08      	bgt.n	80007a2 <desenha_circulo+0x92>
 8000790:	68fa      	ldr	r2, [r7, #12]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	4618      	mov	r0, r3
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	f7ff fe9f 	bl	80004e0 <desenha_pixel>
	  if((x0 - radius) >= 0)		desenha_pixel(x0 - radius, y0,prop);
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	f2c0 80ca 	blt.w	8000942 <desenha_circulo+0x232>
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	4618      	mov	r0, r3
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	4619      	mov	r1, r3
 80007bc:	f7ff fe90 	bl	80004e0 <desenha_pixel>

	  while(x < y)
 80007c0:	e0bf      	b.n	8000942 <desenha_circulo+0x232>
	  {
		  if(f >= 0)
 80007c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	db09      	blt.n	80007dc <desenha_circulo+0xcc>
		  {
			  y--;
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
			  ddF_y += 2;
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3302      	adds	r3, #2
 80007d2:	61fb      	str	r3, [r7, #28]
			  f += ddF_y;
 80007d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	4413      	add	r3, r2
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
		  }
		  x++;
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	3301      	adds	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
		  ddF_x += 2;
 80007e2:	6a3b      	ldr	r3, [r7, #32]
 80007e4:	3302      	adds	r3, #2
 80007e6:	623b      	str	r3, [r7, #32]
		  f += ddF_x + 1;
 80007e8:	6a3b      	ldr	r3, [r7, #32]
 80007ea:	3301      	adds	r3, #1
 80007ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007ee:	4413      	add	r3, r2
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24

		  // evita a impress�o fora do dom�nio de x e y (erros de impress�o)
		  if(((x0+x) <84) && ((y0+y) < 48))		desenha_pixel(x0 + x, y0 + y,1);
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	4413      	add	r3, r2
 80007f8:	2b53      	cmp	r3, #83	; 0x53
 80007fa:	dc0f      	bgt.n	800081c <desenha_circulo+0x10c>
 80007fc:	68ba      	ldr	r2, [r7, #8]
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	4413      	add	r3, r2
 8000802:	2b2f      	cmp	r3, #47	; 0x2f
 8000804:	dc0a      	bgt.n	800081c <desenha_circulo+0x10c>
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	4413      	add	r3, r2
 800080c:	4618      	mov	r0, r3
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	4413      	add	r3, r2
 8000814:	2201      	movs	r2, #1
 8000816:	4619      	mov	r1, r3
 8000818:	f7ff fe62 	bl	80004e0 <desenha_pixel>
		  if(((x0-x) >=0) && ((y0+y) < 48))		desenha_pixel(x0 - x, y0 + y,1);
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	69bb      	ldr	r3, [r7, #24]
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	2b00      	cmp	r3, #0
 8000824:	db0f      	blt.n	8000846 <desenha_circulo+0x136>
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	4413      	add	r3, r2
 800082c:	2b2f      	cmp	r3, #47	; 0x2f
 800082e:	dc0a      	bgt.n	8000846 <desenha_circulo+0x136>
 8000830:	68fa      	ldr	r2, [r7, #12]
 8000832:	69bb      	ldr	r3, [r7, #24]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	4618      	mov	r0, r3
 8000838:	68ba      	ldr	r2, [r7, #8]
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	4413      	add	r3, r2
 800083e:	2201      	movs	r2, #1
 8000840:	4619      	mov	r1, r3
 8000842:	f7ff fe4d 	bl	80004e0 <desenha_pixel>
		  if(((x0+x) <84) && ((y0-y) >=0))		desenha_pixel(x0 + x, y0 - y,1);
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	4413      	add	r3, r2
 800084c:	2b53      	cmp	r3, #83	; 0x53
 800084e:	dc0f      	bgt.n	8000870 <desenha_circulo+0x160>
 8000850:	68ba      	ldr	r2, [r7, #8]
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	db0a      	blt.n	8000870 <desenha_circulo+0x160>
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	4413      	add	r3, r2
 8000860:	4618      	mov	r0, r3
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	2201      	movs	r2, #1
 800086a:	4619      	mov	r1, r3
 800086c:	f7ff fe38 	bl	80004e0 <desenha_pixel>
		  if(((x0-x) >=0) && ((y0-y) >=0))		desenha_pixel(x0 - x, y0 - y,1);
 8000870:	68fa      	ldr	r2, [r7, #12]
 8000872:	69bb      	ldr	r3, [r7, #24]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	db0f      	blt.n	800089a <desenha_circulo+0x18a>
 800087a:	68ba      	ldr	r2, [r7, #8]
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	2b00      	cmp	r3, #0
 8000882:	db0a      	blt.n	800089a <desenha_circulo+0x18a>
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	4618      	mov	r0, r3
 800088c:	68ba      	ldr	r2, [r7, #8]
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	2201      	movs	r2, #1
 8000894:	4619      	mov	r1, r3
 8000896:	f7ff fe23 	bl	80004e0 <desenha_pixel>
		  if(((x0+y) <84) && ((y0+x) < 48))		desenha_pixel(x0 + y, y0 + x,1);
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	4413      	add	r3, r2
 80008a0:	2b53      	cmp	r3, #83	; 0x53
 80008a2:	dc0f      	bgt.n	80008c4 <desenha_circulo+0x1b4>
 80008a4:	68ba      	ldr	r2, [r7, #8]
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	4413      	add	r3, r2
 80008aa:	2b2f      	cmp	r3, #47	; 0x2f
 80008ac:	dc0a      	bgt.n	80008c4 <desenha_circulo+0x1b4>
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	4413      	add	r3, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	4413      	add	r3, r2
 80008bc:	2201      	movs	r2, #1
 80008be:	4619      	mov	r1, r3
 80008c0:	f7ff fe0e 	bl	80004e0 <desenha_pixel>
		  if(((x0-y) >=0) && ((y0+x) < 48))		desenha_pixel(x0 - y, y0 + x,1);
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	db0f      	blt.n	80008ee <desenha_circulo+0x1de>
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	4413      	add	r3, r2
 80008d4:	2b2f      	cmp	r3, #47	; 0x2f
 80008d6:	dc0a      	bgt.n	80008ee <desenha_circulo+0x1de>
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	68ba      	ldr	r2, [r7, #8]
 80008e2:	69bb      	ldr	r3, [r7, #24]
 80008e4:	4413      	add	r3, r2
 80008e6:	2201      	movs	r2, #1
 80008e8:	4619      	mov	r1, r3
 80008ea:	f7ff fdf9 	bl	80004e0 <desenha_pixel>
		  if(((x0+y) <84) && ((y0-x) >=0))		desenha_pixel(x0 + y, y0 - x,1);
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	4413      	add	r3, r2
 80008f4:	2b53      	cmp	r3, #83	; 0x53
 80008f6:	dc0f      	bgt.n	8000918 <desenha_circulo+0x208>
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	69bb      	ldr	r3, [r7, #24]
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	db0a      	blt.n	8000918 <desenha_circulo+0x208>
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	4413      	add	r3, r2
 8000908:	4618      	mov	r0, r3
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	2201      	movs	r2, #1
 8000912:	4619      	mov	r1, r3
 8000914:	f7ff fde4 	bl	80004e0 <desenha_pixel>
		  if(((x0-y) >=0) && ((y0-x) >=0))		desenha_pixel(x0 - y, y0 - x,1);
 8000918:	68fa      	ldr	r2, [r7, #12]
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	db0f      	blt.n	8000942 <desenha_circulo+0x232>
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	2b00      	cmp	r3, #0
 800092a:	db0a      	blt.n	8000942 <desenha_circulo+0x232>
 800092c:	68fa      	ldr	r2, [r7, #12]
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	4618      	mov	r0, r3
 8000934:	68ba      	ldr	r2, [r7, #8]
 8000936:	69bb      	ldr	r3, [r7, #24]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	2201      	movs	r2, #1
 800093c:	4619      	mov	r1, r3
 800093e:	f7ff fdcf 	bl	80004e0 <desenha_pixel>
	  while(x < y)
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	429a      	cmp	r2, r3
 8000948:	f6ff af3b 	blt.w	80007c2 <desenha_circulo+0xb2>
	  }
}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	; 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <atraso_us>:

#include "atraso.h"

//-----------------------------------------------------------------------------------------
void atraso_us(uint32_t valor)									//argumento passado pelo registrador r0
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	asm volatile (  "movw r1, #:lower16:const_us	\n\t"
 800095c:	f240 0102 	movw	r1, #2
 8000960:	f2c0 0100 	movt	r1, #0
 8000964:	fb00 f001 	mul.w	r0, r0, r1

08000968 <r_us>:
 8000968:	3801      	subs	r0, #1
 800096a:	d1fd      	bne.n	8000968 <r_us>
					"movt r1, #:upper16:const_us	\n\t"		//r1 = fcpu/3000000 (const_us)
					"mul  r0, r0, r1				\n\t"	    //r0 = valor*(fcpu/3000000), cálculo do número de repetições do laço

					"r_us:	   subs r0, r0, #1		\n\t"
					"bne  r_us						\n\t");		//2 ciclos gastos quando tomado, 1 contrário
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr

08000976 <atraso_ms>:
//-----------------------------------------------------------------------------------------
void atraso_ms(uint32_t valor)									//argumento passado pelo registrador r0
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
	asm volatile ("movw r1, #:lower16:const_ms		\n\t"
 800097e:	f640 216a 	movw	r1, #2666	; 0xa6a
 8000982:	f2c0 0100 	movt	r1, #0
 8000986:	fb00 f001 	mul.w	r0, r0, r1

0800098a <r_ms>:
 800098a:	3801      	subs	r0, #1
 800098c:	d1fd      	bne.n	800098a <r_ms>
				  "movt r1, #:upper16:const_ms		\n\t"		//r1 = fcpu/3000 (const_ms)
				  "mul  r0, r0, r1					\n\t"		//r0 = valor*(fcpu/3000), cálculo do número de repetições do laço

				  "r_ms:	   subs r0, r0, #1		\n\t"
				  "bne  r_ms						\n\t");
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4a06      	ldr	r2, [pc, #24]	; (80009c0 <vApplicationGetIdleTaskMemory+0x28>)
 80009a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80009ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009b6:	bf00      	nop
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	20000398 	.word	0x20000398
 80009c4:	200003ec 	.word	0x200003ec

080009c8 <vTask1>:
static struct pontos_t pontoa, pontob;
static struct bola_t ball;
static struct jogador_t jogadores[2];

void vTask1(void *pvParameters)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

	while(1)
	{
		limpa_LCD();
 80009d0:	f7ff fd6c 	bl	80004ac <limpa_LCD>
		pontoa.x1 = (jogadores)->x;
 80009d4:	4b32      	ldr	r3, [pc, #200]	; (8000aa0 <vTask1+0xd8>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a32      	ldr	r2, [pc, #200]	; (8000aa4 <vTask1+0xdc>)
 80009da:	6013      	str	r3, [r2, #0]
		pontoa.y1 = (jogadores)->y - ((jogadores)->h)/2;
 80009dc:	4b30      	ldr	r3, [pc, #192]	; (8000aa0 <vTask1+0xd8>)
 80009de:	685a      	ldr	r2, [r3, #4]
 80009e0:	4b2f      	ldr	r3, [pc, #188]	; (8000aa0 <vTask1+0xd8>)
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	085b      	lsrs	r3, r3, #1
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	4a2e      	ldr	r2, [pc, #184]	; (8000aa4 <vTask1+0xdc>)
 80009ea:	6053      	str	r3, [r2, #4]
		pontoa.x2 = (jogadores)->x;
 80009ec:	4b2c      	ldr	r3, [pc, #176]	; (8000aa0 <vTask1+0xd8>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a2c      	ldr	r2, [pc, #176]	; (8000aa4 <vTask1+0xdc>)
 80009f2:	6093      	str	r3, [r2, #8]
		pontoa.y2 = (jogadores)->y + ((jogadores)->h)/2;
 80009f4:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <vTask1+0xd8>)
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <vTask1+0xd8>)
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	085b      	lsrs	r3, r3, #1
 80009fe:	4413      	add	r3, r2
 8000a00:	4a28      	ldr	r2, [pc, #160]	; (8000aa4 <vTask1+0xdc>)
 8000a02:	60d3      	str	r3, [r2, #12]
		pontoa.x1 = (jogadores)->x;
 8000a04:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <vTask1+0xd8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a26      	ldr	r2, [pc, #152]	; (8000aa4 <vTask1+0xdc>)
 8000a0a:	6013      	str	r3, [r2, #0]
		pontob.x1 = (jogadores+1)->x;
 8000a0c:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <vTask1+0xd8>)
 8000a0e:	691b      	ldr	r3, [r3, #16]
 8000a10:	4a25      	ldr	r2, [pc, #148]	; (8000aa8 <vTask1+0xe0>)
 8000a12:	6013      	str	r3, [r2, #0]
		pontob.y1 = (jogadores+1)->y - ((jogadores+1)->h)/2;
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <vTask1+0xd8>)
 8000a16:	695a      	ldr	r2, [r3, #20]
 8000a18:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <vTask1+0xd8>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	085b      	lsrs	r3, r3, #1
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <vTask1+0xe0>)
 8000a22:	6053      	str	r3, [r2, #4]
		pontob.x2 = (jogadores+1)->x;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <vTask1+0xd8>)
 8000a26:	691b      	ldr	r3, [r3, #16]
 8000a28:	4a1f      	ldr	r2, [pc, #124]	; (8000aa8 <vTask1+0xe0>)
 8000a2a:	6093      	str	r3, [r2, #8]
		pontob.y2 = (jogadores+1)->y + ((jogadores+1)->h)/2;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <vTask1+0xd8>)
 8000a2e:	695a      	ldr	r2, [r3, #20]
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <vTask1+0xd8>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	085b      	lsrs	r3, r3, #1
 8000a36:	4413      	add	r3, r2
 8000a38:	4a1b      	ldr	r2, [pc, #108]	; (8000aa8 <vTask1+0xe0>)
 8000a3a:	60d3      	str	r3, [r2, #12]
		pontob.x1 = (jogadores+1)->x;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <vTask1+0xd8>)
 8000a3e:	691b      	ldr	r3, [r3, #16]
 8000a40:	4a19      	ldr	r2, [pc, #100]	; (8000aa8 <vTask1+0xe0>)
 8000a42:	6013      	str	r3, [r2, #0]
		desenha_linha(&pontoa, 1);
 8000a44:	2101      	movs	r1, #1
 8000a46:	4817      	ldr	r0, [pc, #92]	; (8000aa4 <vTask1+0xdc>)
 8000a48:	f7ff fd98 	bl	800057c <desenha_linha>
		desenha_linha(&pontob, 1);
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	4816      	ldr	r0, [pc, #88]	; (8000aa8 <vTask1+0xe0>)
 8000a50:	f7ff fd94 	bl	800057c <desenha_linha>
		move_bola(&ball, jogadores);
 8000a54:	4912      	ldr	r1, [pc, #72]	; (8000aa0 <vTask1+0xd8>)
 8000a56:	4815      	ldr	r0, [pc, #84]	; (8000aac <vTask1+0xe4>)
 8000a58:	f000 fb1d 	bl	8001096 <move_bola>
		desenha_circulo(ball.x, ball.y, ball.m, 1);
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <vTask1+0xe4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <vTask1+0xe4>)
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	4619      	mov	r1, r3
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <vTask1+0xe4>)
 8000a6a:	691b      	ldr	r3, [r3, #16]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	2301      	movs	r3, #1
 8000a70:	f7ff fe4e 	bl	8000710 <desenha_circulo>
		HAL_ADC_Start_DMA(&hadc1, &var, 1);
 8000a74:	2201      	movs	r2, #1
 8000a76:	490e      	ldr	r1, [pc, #56]	; (8000ab0 <vTask1+0xe8>)
 8000a78:	480e      	ldr	r0, [pc, #56]	; (8000ab4 <vTask1+0xec>)
 8000a7a:	f000 ff05 	bl	8001888 <HAL_ADC_Start_DMA>
		move_jogador0(jogadores, var);
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <vTask1+0xe8>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4619      	mov	r1, r3
 8000a84:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <vTask1+0xd8>)
 8000a86:	f000 fbc8 	bl	800121a <move_jogador0>
		move_jogador1(jogadores, &ball);
 8000a8a:	4908      	ldr	r1, [pc, #32]	; (8000aac <vTask1+0xe4>)
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <vTask1+0xd8>)
 8000a8e:	f000 fbea 	bl	8001266 <move_jogador1>
		imprime_LCD();
 8000a92:	f7ff fc4d 	bl	8000330 <imprime_LCD>
		HAL_Delay(60);
 8000a96:	203c      	movs	r0, #60	; 0x3c
 8000a98:	f000 fdfc 	bl	8001694 <HAL_Delay>
		limpa_LCD();
 8000a9c:	e798      	b.n	80009d0 <vTask1+0x8>
 8000a9e:	bf00      	nop
 8000aa0:	20000638 	.word	0x20000638
 8000aa4:	200005f0 	.word	0x200005f0
 8000aa8:	20000608 	.word	0x20000608
 8000aac:	20000620 	.word	0x20000620
 8000ab0:	200005ec 	.word	0x200005ec
 8000ab4:	200015cc 	.word	0x200015cc

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abe:	f000 fdb7 	bl	8001630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac2:	f000 f849 	bl	8000b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac6:	f000 f901 	bl	8000ccc <MX_GPIO_Init>
  MX_DMA_Init();
 8000aca:	f000 f8e1 	bl	8000c90 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ace:	f000 f8a1 	bl	8000c14 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  (jogadores)->score = 0;
 8000ad2:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <main+0x88>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  (jogadores + 1)->score = 0;
 8000ad8:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <main+0x88>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  inic_LCD();
 8000ade:	f7ff fbc3 	bl	8000268 <inic_LCD>
  HAL_Delay(1000);
 8000ae2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ae6:	f000 fdd5 	bl	8001694 <HAL_Delay>
  limpa_LCD();
 8000aea:	f7ff fcdf 	bl	80004ac <limpa_LCD>
  intro();
 8000aee:	f000 f98b 	bl	8000e08 <intro>
  init_game(&ball, jogadores, 0, 0);
 8000af2:	2300      	movs	r3, #0
 8000af4:	2200      	movs	r2, #0
 8000af6:	4912      	ldr	r1, [pc, #72]	; (8000b40 <main+0x88>)
 8000af8:	4812      	ldr	r0, [pc, #72]	; (8000b44 <main+0x8c>)
 8000afa:	f000 f9db 	bl	8000eb4 <init_game>

  xTaskCreate(vTask1,"Tarefa 1",100, NULL, 1, NULL);
 8000afe:	2300      	movs	r3, #0
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	2301      	movs	r3, #1
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2300      	movs	r3, #0
 8000b08:	2264      	movs	r2, #100	; 0x64
 8000b0a:	490f      	ldr	r1, [pc, #60]	; (8000b48 <main+0x90>)
 8000b0c:	480f      	ldr	r0, [pc, #60]	; (8000b4c <main+0x94>)
 8000b0e:	f006 f9c9 	bl	8006ea4 <xTaskCreate>
  vTaskStartScheduler();
 8000b12:	f006 fb29 	bl	8007168 <vTaskStartScheduler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <main+0x98>)
 8000b18:	1d3c      	adds	r4, r7, #4
 8000b1a:	461d      	mov	r5, r3
 8000b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f006 f851 	bl	8006bd4 <osThreadCreate>
 8000b32:	4602      	mov	r2, r0
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <main+0x9c>)
 8000b36:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b38:	f006 f845 	bl	8006bc6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <main+0x84>
 8000b3e:	bf00      	nop
 8000b40:	20000638 	.word	0x20000638
 8000b44:	20000620 	.word	0x20000620
 8000b48:	08008858 	.word	0x08008858
 8000b4c:	080009c9 	.word	0x080009c9
 8000b50:	08008870 	.word	0x08008870
 8000b54:	200015c8 	.word	0x200015c8

08000b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b094      	sub	sp, #80	; 0x50
 8000b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b62:	2228      	movs	r2, #40	; 0x28
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f007 fe62 	bl	8008830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b96:	2301      	movs	r3, #1
 8000b98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ba4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f002 fc86 	bl	80034c0 <HAL_RCC_OscConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bba:	f000 f91f 	bl	8000dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbe:	230f      	movs	r3, #15
 8000bc0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2101      	movs	r1, #1
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f002 fef0 	bl	80039c0 <HAL_RCC_ClockConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000be6:	f000 f909 	bl	8000dfc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000bea:	2312      	movs	r3, #18
 8000bec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000bee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bf2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000bf4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bf8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f003 f897 	bl	8003d30 <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c08:	f000 f8f8 	bl	8000dfc <Error_Handler>
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3750      	adds	r7, #80	; 0x50
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c24:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <MX_ADC1_Init+0x74>)
 8000c26:	4a19      	ldr	r2, [pc, #100]	; (8000c8c <MX_ADC1_Init+0x78>)
 8000c28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <MX_ADC1_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <MX_ADC1_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_ADC1_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <MX_ADC1_Init+0x74>)
 8000c3e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c44:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MX_ADC1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_ADC1_Init+0x74>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_ADC1_Init+0x74>)
 8000c52:	f000 fd41 	bl	80016d8 <HAL_ADC_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c5c:	f000 f8ce 	bl	8000dfc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c60:	2302      	movs	r3, #2
 8000c62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c68:	2307      	movs	r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_ADC1_Init+0x74>)
 8000c72:	f000 ff03 	bl	8001a7c <HAL_ADC_ConfigChannel>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c7c:	f000 f8be 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200015cc 	.word	0x200015cc
 8000c8c:	40012400 	.word	0x40012400

08000c90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_DMA_Init+0x38>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <MX_DMA_Init+0x38>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6153      	str	r3, [r2, #20]
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_DMA_Init+0x38>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	200b      	movs	r0, #11
 8000cb4:	f001 f981 	bl	8001fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cb8:	200b      	movs	r0, #11
 8000cba:	f001 f99a 	bl	8001ff2 <HAL_NVIC_EnableIRQ>

}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce0:	4b34      	ldr	r3, [pc, #208]	; (8000db4 <MX_GPIO_Init+0xe8>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a33      	ldr	r2, [pc, #204]	; (8000db4 <MX_GPIO_Init+0xe8>)
 8000ce6:	f043 0310 	orr.w	r3, r3, #16
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b31      	ldr	r3, [pc, #196]	; (8000db4 <MX_GPIO_Init+0xe8>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0310 	and.w	r3, r3, #16
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf8:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <MX_GPIO_Init+0xe8>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a2d      	ldr	r2, [pc, #180]	; (8000db4 <MX_GPIO_Init+0xe8>)
 8000cfe:	f043 0320 	orr.w	r3, r3, #32
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <MX_GPIO_Init+0xe8>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f003 0320 	and.w	r3, r3, #32
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <MX_GPIO_Init+0xe8>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a27      	ldr	r2, [pc, #156]	; (8000db4 <MX_GPIO_Init+0xe8>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b25      	ldr	r3, [pc, #148]	; (8000db4 <MX_GPIO_Init+0xe8>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <MX_GPIO_Init+0xe8>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a21      	ldr	r2, [pc, #132]	; (8000db4 <MX_GPIO_Init+0xe8>)
 8000d2e:	f043 0308 	orr.w	r3, r3, #8
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <MX_GPIO_Init+0xe8>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0308 	and.w	r3, r3, #8
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d46:	481c      	ldr	r0, [pc, #112]	; (8000db8 <MX_GPIO_Init+0xec>)
 8000d48:	f001 fcc1 	bl	80026ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CLK_Pin|LCD_DIN_Pin|LCD_DC_Pin|LCD_CE_Pin
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	21f8      	movs	r1, #248	; 0xf8
 8000d50:	481a      	ldr	r0, [pc, #104]	; (8000dbc <MX_GPIO_Init+0xf0>)
 8000d52:	f001 fcbc 	bl	80026ce <HAL_GPIO_WritePin>
                          |LCD_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2302      	movs	r3, #2
 8000d66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4812      	ldr	r0, [pc, #72]	; (8000db8 <MX_GPIO_Init+0xec>)
 8000d70:	f001 fb3c 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CLK_Pin LCD_DIN_Pin LCD_DC_Pin LCD_CE_Pin
                           LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CLK_Pin|LCD_DIN_Pin|LCD_DC_Pin|LCD_CE_Pin
 8000d74:	23f8      	movs	r3, #248	; 0xf8
 8000d76:	613b      	str	r3, [r7, #16]
                          |LCD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480c      	ldr	r0, [pc, #48]	; (8000dbc <MX_GPIO_Init+0xf0>)
 8000d8c:	f001 fb2e 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	4619      	mov	r1, r3
 8000da4:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <MX_GPIO_Init+0xf4>)
 8000da6:	f001 fb21 	bl	80023ec <HAL_GPIO_Init>

}
 8000daa:	bf00      	nop
 8000dac:	3720      	adds	r7, #32
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40011000 	.word	0x40011000
 8000dbc:	40010800 	.word	0x40010800
 8000dc0:	40010c00 	.word	0x40010c00

08000dc4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000dcc:	f007 f8a2 	bl	8007f14 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f005 ff4b 	bl	8006c6c <osDelay>
 8000dd6:	e7fb      	b.n	8000dd0 <StartDefaultTask+0xc>

08000dd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d101      	bne.n	8000dee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dea:	f000 fc37 	bl	800165c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40000800 	.word	0x40000800

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <intro>:
#include "figuras.h"
#include "NOKIA5110.h"
#include "atraso.h"


void intro(){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
		goto_XY(0, 0);
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f7ff fa4c 	bl	80002ac <goto_XY>
		string_LCD("   PONG   ");
 8000e14:	4815      	ldr	r0, [pc, #84]	; (8000e6c <intro+0x64>)
 8000e16:	f7ff fae1 	bl	80003dc <string_LCD>
		goto_XY(0, 2);
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff fa45 	bl	80002ac <goto_XY>
		string_LCD("Aperte para");
 8000e22:	4813      	ldr	r0, [pc, #76]	; (8000e70 <intro+0x68>)
 8000e24:	f7ff fada 	bl	80003dc <string_LCD>
		goto_XY(0, 3);
 8000e28:	2103      	movs	r1, #3
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff fa3e 	bl	80002ac <goto_XY>
		string_LCD("iniciar o jogo");
 8000e30:	4810      	ldr	r0, [pc, #64]	; (8000e74 <intro+0x6c>)
 8000e32:	f7ff fad3 	bl	80003dc <string_LCD>
		imprime_LCD();
 8000e36:	f7ff fa7b 	bl	8000330 <imprime_LCD>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) != GPIO_PIN_SET);
 8000e3a:	bf00      	nop
 8000e3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e40:	480d      	ldr	r0, [pc, #52]	; (8000e78 <intro+0x70>)
 8000e42:	f001 fc2d 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d1f7      	bne.n	8000e3c <intro+0x34>
		HAL_Delay(300);
 8000e4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e50:	f000 fc20 	bl	8001694 <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) != GPIO_PIN_SET);
 8000e54:	bf00      	nop
 8000e56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5a:	4807      	ldr	r0, [pc, #28]	; (8000e78 <intro+0x70>)
 8000e5c:	f001 fc20 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d1f7      	bne.n	8000e56 <intro+0x4e>
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	0800888c 	.word	0x0800888c
 8000e70:	08008898 	.word	0x08008898
 8000e74:	080088a4 	.word	0x080088a4
 8000e78:	40010c00 	.word	0x40010c00

08000e7c <espera_botao>:

void espera_botao(){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) != GPIO_PIN_SET);
 8000e80:	bf00      	nop
 8000e82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e86:	480a      	ldr	r0, [pc, #40]	; (8000eb0 <espera_botao+0x34>)
 8000e88:	f001 fc0a 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d1f7      	bne.n	8000e82 <espera_botao+0x6>
	HAL_Delay(300);
 8000e92:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e96:	f000 fbfd 	bl	8001694 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) != GPIO_PIN_SET);
 8000e9a:	bf00      	nop
 8000e9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea0:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <espera_botao+0x34>)
 8000ea2:	f001 fbfd 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d1f7      	bne.n	8000e9c <espera_botao+0x20>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40010c00 	.word	0x40010c00

08000eb4 <init_game>:

void init_game(struct bola_t *ball, struct jogador_t *jogadores, __uint32_t score1, __uint32_t score2){
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	603b      	str	r3, [r7, #0]

		ball->x = 42; // bola no centro
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	222a      	movs	r2, #42	; 0x2a
 8000ec6:	601a      	str	r2, [r3, #0]
		ball->y = 24;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2218      	movs	r2, #24
 8000ecc:	605a      	str	r2, [r3, #4]
		ball->dy = 2; //função de numero aleatorio
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	60da      	str	r2, [r3, #12]
		ball->dx = 2; //função de numero aleatorio
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	609a      	str	r2, [r3, #8]
		ball->h = 2; // raio
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2202      	movs	r2, #2
 8000ede:	615a      	str	r2, [r3, #20]
		ball->m = 2; // raio
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	611a      	str	r2, [r3, #16]

		(jogadores)->x = 4;  // 0 + 2
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	2204      	movs	r2, #4
 8000eea:	601a      	str	r2, [r3, #0]
		(jogadores)->y = 24; // 48/2
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	2218      	movs	r2, #24
 8000ef0:	605a      	str	r2, [r3, #4]
		(jogadores)->h = 6;
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	2206      	movs	r2, #6
 8000ef6:	609a      	str	r2, [r3, #8]
		(jogadores)->score = (jogadores)->score + score1;
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	441a      	add	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	60da      	str	r2, [r3, #12]

		(jogadores+1)->x = 80; // 81 + 2
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	3310      	adds	r3, #16
 8000f08:	2250      	movs	r2, #80	; 0x50
 8000f0a:	601a      	str	r2, [r3, #0]
		(jogadores+1)->y = 24; // 48/2
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	3310      	adds	r3, #16
 8000f10:	2218      	movs	r2, #24
 8000f12:	605a      	str	r2, [r3, #4]
		(jogadores+1)->h = 6;
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	3310      	adds	r3, #16
 8000f18:	2206      	movs	r2, #6
 8000f1a:	609a      	str	r2, [r3, #8]
		(jogadores+1)->score = (jogadores+1)->score + score2;
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	3310      	adds	r3, #16
 8000f20:	68d9      	ldr	r1, [r3, #12]
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	3310      	adds	r3, #16
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	440a      	add	r2, r1
 8000f2a:	60da      	str	r2, [r3, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
	...

08000f38 <check_score>:

void check_score(struct jogador_t *jogador){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

	int i;

	//loop through player scores
	for(i = 0; i < 2; i++) {
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	e049      	b.n	8000fda <check_score+0xa2>
		limpa_LCD();
 8000f46:	f7ff fab1 	bl	80004ac <limpa_LCD>
		goto_XY(0, 0);
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff f9ad 	bl	80002ac <goto_XY>
		string_LCD_Nr("Seu score: ", (jogador)->score, 1);// escreve uma mensagem com um número
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	2201      	movs	r2, #1
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4823      	ldr	r0, [pc, #140]	; (8000fe8 <check_score+0xb0>)
 8000f5c:	f7ff fa52 	bl	8000404 <string_LCD_Nr>
		goto_XY(0, 2);
 8000f60:	2102      	movs	r1, #2
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff f9a2 	bl	80002ac <goto_XY>
		string_LCD_Nr("Score adv: ", (jogador+1)->score, 1);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3310      	adds	r3, #16
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4619      	mov	r1, r3
 8000f72:	481e      	ldr	r0, [pc, #120]	; (8000fec <check_score+0xb4>)
 8000f74:	f7ff fa46 	bl	8000404 <string_LCD_Nr>
		imprime_LCD();
 8000f78:	f7ff f9da 	bl	8000330 <imprime_LCD>
		atraso_ms(2500);
 8000f7c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000f80:	f7ff fcf9 	bl	8000976 <atraso_ms>
		//check if score is @ the score win limit
		if ((jogador+i)->score == 3 ) {
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d120      	bne.n	8000fd4 <check_score+0x9c>

			//reset scores
			(jogador)->score = 0;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
			(jogador+1)->score = 0;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3310      	adds	r3, #16
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]

			//return 1 if player 1 score @ limit
			if (i == 0) {
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10b      	bne.n	8000fbe <check_score+0x86>
				escreve2fb((unsigned char*) game_won);
 8000fa6:	4812      	ldr	r0, [pc, #72]	; (8000ff0 <check_score+0xb8>)
 8000fa8:	f7ff f99e 	bl	80002e8 <escreve2fb>
				imprime_LCD();
 8000fac:	f7ff f9c0 	bl	8000330 <imprime_LCD>
				atraso_ms(2500);
 8000fb0:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000fb4:	f7ff fcdf 	bl	8000976 <atraso_ms>
				espera_botao();
 8000fb8:	f7ff ff60 	bl	8000e7c <espera_botao>
 8000fbc:	e00a      	b.n	8000fd4 <check_score+0x9c>

			//return 2 if player 2 score is @ limit
			} else {
				escreve2fb((unsigned char*) game_over);
 8000fbe:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <check_score+0xbc>)
 8000fc0:	f7ff f992 	bl	80002e8 <escreve2fb>
				imprime_LCD();
 8000fc4:	f7ff f9b4 	bl	8000330 <imprime_LCD>
				atraso_ms(2500);
 8000fc8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000fcc:	f7ff fcd3 	bl	8000976 <atraso_ms>
				espera_botao();
 8000fd0:	f7ff ff54 	bl	8000e7c <espera_botao>
	for(i = 0; i < 2; i++) {
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	ddb2      	ble.n	8000f46 <check_score+0xe>
			}
		}
	}
}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	080088b4 	.word	0x080088b4
 8000fec:	080088c0 	.word	0x080088c0
 8000ff0:	08008d08 	.word	0x08008d08
 8000ff4:	08008b10 	.word	0x08008b10

08000ff8 <check_colisao>:

__uint32_t check_colisao(struct bola_t *a, struct jogador_t *b){
 8000ff8:	b480      	push	{r7}
 8000ffa:	b08b      	sub	sp, #44	; 0x2c
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
	__uint32_t  left_a, left_b;
	__uint32_t  right_a, right_b;
	__uint32_t  top_a, top_b;
	__uint32_t  bottom_a, bottom_b;

		left_a = a->x - (a->m);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
		right_a = a->x + (a->m);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	4413      	add	r3, r2
 8001018:	623b      	str	r3, [r7, #32]
		top_a = a->y - (a->h);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	61fb      	str	r3, [r7, #28]
		bottom_a = a->y + (a->h);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	4413      	add	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]

		left_b = b->x;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	617b      	str	r3, [r7, #20]
		right_b = b->x;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	613b      	str	r3, [r7, #16]
		top_b = b-> y - (b->h)/2;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	085b      	lsrs	r3, r3, #1
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	60fb      	str	r3, [r7, #12]
		bottom_b = b->y + (b->h)/2;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	085b      	lsrs	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	60bb      	str	r3, [r7, #8]


		if (left_a > right_b) {
 800105a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	429a      	cmp	r2, r3
 8001060:	d901      	bls.n	8001066 <check_colisao+0x6e>
			return 0;
 8001062:	2300      	movs	r3, #0
 8001064:	e012      	b.n	800108c <check_colisao+0x94>
		}

		if (right_a < left_b) {
 8001066:	6a3a      	ldr	r2, [r7, #32]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	429a      	cmp	r2, r3
 800106c:	d201      	bcs.n	8001072 <check_colisao+0x7a>
			return 0;
 800106e:	2300      	movs	r3, #0
 8001070:	e00c      	b.n	800108c <check_colisao+0x94>
		}

		if (top_a > bottom_b) {
 8001072:	69fa      	ldr	r2, [r7, #28]
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	429a      	cmp	r2, r3
 8001078:	d901      	bls.n	800107e <check_colisao+0x86>
			return 0;
 800107a:	2300      	movs	r3, #0
 800107c:	e006      	b.n	800108c <check_colisao+0x94>
		}

		if (bottom_a < top_b) {
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d201      	bcs.n	800108a <check_colisao+0x92>
			return 0;
 8001086:	2300      	movs	r3, #0
 8001088:	e000      	b.n	800108c <check_colisao+0x94>
		}

		return 1;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	372c      	adds	r7, #44	; 0x2c
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr

08001096 <move_bola>:

void move_bola(struct bola_t *ball, struct jogador_t *jogador){
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	6039      	str	r1, [r7, #0]
	/* Move the ball by its motion vector. */
		ball->x += ball->dx;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	441a      	add	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	601a      	str	r2, [r3, #0]
		ball->y += ball->dy;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	441a      	add	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	605a      	str	r2, [r3, #4]

		/* Turn the ball around if it hits the edge of the screen. */
		if (ball->x < 3) {
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d808      	bhi.n	80010d6 <move_bola+0x40>

			init_game(ball, jogador, 0, 1);
 80010c4:	2301      	movs	r3, #1
 80010c6:	2200      	movs	r2, #0
 80010c8:	6839      	ldr	r1, [r7, #0]
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff fef2 	bl	8000eb4 <init_game>
			check_score(jogador);
 80010d0:	6838      	ldr	r0, [r7, #0]
 80010d2:	f7ff ff31 	bl	8000f38 <check_score>
		}

		if (ball->x > 80) {
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b50      	cmp	r3, #80	; 0x50
 80010dc:	d908      	bls.n	80010f0 <move_bola+0x5a>

			init_game(ball, jogador, 1, 0);
 80010de:	2300      	movs	r3, #0
 80010e0:	2201      	movs	r2, #1
 80010e2:	6839      	ldr	r1, [r7, #0]
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff fee5 	bl	8000eb4 <init_game>
			check_score(jogador);
 80010ea:	6838      	ldr	r0, [r7, #0]
 80010ec:	f7ff ff24 	bl	8000f38 <check_score>
		}

		if (ball->y < 3 || ball->y > 43) {
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d903      	bls.n	8001100 <move_bola+0x6a>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b2b      	cmp	r3, #43	; 0x2b
 80010fe:	d904      	bls.n	800110a <move_bola+0x74>

			ball->dy = -ball->dy;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	425a      	negs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	60da      	str	r2, [r3, #12]
		}

		//check for collision with the paddle
		__uint32_t i;

		for (i = 0; i < 2; i++) {
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	e07c      	b.n	800120a <move_bola+0x174>

			__uint32_t c = check_colisao(ball, (jogador+i));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	011b      	lsls	r3, r3, #4
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4619      	mov	r1, r3
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff6c 	bl	8000ff8 <check_colisao>
 8001120:	6138      	str	r0, [r7, #16]


			//collision detected
			if (c) {
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d06d      	beq.n	8001204 <move_bola+0x16e>

				//ball moving left
				if (ball->dx < 0) ball->dx -= 1;

				//ball moving right
				else ball->dx += 1;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	609a      	str	r2, [r3, #8]

				//change ball direction
				ball->dx = -ball->dx;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	425a      	negs	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	609a      	str	r2, [r3, #8]

				//change ball angle
				__uint32_t hitP = ((jogador+i)->y + (jogador+i)->h) - ball->y;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	011b      	lsls	r3, r3, #4
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	4413      	add	r3, r2
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	011b      	lsls	r3, r3, #4
 800114a:	6839      	ldr	r1, [r7, #0]
 800114c:	440b      	add	r3, r1
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	441a      	add	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	60fb      	str	r3, [r7, #12]

				if(hitP >= 1 && hitP < 8) ball->dy = 3;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d005      	beq.n	800116c <move_bola+0xd6>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b07      	cmp	r3, #7
 8001164:	d802      	bhi.n	800116c <move_bola+0xd6>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2203      	movs	r2, #3
 800116a:	60da      	str	r2, [r3, #12]
				if(hitP>= 8 && hitP < 15) ball->dy = 2;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b07      	cmp	r3, #7
 8001170:	d905      	bls.n	800117e <move_bola+0xe8>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2b0e      	cmp	r3, #14
 8001176:	d802      	bhi.n	800117e <move_bola+0xe8>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2202      	movs	r2, #2
 800117c:	60da      	str	r2, [r3, #12]
				if(hitP>=15 && hitP < 22) ball->dy = 1;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2b0e      	cmp	r3, #14
 8001182:	d905      	bls.n	8001190 <move_bola+0xfa>
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b15      	cmp	r3, #21
 8001188:	d802      	bhi.n	8001190 <move_bola+0xfa>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	60da      	str	r2, [r3, #12]
				if(hitP>=22 && hitP < 25) ball->dy = 0;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2b15      	cmp	r3, #21
 8001194:	d905      	bls.n	80011a2 <move_bola+0x10c>
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2b18      	cmp	r3, #24
 800119a:	d802      	bhi.n	80011a2 <move_bola+0x10c>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
				if(hitP>=25 && hitP < 33) ball->dy = -1;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2b18      	cmp	r3, #24
 80011a6:	d906      	bls.n	80011b6 <move_bola+0x120>
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2b20      	cmp	r3, #32
 80011ac:	d803      	bhi.n	80011b6 <move_bola+0x120>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	60da      	str	r2, [r3, #12]
				if(hitP>=33 && hitP < 40) ball->dy = -2;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2b20      	cmp	r3, #32
 80011ba:	d906      	bls.n	80011ca <move_bola+0x134>
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2b27      	cmp	r3, #39	; 0x27
 80011c0:	d803      	bhi.n	80011ca <move_bola+0x134>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f06f 0201 	mvn.w	r2, #1
 80011c8:	60da      	str	r2, [r3, #12]
				if(hitP>=40 && hitP < 47) ball->dy = -3;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2b27      	cmp	r3, #39	; 0x27
 80011ce:	d906      	bls.n	80011de <move_bola+0x148>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2b2e      	cmp	r3, #46	; 0x2e
 80011d4:	d803      	bhi.n	80011de <move_bola+0x148>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f06f 0202 	mvn.w	r2, #2
 80011dc:	60da      	str	r2, [r3, #12]

				//ball moving right
				if(ball->dx > 0){
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d007      	beq.n	80011f6 <move_bola+0x160>
					if(ball->x < 6) ball->x = 6;}
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b05      	cmp	r3, #5
 80011ec:	d80a      	bhi.n	8001204 <move_bola+0x16e>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2206      	movs	r2, #6
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	e006      	b.n	8001204 <move_bola+0x16e>
				else{
					if(ball->x > 82) ball->x = 82;}
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b52      	cmp	r3, #82	; 0x52
 80011fc:	d902      	bls.n	8001204 <move_bola+0x16e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2252      	movs	r2, #82	; 0x52
 8001202:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 2; i++) {
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	3301      	adds	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	2b01      	cmp	r3, #1
 800120e:	f67f af7f 	bls.w	8001110 <move_bola+0x7a>


			}

		}
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <move_jogador0>:


void move_jogador0 (struct jogador_t *jogador, __uint32_t adc){
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]

	if(adc >= 4000){
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800122a:	d309      	bcc.n	8001240 <move_jogador0+0x26>
		if(jogador->y + 2 + 3 < 48)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	3305      	adds	r3, #5
 8001232:	2b2f      	cmp	r3, #47	; 0x2f
 8001234:	d804      	bhi.n	8001240 <move_jogador0+0x26>
		jogador->y = jogador->y + 2;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	1c9a      	adds	r2, r3, #2
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	605a      	str	r2, [r3, #4]
	}

	if(adc <= 800){
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001246:	d809      	bhi.n	800125c <move_jogador0+0x42>
		if (jogador->y - 2 > 2)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	3b02      	subs	r3, #2
 800124e:	2b02      	cmp	r3, #2
 8001250:	d904      	bls.n	800125c <move_jogador0+0x42>
		jogador->y = jogador->y - 2;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	1e9a      	subs	r2, r3, #2
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	605a      	str	r2, [r3, #4]
	}
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <move_jogador1>:

void move_jogador1 (struct jogador_t *jogador, struct bola_t *ball){
 8001266:	b480      	push	{r7}
 8001268:	b087      	sub	sp, #28
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	6039      	str	r1, [r7, #0]
	__uint32_t center = (jogador+1)->y;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3310      	adds	r3, #16
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	617b      	str	r3, [r7, #20]
	__uint32_t screen_center = 24;
 8001278:	2318      	movs	r3, #24
 800127a:	613b      	str	r3, [r7, #16]
	int ball_speed = ball->dy;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	60fb      	str	r3, [r7, #12]

	if (ball_speed < 0) {
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2b00      	cmp	r3, #0
 8001286:	da02      	bge.n	800128e <move_jogador1+0x28>

		ball_speed = -ball_speed;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	425b      	negs	r3, r3
 800128c:	60fb      	str	r3, [r7, #12]

	//ball moving left
	else {

		//ball moving down
		if (ball->dy > 0) {
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d01f      	beq.n	80012d6 <move_jogador1+0x70>

			if (ball->y > center) {
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	429a      	cmp	r2, r3
 800129e:	d20d      	bcs.n	80012bc <move_jogador1+0x56>
				if((jogador+1)->y + 2 < 45)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3310      	adds	r3, #16
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	3302      	adds	r3, #2
 80012a8:	2b2c      	cmp	r3, #44	; 0x2c
 80012aa:	d814      	bhi.n	80012d6 <move_jogador1+0x70>
				(jogador+1)->y += 2;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3310      	adds	r3, #16
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3310      	adds	r3, #16
 80012b6:	3202      	adds	r2, #2
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	e00c      	b.n	80012d6 <move_jogador1+0x70>

			} else {
				if ((jogador+1)->y - 2 > 2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3310      	adds	r3, #16
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	3b02      	subs	r3, #2
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d906      	bls.n	80012d6 <move_jogador1+0x70>
				(jogador+1)->y -= 2;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3310      	adds	r3, #16
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3310      	adds	r3, #16
 80012d2:	3a02      	subs	r2, #2
 80012d4:	605a      	str	r2, [r3, #4]
				(jogador+1)->y += 2;
			}
		}

		//ball moving stright across
		if (ball->dy == 0) {
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d121      	bne.n	8001322 <move_jogador1+0xbc>

			if (ball->y < center)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d90b      	bls.n	8001300 <move_jogador1+0x9a>
				if ((jogador+1)->y > 2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3310      	adds	r3, #16
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d906      	bls.n	8001300 <move_jogador1+0x9a>
					(jogador+1)->y -= 1;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3310      	adds	r3, #16
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3310      	adds	r3, #16
 80012fc:	3a01      	subs	r2, #1
 80012fe:	605a      	str	r2, [r3, #4]

			if (ball->y > center)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	429a      	cmp	r2, r3
 8001308:	d20b      	bcs.n	8001322 <move_jogador1+0xbc>
				if((jogador+1)->y < 45)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3310      	adds	r3, #16
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b2c      	cmp	r3, #44	; 0x2c
 8001312:	d806      	bhi.n	8001322 <move_jogador1+0xbc>
					(jogador+1)->y += 1;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3310      	adds	r3, #16
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3310      	adds	r3, #16
 800131e:	3201      	adds	r2, #1
 8001320:	605a      	str	r2, [r3, #4]
			}
		}
}
 8001322:	bf00      	nop
 8001324:	371c      	adds	r7, #28
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <HAL_MspInit+0x5c>)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	4a14      	ldr	r2, [pc, #80]	; (8001388 <HAL_MspInit+0x5c>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6193      	str	r3, [r2, #24]
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_MspInit+0x5c>)
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <HAL_MspInit+0x5c>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <HAL_MspInit+0x5c>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	61d3      	str	r3, [r2, #28]
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <HAL_MspInit+0x5c>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_MspInit+0x60>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	4a04      	ldr	r2, [pc, #16]	; (800138c <HAL_MspInit+0x60>)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	40021000 	.word	0x40021000
 800138c:	40010000 	.word	0x40010000

08001390 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a28      	ldr	r2, [pc, #160]	; (800144c <HAL_ADC_MspInit+0xbc>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d149      	bne.n	8001444 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013b0:	4b27      	ldr	r3, [pc, #156]	; (8001450 <HAL_ADC_MspInit+0xc0>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a26      	ldr	r2, [pc, #152]	; (8001450 <HAL_ADC_MspInit+0xc0>)
 80013b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <HAL_ADC_MspInit+0xc0>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <HAL_ADC_MspInit+0xc0>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a20      	ldr	r2, [pc, #128]	; (8001450 <HAL_ADC_MspInit+0xc0>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <HAL_ADC_MspInit+0xc0>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013e0:	2304      	movs	r3, #4
 80013e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e4:	2303      	movs	r3, #3
 80013e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	4619      	mov	r1, r3
 80013ee:	4819      	ldr	r0, [pc, #100]	; (8001454 <HAL_ADC_MspInit+0xc4>)
 80013f0:	f000 fffc 	bl	80023ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_ADC_MspInit+0xc8>)
 80013f6:	4a19      	ldr	r2, [pc, #100]	; (800145c <HAL_ADC_MspInit+0xcc>)
 80013f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <HAL_ADC_MspInit+0xc8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_ADC_MspInit+0xc8>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <HAL_ADC_MspInit+0xc8>)
 8001408:	2280      	movs	r2, #128	; 0x80
 800140a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_ADC_MspInit+0xc8>)
 800140e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001412:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001414:	4b10      	ldr	r3, [pc, #64]	; (8001458 <HAL_ADC_MspInit+0xc8>)
 8001416:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800141a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <HAL_ADC_MspInit+0xc8>)
 800141e:	2220      	movs	r2, #32
 8001420:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <HAL_ADC_MspInit+0xc8>)
 8001424:	2200      	movs	r2, #0
 8001426:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001428:	480b      	ldr	r0, [pc, #44]	; (8001458 <HAL_ADC_MspInit+0xc8>)
 800142a:	f000 fdf1 	bl	8002010 <HAL_DMA_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001434:	f7ff fce2 	bl	8000dfc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_ADC_MspInit+0xc8>)
 800143c:	621a      	str	r2, [r3, #32]
 800143e:	4a06      	ldr	r2, [pc, #24]	; (8001458 <HAL_ADC_MspInit+0xc8>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001444:	bf00      	nop
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40012400 	.word	0x40012400
 8001450:	40021000 	.word	0x40021000
 8001454:	40010800 	.word	0x40010800
 8001458:	200015fc 	.word	0x200015fc
 800145c:	40020008 	.word	0x40020008

08001460 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08c      	sub	sp, #48	; 0x30
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001470:	2200      	movs	r2, #0
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	201e      	movs	r0, #30
 8001476:	f000 fda0 	bl	8001fba <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800147a:	201e      	movs	r0, #30
 800147c:	f000 fdb9 	bl	8001ff2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001480:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <HAL_InitTick+0xa0>)
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	4a1e      	ldr	r2, [pc, #120]	; (8001500 <HAL_InitTick+0xa0>)
 8001486:	f043 0304 	orr.w	r3, r3, #4
 800148a:	61d3      	str	r3, [r2, #28]
 800148c:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <HAL_InitTick+0xa0>)
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001498:	f107 0210 	add.w	r2, r7, #16
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4611      	mov	r1, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f002 fbf6 	bl	8003c94 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80014a8:	f002 fbe0 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 80014ac:	4603      	mov	r3, r0
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80014b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b4:	4a13      	ldr	r2, [pc, #76]	; (8001504 <HAL_InitTick+0xa4>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	0c9b      	lsrs	r3, r3, #18
 80014bc:	3b01      	subs	r3, #1
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_InitTick+0xa8>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <HAL_InitTick+0xac>)
 80014c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_InitTick+0xa8>)
 80014c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014cc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80014ce:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <HAL_InitTick+0xa8>)
 80014d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_InitTick+0xa8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_InitTick+0xa8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80014e0:	4809      	ldr	r0, [pc, #36]	; (8001508 <HAL_InitTick+0xa8>)
 80014e2:	f002 fcdb 	bl	8003e9c <HAL_TIM_Base_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d104      	bne.n	80014f6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80014ec:	4806      	ldr	r0, [pc, #24]	; (8001508 <HAL_InitTick+0xa8>)
 80014ee:	f002 fd09 	bl	8003f04 <HAL_TIM_Base_Start_IT>
 80014f2:	4603      	mov	r3, r0
 80014f4:	e000      	b.n	80014f8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3730      	adds	r7, #48	; 0x30
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40021000 	.word	0x40021000
 8001504:	431bde83 	.word	0x431bde83
 8001508:	20001640 	.word	0x20001640
 800150c:	40000800 	.word	0x40000800

08001510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <HardFault_Handler+0x4>

08001522 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <MemManage_Handler+0x4>

08001528 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <BusFault_Handler+0x4>

0800152e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <UsageFault_Handler+0x4>

08001534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <DMA1_Channel1_IRQHandler+0x10>)
 8001546:	f000 fe1d 	bl	8002184 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200015fc 	.word	0x200015fc

08001554 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800155a:	f001 f9d7 	bl	800290c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20002318 	.word	0x20002318

08001568 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <TIM4_IRQHandler+0x10>)
 800156e:	f002 fcec 	bl	8003f4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20001640 	.word	0x20001640

0800157c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001580:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <SystemInit+0x5c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <SystemInit+0x5c>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <SystemInit+0x5c>)
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4911      	ldr	r1, [pc, #68]	; (80015d8 <SystemInit+0x5c>)
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <SystemInit+0x60>)
 8001594:	4013      	ands	r3, r2
 8001596:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <SystemInit+0x5c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <SystemInit+0x5c>)
 800159e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80015a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <SystemInit+0x5c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <SystemInit+0x5c>)
 80015ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <SystemInit+0x5c>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <SystemInit+0x5c>)
 80015ba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80015be:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <SystemInit+0x5c>)
 80015c2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80015c6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <SystemInit+0x64>)
 80015ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ce:	609a      	str	r2, [r3, #8]
#endif 
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	40021000 	.word	0x40021000
 80015dc:	f8ff0000 	.word	0xf8ff0000
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015e6:	e003      	b.n	80015f0 <LoopCopyDataInit>

080015e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015ee:	3104      	adds	r1, #4

080015f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015f0:	480a      	ldr	r0, [pc, #40]	; (800161c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015f8:	d3f6      	bcc.n	80015e8 <CopyDataInit>
  ldr r2, =_sbss
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015fc:	e002      	b.n	8001604 <LoopFillZerobss>

080015fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001600:	f842 3b04 	str.w	r3, [r2], #4

08001604 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001606:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001608:	d3f9      	bcc.n	80015fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800160a:	f7ff ffb7 	bl	800157c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160e:	f007 f8eb 	bl	80087e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001612:	f7ff fa51 	bl	8000ab8 <main>
  bx lr
 8001616:	4770      	bx	lr
  ldr r3, =_sidata
 8001618:	08008f20 	.word	0x08008f20
  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001620:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8001624:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 8001628:	20002584 	.word	0x20002584

0800162c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC1_2_IRQHandler>
	...

08001630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_Init+0x28>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a07      	ldr	r2, [pc, #28]	; (8001658 <HAL_Init+0x28>)
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001640:	2003      	movs	r0, #3
 8001642:	f000 fcaf 	bl	8001fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001646:	2000      	movs	r0, #0
 8001648:	f7ff ff0a 	bl	8001460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800164c:	f7ff fe6e 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40022000 	.word	0x40022000

0800165c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_IncTick+0x1c>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <HAL_IncTick+0x20>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	4a03      	ldr	r2, [pc, #12]	; (800167c <HAL_IncTick+0x20>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	20000008 	.word	0x20000008
 800167c:	20001680 	.word	0x20001680

08001680 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b02      	ldr	r3, [pc, #8]	; (8001690 <HAL_GetTick+0x10>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	20001680 	.word	0x20001680

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff fff0 	bl	8001680 <HAL_GetTick>
 80016a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d005      	beq.n	80016ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_Delay+0x40>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ba:	bf00      	nop
 80016bc:	f7ff ffe0 	bl	8001680 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <HAL_Delay+0x28>
  {
  }
}
 80016cc:	bf00      	nop
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000008 	.word	0x20000008

080016d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e0be      	b.n	8001878 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	2b00      	cmp	r3, #0
 8001706:	d109      	bne.n	800171c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fe3a 	bl	8001390 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 faf7 	bl	8001d10 <ADC_ConversionStop_Disable>
 8001722:	4603      	mov	r3, r0
 8001724:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	2b00      	cmp	r3, #0
 8001730:	f040 8099 	bne.w	8001866 <HAL_ADC_Init+0x18e>
 8001734:	7dfb      	ldrb	r3, [r7, #23]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 8095 	bne.w	8001866 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001740:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001744:	f023 0302 	bic.w	r3, r3, #2
 8001748:	f043 0202 	orr.w	r2, r3, #2
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001758:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7b1b      	ldrb	r3, [r3, #12]
 800175e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001760:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	4313      	orrs	r3, r2
 8001766:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001770:	d003      	beq.n	800177a <HAL_ADC_Init+0xa2>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d102      	bne.n	8001780 <HAL_ADC_Init+0xa8>
 800177a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800177e:	e000      	b.n	8001782 <HAL_ADC_Init+0xaa>
 8001780:	2300      	movs	r3, #0
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7d1b      	ldrb	r3, [r3, #20]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d119      	bne.n	80017c4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7b1b      	ldrb	r3, [r3, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d109      	bne.n	80017ac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	3b01      	subs	r3, #1
 800179e:	035a      	lsls	r2, r3, #13
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	e00b      	b.n	80017c4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	f043 0220 	orr.w	r2, r3, #32
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	f043 0201 	orr.w	r2, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	4b28      	ldr	r3, [pc, #160]	; (8001880 <HAL_ADC_Init+0x1a8>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	68b9      	ldr	r1, [r7, #8]
 80017e8:	430b      	orrs	r3, r1
 80017ea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017f4:	d003      	beq.n	80017fe <HAL_ADC_Init+0x126>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d104      	bne.n	8001808 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	3b01      	subs	r3, #1
 8001804:	051b      	lsls	r3, r3, #20
 8001806:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	430a      	orrs	r2, r1
 800181a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	4b18      	ldr	r3, [pc, #96]	; (8001884 <HAL_ADC_Init+0x1ac>)
 8001824:	4013      	ands	r3, r2
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	429a      	cmp	r2, r3
 800182a:	d10b      	bne.n	8001844 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001836:	f023 0303 	bic.w	r3, r3, #3
 800183a:	f043 0201 	orr.w	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001842:	e018      	b.n	8001876 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	f023 0312 	bic.w	r3, r3, #18
 800184c:	f043 0210 	orr.w	r2, r3, #16
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	f043 0201 	orr.w	r2, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001864:	e007      	b.n	8001876 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	f043 0210 	orr.w	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001876:	7dfb      	ldrb	r3, [r7, #23]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	ffe1f7fd 	.word	0xffe1f7fd
 8001884:	ff1f0efe 	.word	0xff1f0efe

08001888 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a64      	ldr	r2, [pc, #400]	; (8001a30 <HAL_ADC_Start_DMA+0x1a8>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d004      	beq.n	80018ac <HAL_ADC_Start_DMA+0x24>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a63      	ldr	r2, [pc, #396]	; (8001a34 <HAL_ADC_Start_DMA+0x1ac>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d106      	bne.n	80018ba <HAL_ADC_Start_DMA+0x32>
 80018ac:	4b60      	ldr	r3, [pc, #384]	; (8001a30 <HAL_ADC_Start_DMA+0x1a8>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f040 80b3 	bne.w	8001a20 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_ADC_Start_DMA+0x40>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e0ae      	b.n	8001a26 <HAL_ADC_Start_DMA+0x19e>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 f9cb 	bl	8001c6c <ADC_Enable>
 80018d6:	4603      	mov	r3, r0
 80018d8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018da:	7dfb      	ldrb	r3, [r7, #23]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f040 809a 	bne.w	8001a16 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018ea:	f023 0301 	bic.w	r3, r3, #1
 80018ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a4e      	ldr	r2, [pc, #312]	; (8001a34 <HAL_ADC_Start_DMA+0x1ac>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d105      	bne.n	800190c <HAL_ADC_Start_DMA+0x84>
 8001900:	4b4b      	ldr	r3, [pc, #300]	; (8001a30 <HAL_ADC_Start_DMA+0x1a8>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d115      	bne.n	8001938 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001922:	2b00      	cmp	r3, #0
 8001924:	d026      	beq.n	8001974 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800192e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001936:	e01d      	b.n	8001974 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a39      	ldr	r2, [pc, #228]	; (8001a30 <HAL_ADC_Start_DMA+0x1a8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d004      	beq.n	8001958 <HAL_ADC_Start_DMA+0xd0>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a38      	ldr	r2, [pc, #224]	; (8001a34 <HAL_ADC_Start_DMA+0x1ac>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d10d      	bne.n	8001974 <HAL_ADC_Start_DMA+0xec>
 8001958:	4b35      	ldr	r3, [pc, #212]	; (8001a30 <HAL_ADC_Start_DMA+0x1a8>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001960:	2b00      	cmp	r3, #0
 8001962:	d007      	beq.n	8001974 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800196c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d006      	beq.n	800198e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	f023 0206 	bic.w	r2, r3, #6
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
 800198c:	e002      	b.n	8001994 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	4a25      	ldr	r2, [pc, #148]	; (8001a38 <HAL_ADC_Start_DMA+0x1b0>)
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4a24      	ldr	r2, [pc, #144]	; (8001a3c <HAL_ADC_Start_DMA+0x1b4>)
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4a23      	ldr	r2, [pc, #140]	; (8001a40 <HAL_ADC_Start_DMA+0x1b8>)
 80019b2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f06f 0202 	mvn.w	r2, #2
 80019bc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019cc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6a18      	ldr	r0, [r3, #32]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	334c      	adds	r3, #76	; 0x4c
 80019d8:	4619      	mov	r1, r3
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f000 fb71 	bl	80020c4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80019ec:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019f0:	d108      	bne.n	8001a04 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a00:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a02:	e00f      	b.n	8001a24 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a12:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a14:	e006      	b.n	8001a24 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001a1e:	e001      	b.n	8001a24 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40012400 	.word	0x40012400
 8001a34:	40012800 	.word	0x40012800
 8001a38:	08001d85 	.word	0x08001d85
 8001a3c:	08001e01 	.word	0x08001e01
 8001a40:	08001e1d 	.word	0x08001e1d

08001a44 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
	...

08001a7c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x20>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e0dc      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1da>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b06      	cmp	r3, #6
 8001aaa:	d81c      	bhi.n	8001ae6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	3b05      	subs	r3, #5
 8001abe:	221f      	movs	r2, #31
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	4019      	ands	r1, r3
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3b05      	subs	r3, #5
 8001ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ae4:	e03c      	b.n	8001b60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b0c      	cmp	r3, #12
 8001aec:	d81c      	bhi.n	8001b28 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	3b23      	subs	r3, #35	; 0x23
 8001b00:	221f      	movs	r2, #31
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	4019      	ands	r1, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	6818      	ldr	r0, [r3, #0]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	3b23      	subs	r3, #35	; 0x23
 8001b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	631a      	str	r2, [r3, #48]	; 0x30
 8001b26:	e01b      	b.n	8001b60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	3b41      	subs	r3, #65	; 0x41
 8001b3a:	221f      	movs	r2, #31
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	4019      	ands	r1, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	3b41      	subs	r3, #65	; 0x41
 8001b54:	fa00 f203 	lsl.w	r2, r0, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b09      	cmp	r3, #9
 8001b66:	d91c      	bls.n	8001ba2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68d9      	ldr	r1, [r3, #12]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	3b1e      	subs	r3, #30
 8001b7a:	2207      	movs	r2, #7
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	4019      	ands	r1, r3
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	6898      	ldr	r0, [r3, #8]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	3b1e      	subs	r3, #30
 8001b94:	fa00 f203 	lsl.w	r2, r0, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	60da      	str	r2, [r3, #12]
 8001ba0:	e019      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6919      	ldr	r1, [r3, #16]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	4019      	ands	r1, r3
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	6898      	ldr	r0, [r3, #8]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	fa00 f203 	lsl.w	r2, r0, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b10      	cmp	r3, #16
 8001bdc:	d003      	beq.n	8001be6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001be2:	2b11      	cmp	r3, #17
 8001be4:	d132      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a1d      	ldr	r2, [pc, #116]	; (8001c60 <HAL_ADC_ConfigChannel+0x1e4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d125      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d126      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c0c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b10      	cmp	r3, #16
 8001c14:	d11a      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c16:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a13      	ldr	r2, [pc, #76]	; (8001c68 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c20:	0c9a      	lsrs	r2, r3, #18
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c2c:	e002      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f9      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x1b2>
 8001c3a:	e007      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	f043 0220 	orr.w	r2, r3, #32
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	40012400 	.word	0x40012400
 8001c64:	20000000 	.word	0x20000000
 8001c68:	431bde83 	.word	0x431bde83

08001c6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d039      	beq.n	8001cfe <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0201 	orr.w	r2, r2, #1
 8001c98:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <ADC_Enable+0x9c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1b      	ldr	r2, [pc, #108]	; (8001d0c <ADC_Enable+0xa0>)
 8001ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca4:	0c9b      	lsrs	r3, r3, #18
 8001ca6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ca8:	e002      	b.n	8001cb0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f9      	bne.n	8001caa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cb6:	f7ff fce3 	bl	8001680 <HAL_GetTick>
 8001cba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cbc:	e018      	b.n	8001cf0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cbe:	f7ff fcdf 	bl	8001680 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d911      	bls.n	8001cf0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	f043 0210 	orr.w	r2, r3, #16
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	f043 0201 	orr.w	r2, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e007      	b.n	8001d00 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d1df      	bne.n	8001cbe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	431bde83 	.word	0x431bde83

08001d10 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d127      	bne.n	8001d7a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0201 	bic.w	r2, r2, #1
 8001d38:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d3a:	f7ff fca1 	bl	8001680 <HAL_GetTick>
 8001d3e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d40:	e014      	b.n	8001d6c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d42:	f7ff fc9d 	bl	8001680 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d90d      	bls.n	8001d6c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	f043 0210 	orr.w	r2, r3, #16
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d60:	f043 0201 	orr.w	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e007      	b.n	8001d7c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d0e3      	beq.n	8001d42 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d127      	bne.n	8001dee <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001db4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001db8:	d115      	bne.n	8001de6 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d111      	bne.n	8001de6 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d105      	bne.n	8001de6 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dde:	f043 0201 	orr.w	r2, r3, #1
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f7ff fe2c 	bl	8001a44 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001dec:	e004      	b.n	8001df8 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	4798      	blx	r3
}
 8001df8:	bf00      	nop
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f7ff fe21 	bl	8001a56 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e14:	bf00      	nop
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3a:	f043 0204 	orr.w	r2, r3, #4
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f7ff fe10 	bl	8001a68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <__NVIC_SetPriorityGrouping+0x44>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e82:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <__NVIC_SetPriorityGrouping+0x44>)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	60d3      	str	r3, [r2, #12]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	0a1b      	lsrs	r3, r3, #8
 8001ea2:	f003 0307 	and.w	r3, r3, #7
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	db0b      	blt.n	8001ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	f003 021f 	and.w	r2, r3, #31
 8001ecc:	4906      	ldr	r1, [pc, #24]	; (8001ee8 <__NVIC_EnableIRQ+0x34>)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	e000e100 	.word	0xe000e100

08001eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	db0a      	blt.n	8001f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	490c      	ldr	r1, [pc, #48]	; (8001f38 <__NVIC_SetPriority+0x4c>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f14:	e00a      	b.n	8001f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4908      	ldr	r1, [pc, #32]	; (8001f3c <__NVIC_SetPriority+0x50>)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3b04      	subs	r3, #4
 8001f24:	0112      	lsls	r2, r2, #4
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	440b      	add	r3, r1
 8001f2a:	761a      	strb	r2, [r3, #24]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000e100 	.word	0xe000e100
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	; 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f1c3 0307 	rsb	r3, r3, #7
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	bf28      	it	cs
 8001f5e:	2304      	movcs	r3, #4
 8001f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3304      	adds	r3, #4
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d902      	bls.n	8001f70 <NVIC_EncodePriority+0x30>
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3b03      	subs	r3, #3
 8001f6e:	e000      	b.n	8001f72 <NVIC_EncodePriority+0x32>
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	401a      	ands	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	43d9      	mvns	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	4313      	orrs	r3, r2
         );
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3724      	adds	r7, #36	; 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ff4f 	bl	8001e50 <__NVIC_SetPriorityGrouping>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fcc:	f7ff ff64 	bl	8001e98 <__NVIC_GetPriorityGrouping>
 8001fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	6978      	ldr	r0, [r7, #20]
 8001fd8:	f7ff ffb2 	bl	8001f40 <NVIC_EncodePriority>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff81 	bl	8001eec <__NVIC_SetPriority>
}
 8001fea:	bf00      	nop
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff57 	bl	8001eb4 <__NVIC_EnableIRQ>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e043      	b.n	80020ae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <HAL_DMA_Init+0xa8>)
 800202e:	4413      	add	r3, r2
 8002030:	4a22      	ldr	r2, [pc, #136]	; (80020bc <HAL_DMA_Init+0xac>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	009a      	lsls	r2, r3, #2
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a1f      	ldr	r2, [pc, #124]	; (80020c0 <HAL_DMA_Init+0xb0>)
 8002042:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800205a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800205e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002068:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002074:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002080:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	bffdfff8 	.word	0xbffdfff8
 80020bc:	cccccccd 	.word	0xcccccccd
 80020c0:	40020000 	.word	0x40020000

080020c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_DMA_Start_IT+0x20>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e04a      	b.n	800217a <HAL_DMA_Start_IT+0xb6>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d13a      	bne.n	800216c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2202      	movs	r2, #2
 80020fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f938 	bl	8002390 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 020e 	orr.w	r2, r2, #14
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	e00f      	b.n	800215a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0204 	bic.w	r2, r2, #4
 8002148:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 020a 	orr.w	r2, r2, #10
 8002158:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 0201 	orr.w	r2, r2, #1
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e005      	b.n	8002178 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002174:	2302      	movs	r3, #2
 8002176:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002178:	7dfb      	ldrb	r3, [r7, #23]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	2204      	movs	r2, #4
 80021a2:	409a      	lsls	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d04f      	beq.n	800224c <HAL_DMA_IRQHandler+0xc8>
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d04a      	beq.n	800224c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0320 	and.w	r3, r3, #32
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d107      	bne.n	80021d4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0204 	bic.w	r2, r2, #4
 80021d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a66      	ldr	r2, [pc, #408]	; (8002374 <HAL_DMA_IRQHandler+0x1f0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d029      	beq.n	8002232 <HAL_DMA_IRQHandler+0xae>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a65      	ldr	r2, [pc, #404]	; (8002378 <HAL_DMA_IRQHandler+0x1f4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d022      	beq.n	800222e <HAL_DMA_IRQHandler+0xaa>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a63      	ldr	r2, [pc, #396]	; (800237c <HAL_DMA_IRQHandler+0x1f8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01a      	beq.n	8002228 <HAL_DMA_IRQHandler+0xa4>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a62      	ldr	r2, [pc, #392]	; (8002380 <HAL_DMA_IRQHandler+0x1fc>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d012      	beq.n	8002222 <HAL_DMA_IRQHandler+0x9e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a60      	ldr	r2, [pc, #384]	; (8002384 <HAL_DMA_IRQHandler+0x200>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00a      	beq.n	800221c <HAL_DMA_IRQHandler+0x98>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a5f      	ldr	r2, [pc, #380]	; (8002388 <HAL_DMA_IRQHandler+0x204>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d102      	bne.n	8002216 <HAL_DMA_IRQHandler+0x92>
 8002210:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002214:	e00e      	b.n	8002234 <HAL_DMA_IRQHandler+0xb0>
 8002216:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800221a:	e00b      	b.n	8002234 <HAL_DMA_IRQHandler+0xb0>
 800221c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002220:	e008      	b.n	8002234 <HAL_DMA_IRQHandler+0xb0>
 8002222:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002226:	e005      	b.n	8002234 <HAL_DMA_IRQHandler+0xb0>
 8002228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800222c:	e002      	b.n	8002234 <HAL_DMA_IRQHandler+0xb0>
 800222e:	2340      	movs	r3, #64	; 0x40
 8002230:	e000      	b.n	8002234 <HAL_DMA_IRQHandler+0xb0>
 8002232:	2304      	movs	r3, #4
 8002234:	4a55      	ldr	r2, [pc, #340]	; (800238c <HAL_DMA_IRQHandler+0x208>)
 8002236:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 8094 	beq.w	800236a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800224a:	e08e      	b.n	800236a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	2202      	movs	r2, #2
 8002252:	409a      	lsls	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d056      	beq.n	800230a <HAL_DMA_IRQHandler+0x186>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d051      	beq.n	800230a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0320 	and.w	r3, r3, #32
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10b      	bne.n	800228c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 020a 	bic.w	r2, r2, #10
 8002282:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a38      	ldr	r2, [pc, #224]	; (8002374 <HAL_DMA_IRQHandler+0x1f0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d029      	beq.n	80022ea <HAL_DMA_IRQHandler+0x166>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a37      	ldr	r2, [pc, #220]	; (8002378 <HAL_DMA_IRQHandler+0x1f4>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d022      	beq.n	80022e6 <HAL_DMA_IRQHandler+0x162>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a35      	ldr	r2, [pc, #212]	; (800237c <HAL_DMA_IRQHandler+0x1f8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d01a      	beq.n	80022e0 <HAL_DMA_IRQHandler+0x15c>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a34      	ldr	r2, [pc, #208]	; (8002380 <HAL_DMA_IRQHandler+0x1fc>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d012      	beq.n	80022da <HAL_DMA_IRQHandler+0x156>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a32      	ldr	r2, [pc, #200]	; (8002384 <HAL_DMA_IRQHandler+0x200>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00a      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x150>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a31      	ldr	r2, [pc, #196]	; (8002388 <HAL_DMA_IRQHandler+0x204>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d102      	bne.n	80022ce <HAL_DMA_IRQHandler+0x14a>
 80022c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022cc:	e00e      	b.n	80022ec <HAL_DMA_IRQHandler+0x168>
 80022ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022d2:	e00b      	b.n	80022ec <HAL_DMA_IRQHandler+0x168>
 80022d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d8:	e008      	b.n	80022ec <HAL_DMA_IRQHandler+0x168>
 80022da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022de:	e005      	b.n	80022ec <HAL_DMA_IRQHandler+0x168>
 80022e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022e4:	e002      	b.n	80022ec <HAL_DMA_IRQHandler+0x168>
 80022e6:	2320      	movs	r3, #32
 80022e8:	e000      	b.n	80022ec <HAL_DMA_IRQHandler+0x168>
 80022ea:	2302      	movs	r3, #2
 80022ec:	4a27      	ldr	r2, [pc, #156]	; (800238c <HAL_DMA_IRQHandler+0x208>)
 80022ee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d034      	beq.n	800236a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002308:	e02f      	b.n	800236a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	2208      	movs	r2, #8
 8002310:	409a      	lsls	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4013      	ands	r3, r2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d028      	beq.n	800236c <HAL_DMA_IRQHandler+0x1e8>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d023      	beq.n	800236c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 020e 	bic.w	r2, r2, #14
 8002332:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233c:	2101      	movs	r1, #1
 800233e:	fa01 f202 	lsl.w	r2, r1, r2
 8002342:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	4798      	blx	r3
    }
  }
  return;
 800236a:	bf00      	nop
 800236c:	bf00      	nop
}
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40020008 	.word	0x40020008
 8002378:	4002001c 	.word	0x4002001c
 800237c:	40020030 	.word	0x40020030
 8002380:	40020044 	.word	0x40020044
 8002384:	40020058 	.word	0x40020058
 8002388:	4002006c 	.word	0x4002006c
 800238c:	40020000 	.word	0x40020000

08002390 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a6:	2101      	movs	r1, #1
 80023a8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b10      	cmp	r3, #16
 80023bc:	d108      	bne.n	80023d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023ce:	e007      	b.n	80023e0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	60da      	str	r2, [r3, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
	...

080023ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b08b      	sub	sp, #44	; 0x2c
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023f6:	2300      	movs	r3, #0
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023fa:	2300      	movs	r3, #0
 80023fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023fe:	e127      	b.n	8002650 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002400:	2201      	movs	r2, #1
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	429a      	cmp	r2, r3
 800241a:	f040 8116 	bne.w	800264a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b12      	cmp	r3, #18
 8002424:	d034      	beq.n	8002490 <HAL_GPIO_Init+0xa4>
 8002426:	2b12      	cmp	r3, #18
 8002428:	d80d      	bhi.n	8002446 <HAL_GPIO_Init+0x5a>
 800242a:	2b02      	cmp	r3, #2
 800242c:	d02b      	beq.n	8002486 <HAL_GPIO_Init+0x9a>
 800242e:	2b02      	cmp	r3, #2
 8002430:	d804      	bhi.n	800243c <HAL_GPIO_Init+0x50>
 8002432:	2b00      	cmp	r3, #0
 8002434:	d031      	beq.n	800249a <HAL_GPIO_Init+0xae>
 8002436:	2b01      	cmp	r3, #1
 8002438:	d01c      	beq.n	8002474 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800243a:	e048      	b.n	80024ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800243c:	2b03      	cmp	r3, #3
 800243e:	d043      	beq.n	80024c8 <HAL_GPIO_Init+0xdc>
 8002440:	2b11      	cmp	r3, #17
 8002442:	d01b      	beq.n	800247c <HAL_GPIO_Init+0x90>
          break;
 8002444:	e043      	b.n	80024ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002446:	4a89      	ldr	r2, [pc, #548]	; (800266c <HAL_GPIO_Init+0x280>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d026      	beq.n	800249a <HAL_GPIO_Init+0xae>
 800244c:	4a87      	ldr	r2, [pc, #540]	; (800266c <HAL_GPIO_Init+0x280>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d806      	bhi.n	8002460 <HAL_GPIO_Init+0x74>
 8002452:	4a87      	ldr	r2, [pc, #540]	; (8002670 <HAL_GPIO_Init+0x284>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d020      	beq.n	800249a <HAL_GPIO_Init+0xae>
 8002458:	4a86      	ldr	r2, [pc, #536]	; (8002674 <HAL_GPIO_Init+0x288>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d01d      	beq.n	800249a <HAL_GPIO_Init+0xae>
          break;
 800245e:	e036      	b.n	80024ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002460:	4a85      	ldr	r2, [pc, #532]	; (8002678 <HAL_GPIO_Init+0x28c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d019      	beq.n	800249a <HAL_GPIO_Init+0xae>
 8002466:	4a85      	ldr	r2, [pc, #532]	; (800267c <HAL_GPIO_Init+0x290>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d016      	beq.n	800249a <HAL_GPIO_Init+0xae>
 800246c:	4a84      	ldr	r2, [pc, #528]	; (8002680 <HAL_GPIO_Init+0x294>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_GPIO_Init+0xae>
          break;
 8002472:	e02c      	b.n	80024ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	623b      	str	r3, [r7, #32]
          break;
 800247a:	e028      	b.n	80024ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	3304      	adds	r3, #4
 8002482:	623b      	str	r3, [r7, #32]
          break;
 8002484:	e023      	b.n	80024ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	3308      	adds	r3, #8
 800248c:	623b      	str	r3, [r7, #32]
          break;
 800248e:	e01e      	b.n	80024ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	330c      	adds	r3, #12
 8002496:	623b      	str	r3, [r7, #32]
          break;
 8002498:	e019      	b.n	80024ce <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d102      	bne.n	80024a8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024a2:	2304      	movs	r3, #4
 80024a4:	623b      	str	r3, [r7, #32]
          break;
 80024a6:	e012      	b.n	80024ce <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d105      	bne.n	80024bc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b0:	2308      	movs	r3, #8
 80024b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69fa      	ldr	r2, [r7, #28]
 80024b8:	611a      	str	r2, [r3, #16]
          break;
 80024ba:	e008      	b.n	80024ce <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024bc:	2308      	movs	r3, #8
 80024be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	615a      	str	r2, [r3, #20]
          break;
 80024c6:	e002      	b.n	80024ce <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024c8:	2300      	movs	r3, #0
 80024ca:	623b      	str	r3, [r7, #32]
          break;
 80024cc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2bff      	cmp	r3, #255	; 0xff
 80024d2:	d801      	bhi.n	80024d8 <HAL_GPIO_Init+0xec>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	e001      	b.n	80024dc <HAL_GPIO_Init+0xf0>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3304      	adds	r3, #4
 80024dc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	2bff      	cmp	r3, #255	; 0xff
 80024e2:	d802      	bhi.n	80024ea <HAL_GPIO_Init+0xfe>
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	e002      	b.n	80024f0 <HAL_GPIO_Init+0x104>
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	3b08      	subs	r3, #8
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	210f      	movs	r1, #15
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	401a      	ands	r2, r3
 8002502:	6a39      	ldr	r1, [r7, #32]
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	fa01 f303 	lsl.w	r3, r1, r3
 800250a:	431a      	orrs	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 8096 	beq.w	800264a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800251e:	4b59      	ldr	r3, [pc, #356]	; (8002684 <HAL_GPIO_Init+0x298>)
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	4a58      	ldr	r2, [pc, #352]	; (8002684 <HAL_GPIO_Init+0x298>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6193      	str	r3, [r2, #24]
 800252a:	4b56      	ldr	r3, [pc, #344]	; (8002684 <HAL_GPIO_Init+0x298>)
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002536:	4a54      	ldr	r2, [pc, #336]	; (8002688 <HAL_GPIO_Init+0x29c>)
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	089b      	lsrs	r3, r3, #2
 800253c:	3302      	adds	r3, #2
 800253e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002542:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	220f      	movs	r2, #15
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4013      	ands	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4b      	ldr	r2, [pc, #300]	; (800268c <HAL_GPIO_Init+0x2a0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d013      	beq.n	800258a <HAL_GPIO_Init+0x19e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4a      	ldr	r2, [pc, #296]	; (8002690 <HAL_GPIO_Init+0x2a4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00d      	beq.n	8002586 <HAL_GPIO_Init+0x19a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a49      	ldr	r2, [pc, #292]	; (8002694 <HAL_GPIO_Init+0x2a8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d007      	beq.n	8002582 <HAL_GPIO_Init+0x196>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a48      	ldr	r2, [pc, #288]	; (8002698 <HAL_GPIO_Init+0x2ac>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d101      	bne.n	800257e <HAL_GPIO_Init+0x192>
 800257a:	2303      	movs	r3, #3
 800257c:	e006      	b.n	800258c <HAL_GPIO_Init+0x1a0>
 800257e:	2304      	movs	r3, #4
 8002580:	e004      	b.n	800258c <HAL_GPIO_Init+0x1a0>
 8002582:	2302      	movs	r3, #2
 8002584:	e002      	b.n	800258c <HAL_GPIO_Init+0x1a0>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_GPIO_Init+0x1a0>
 800258a:	2300      	movs	r3, #0
 800258c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258e:	f002 0203 	and.w	r2, r2, #3
 8002592:	0092      	lsls	r2, r2, #2
 8002594:	4093      	lsls	r3, r2
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	4313      	orrs	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800259c:	493a      	ldr	r1, [pc, #232]	; (8002688 <HAL_GPIO_Init+0x29c>)
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	089b      	lsrs	r3, r3, #2
 80025a2:	3302      	adds	r3, #2
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d006      	beq.n	80025c4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025b6:	4b39      	ldr	r3, [pc, #228]	; (800269c <HAL_GPIO_Init+0x2b0>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4938      	ldr	r1, [pc, #224]	; (800269c <HAL_GPIO_Init+0x2b0>)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]
 80025c2:	e006      	b.n	80025d2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025c4:	4b35      	ldr	r3, [pc, #212]	; (800269c <HAL_GPIO_Init+0x2b0>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	4933      	ldr	r1, [pc, #204]	; (800269c <HAL_GPIO_Init+0x2b0>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d006      	beq.n	80025ec <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025de:	4b2f      	ldr	r3, [pc, #188]	; (800269c <HAL_GPIO_Init+0x2b0>)
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	492e      	ldr	r1, [pc, #184]	; (800269c <HAL_GPIO_Init+0x2b0>)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]
 80025ea:	e006      	b.n	80025fa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025ec:	4b2b      	ldr	r3, [pc, #172]	; (800269c <HAL_GPIO_Init+0x2b0>)
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	4929      	ldr	r1, [pc, #164]	; (800269c <HAL_GPIO_Init+0x2b0>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d006      	beq.n	8002614 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002606:	4b25      	ldr	r3, [pc, #148]	; (800269c <HAL_GPIO_Init+0x2b0>)
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	4924      	ldr	r1, [pc, #144]	; (800269c <HAL_GPIO_Init+0x2b0>)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
 8002612:	e006      	b.n	8002622 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002614:	4b21      	ldr	r3, [pc, #132]	; (800269c <HAL_GPIO_Init+0x2b0>)
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	43db      	mvns	r3, r3
 800261c:	491f      	ldr	r1, [pc, #124]	; (800269c <HAL_GPIO_Init+0x2b0>)
 800261e:	4013      	ands	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d006      	beq.n	800263c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800262e:	4b1b      	ldr	r3, [pc, #108]	; (800269c <HAL_GPIO_Init+0x2b0>)
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	491a      	ldr	r1, [pc, #104]	; (800269c <HAL_GPIO_Init+0x2b0>)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	60cb      	str	r3, [r1, #12]
 800263a:	e006      	b.n	800264a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800263c:	4b17      	ldr	r3, [pc, #92]	; (800269c <HAL_GPIO_Init+0x2b0>)
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	43db      	mvns	r3, r3
 8002644:	4915      	ldr	r1, [pc, #84]	; (800269c <HAL_GPIO_Init+0x2b0>)
 8002646:	4013      	ands	r3, r2
 8002648:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	3301      	adds	r3, #1
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	fa22 f303 	lsr.w	r3, r2, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	f47f aed0 	bne.w	8002400 <HAL_GPIO_Init+0x14>
  }
}
 8002660:	bf00      	nop
 8002662:	372c      	adds	r7, #44	; 0x2c
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	10210000 	.word	0x10210000
 8002670:	10110000 	.word	0x10110000
 8002674:	10120000 	.word	0x10120000
 8002678:	10310000 	.word	0x10310000
 800267c:	10320000 	.word	0x10320000
 8002680:	10220000 	.word	0x10220000
 8002684:	40021000 	.word	0x40021000
 8002688:	40010000 	.word	0x40010000
 800268c:	40010800 	.word	0x40010800
 8002690:	40010c00 	.word	0x40010c00
 8002694:	40011000 	.word	0x40011000
 8002698:	40011400 	.word	0x40011400
 800269c:	40010400 	.word	0x40010400

080026a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	887b      	ldrh	r3, [r7, #2]
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
 80026bc:	e001      	b.n	80026c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr

080026ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	460b      	mov	r3, r1
 80026d8:	807b      	strh	r3, [r7, #2]
 80026da:	4613      	mov	r3, r2
 80026dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026de:	787b      	ldrb	r3, [r7, #1]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026e4:	887a      	ldrh	r2, [r7, #2]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026ea:	e003      	b.n	80026f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026ec:	887b      	ldrh	r3, [r7, #2]
 80026ee:	041a      	lsls	r2, r3, #16
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	611a      	str	r2, [r3, #16]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002700:	b08b      	sub	sp, #44	; 0x2c
 8002702:	af06      	add	r7, sp, #24
 8002704:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0d3      	b.n	80028b8 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d106      	bne.n	800272a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f005 fdc1 	bl	80082ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2203      	movs	r2, #3
 800272e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f001 fdcf 	bl	80042da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	603b      	str	r3, [r7, #0]
 8002742:	687e      	ldr	r6, [r7, #4]
 8002744:	466d      	mov	r5, sp
 8002746:	f106 0410 	add.w	r4, r6, #16
 800274a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800274c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	602b      	str	r3, [r5, #0]
 8002752:	1d33      	adds	r3, r6, #4
 8002754:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002756:	6838      	ldr	r0, [r7, #0]
 8002758:	f001 fd98 	bl	800428c <USB_CoreInit>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d005      	beq.n	800276e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2202      	movs	r2, #2
 8002766:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e0a4      	b.n	80028b8 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f001 fdcc 	bl	8004312 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800277a:	2300      	movs	r3, #0
 800277c:	73fb      	strb	r3, [r7, #15]
 800277e:	e035      	b.n	80027ec <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	015b      	lsls	r3, r3, #5
 8002786:	4413      	add	r3, r2
 8002788:	3329      	adds	r3, #41	; 0x29
 800278a:	2201      	movs	r2, #1
 800278c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	015b      	lsls	r3, r3, #5
 8002794:	4413      	add	r3, r2
 8002796:	3328      	adds	r3, #40	; 0x28
 8002798:	7bfa      	ldrb	r2, [r7, #15]
 800279a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	7bfa      	ldrb	r2, [r7, #15]
 80027a0:	b291      	uxth	r1, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	015b      	lsls	r3, r3, #5
 80027a6:	4413      	add	r3, r2
 80027a8:	3336      	adds	r3, #54	; 0x36
 80027aa:	460a      	mov	r2, r1
 80027ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	015b      	lsls	r3, r3, #5
 80027b4:	4413      	add	r3, r2
 80027b6:	332b      	adds	r3, #43	; 0x2b
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	015b      	lsls	r3, r3, #5
 80027c2:	4413      	add	r3, r2
 80027c4:	3338      	adds	r3, #56	; 0x38
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	015b      	lsls	r3, r3, #5
 80027d0:	4413      	add	r3, r2
 80027d2:	333c      	adds	r3, #60	; 0x3c
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	3302      	adds	r3, #2
 80027de:	015b      	lsls	r3, r3, #5
 80027e0:	4413      	add	r3, r2
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	3301      	adds	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
 80027ec:	7bfa      	ldrb	r2, [r7, #15]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d3c4      	bcc.n	8002780 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]
 80027fa:	e031      	b.n	8002860 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	015b      	lsls	r3, r3, #5
 8002802:	4413      	add	r3, r2
 8002804:	f203 1329 	addw	r3, r3, #297	; 0x129
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	015b      	lsls	r3, r3, #5
 8002812:	4413      	add	r3, r2
 8002814:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002818:	7bfa      	ldrb	r2, [r7, #15]
 800281a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	015b      	lsls	r3, r3, #5
 8002822:	4413      	add	r3, r2
 8002824:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	015b      	lsls	r3, r3, #5
 8002832:	4413      	add	r3, r2
 8002834:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800283c:	7bfb      	ldrb	r3, [r7, #15]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	015b      	lsls	r3, r3, #5
 8002842:	4413      	add	r3, r2
 8002844:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	330a      	adds	r3, #10
 8002852:	015b      	lsls	r3, r3, #5
 8002854:	4413      	add	r3, r2
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	3301      	adds	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
 8002860:	7bfa      	ldrb	r2, [r7, #15]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	429a      	cmp	r2, r3
 8002868:	d3c8      	bcc.n	80027fc <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	687e      	ldr	r6, [r7, #4]
 8002872:	466d      	mov	r5, sp
 8002874:	f106 0410 	add.w	r4, r6, #16
 8002878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800287a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800287c:	6823      	ldr	r3, [r4, #0]
 800287e:	602b      	str	r3, [r5, #0]
 8002880:	1d33      	adds	r3, r6, #4
 8002882:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002884:	6838      	ldr	r0, [r7, #0]
 8002886:	f001 fd50 	bl	800432a <USB_DevInit>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e00d      	b.n	80028b8 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f002 fd8e 	bl	80053d2 <USB_DevDisconnect>

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_PCD_Start+0x16>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e016      	b.n	8002904 <HAL_PCD_Start+0x44>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80028de:	2101      	movs	r1, #1
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f005 ff4a 	bl	800877a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f002 fd67 	bl	80053be <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f001 fcd9 	bl	80042ac <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f002 fd64 	bl	80053e6 <USB_ReadInterrupts>
 800291e:	4603      	mov	r3, r0
 8002920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002928:	d102      	bne.n	8002930 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 faf2 	bl	8002f14 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f002 fd56 	bl	80053e6 <USB_ReadInterrupts>
 800293a:	4603      	mov	r3, r0
 800293c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002944:	d112      	bne.n	800296c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800294e:	b29a      	uxth	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002958:	b292      	uxth	r2, r2
 800295a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f005 fd19 	bl	8008396 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002964:	2100      	movs	r1, #0
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f8de 	bl	8002b28 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f002 fd38 	bl	80053e6 <USB_ReadInterrupts>
 8002976:	4603      	mov	r3, r0
 8002978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002980:	d10b      	bne.n	800299a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800298a:	b29a      	uxth	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002994:	b292      	uxth	r2, r2
 8002996:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f002 fd21 	bl	80053e6 <USB_ReadInterrupts>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ae:	d10b      	bne.n	80029c8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029c2:	b292      	uxth	r2, r2
 80029c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f002 fd0a 	bl	80053e6 <USB_ReadInterrupts>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029dc:	d126      	bne.n	8002a2c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0204 	bic.w	r2, r2, #4
 80029f0:	b292      	uxth	r2, r2
 80029f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0208 	bic.w	r2, r2, #8
 8002a08:	b292      	uxth	r2, r2
 8002a0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f005 fcfa 	bl	8008408 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a26:	b292      	uxth	r2, r2
 8002a28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f002 fcd8 	bl	80053e6 <USB_ReadInterrupts>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a40:	d13d      	bne.n	8002abe <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f042 0208 	orr.w	r2, r2, #8
 8002a54:	b292      	uxth	r2, r2
 8002a56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a6c:	b292      	uxth	r2, r2
 8002a6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0204 	orr.w	r2, r2, #4
 8002a84:	b292      	uxth	r2, r2
 8002a86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f002 fca9 	bl	80053e6 <USB_ReadInterrupts>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a9e:	d10b      	bne.n	8002ab8 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ab2:	b292      	uxth	r2, r2
 8002ab4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f005 fc8b 	bl	80083d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f002 fc8f 	bl	80053e6 <USB_ReadInterrupts>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad2:	d10e      	bne.n	8002af2 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ae6:	b292      	uxth	r2, r2
 8002ae8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f005 fc44 	bl	800837a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f002 fc75 	bl	80053e6 <USB_ReadInterrupts>
 8002afc:	4603      	mov	r3, r0
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b06:	d10b      	bne.n	8002b20 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b1a:	b292      	uxth	r2, r2
 8002b1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002b20:	bf00      	nop
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_PCD_SetAddress+0x1a>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e013      	b.n	8002b6a <HAL_PCD_SetAddress+0x42>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	4611      	mov	r1, r2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f002 fc1c 	bl	8005398 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	4608      	mov	r0, r1
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4603      	mov	r3, r0
 8002b82:	70fb      	strb	r3, [r7, #3]
 8002b84:	460b      	mov	r3, r1
 8002b86:	803b      	strh	r3, [r7, #0]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	da0b      	bge.n	8002bb0 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b98:	78fb      	ldrb	r3, [r7, #3]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	015b      	lsls	r3, r3, #5
 8002ba0:	3328      	adds	r3, #40	; 0x28
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2201      	movs	r2, #1
 8002bac:	705a      	strb	r2, [r3, #1]
 8002bae:	e00b      	b.n	8002bc8 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	015b      	lsls	r3, r3, #5
 8002bb8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002bd4:	883a      	ldrh	r2, [r7, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	78ba      	ldrb	r2, [r7, #2]
 8002bde:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	785b      	ldrb	r3, [r3, #1]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d004      	beq.n	8002bf2 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bf2:	78bb      	ldrb	r3, [r7, #2]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d102      	bne.n	8002bfe <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_PCD_EP_Open+0x9a>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e00e      	b.n	8002c2a <HAL_PCD_EP_Open+0xb8>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68f9      	ldr	r1, [r7, #12]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f001 fbaa 	bl	8004374 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002c28:	7afb      	ldrb	r3, [r7, #11]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	da0b      	bge.n	8002c5e <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	015b      	lsls	r3, r3, #5
 8002c4e:	3328      	adds	r3, #40	; 0x28
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	4413      	add	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	705a      	strb	r2, [r3, #1]
 8002c5c:	e00b      	b.n	8002c76 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	015b      	lsls	r3, r3, #5
 8002c66:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_PCD_EP_Close+0x5e>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e00e      	b.n	8002cae <HAL_PCD_EP_Close+0x7c>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68f9      	ldr	r1, [r7, #12]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f001 fe56 	bl	8004950 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b086      	sub	sp, #24
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc6:	7afb      	ldrb	r3, [r7, #11]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	015b      	lsls	r3, r3, #5
 8002cce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2200      	movs	r2, #0
 8002cee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf0:	7afb      	ldrb	r3, [r7, #11]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cfc:	7afb      	ldrb	r3, [r7, #11]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6979      	ldr	r1, [r7, #20]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f001 ffb5 	bl	8004c7c <USB_EPStartXfer>
 8002d12:	e005      	b.n	8002d20 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6979      	ldr	r1, [r7, #20]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f001 ffae 	bl	8004c7c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	330a      	adds	r3, #10
 8002d40:	015b      	lsls	r3, r3, #5
 8002d42:	4413      	add	r3, r2
 8002d44:	3304      	adds	r3, #4
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b086      	sub	sp, #24
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d62:	7afb      	ldrb	r3, [r7, #11]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	015b      	lsls	r3, r3, #5
 8002d6a:	3328      	adds	r3, #40	; 0x28
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4413      	add	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2200      	movs	r2, #0
 8002d82:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	2201      	movs	r2, #1
 8002d88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d8a:	7afb      	ldrb	r3, [r7, #11]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d96:	7afb      	ldrb	r3, [r7, #11]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d106      	bne.n	8002dae <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6979      	ldr	r1, [r7, #20]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f001 ff68 	bl	8004c7c <USB_EPStartXfer>
 8002dac:	e005      	b.n	8002dba <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6979      	ldr	r1, [r7, #20]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f001 ff61 	bl	8004c7c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	f003 0207 	and.w	r2, r3, #7
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d901      	bls.n	8002de2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e046      	b.n	8002e70 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002de2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	da0b      	bge.n	8002e02 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	015b      	lsls	r3, r3, #5
 8002df2:	3328      	adds	r3, #40	; 0x28
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	4413      	add	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	705a      	strb	r2, [r3, #1]
 8002e00:	e009      	b.n	8002e16 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	015b      	lsls	r3, r3, #5
 8002e06:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_PCD_EP_SetStall+0x72>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e01c      	b.n	8002e70 <HAL_PCD_EP_SetStall+0xac>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68f9      	ldr	r1, [r7, #12]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 f9d1 	bl	80051ec <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d108      	bne.n	8002e66 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4610      	mov	r0, r2
 8002e62:	f002 facf 	bl	8005404 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	f003 020f 	and.w	r2, r3, #15
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d901      	bls.n	8002e96 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e03a      	b.n	8002f0c <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	da0b      	bge.n	8002eb6 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	015b      	lsls	r3, r3, #5
 8002ea6:	3328      	adds	r3, #40	; 0x28
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	4413      	add	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	705a      	strb	r2, [r3, #1]
 8002eb4:	e00b      	b.n	8002ece <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	015b      	lsls	r3, r3, #5
 8002ebe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_PCD_EP_ClrStall+0x76>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e00e      	b.n	8002f0c <HAL_PCD_EP_ClrStall+0x94>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68f9      	ldr	r1, [r7, #12]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f002 f9b7 	bl	8005270 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b089      	sub	sp, #36	; 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f1c:	e282      	b.n	8003424 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f26:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002f28:	8afb      	ldrh	r3, [r7, #22]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002f32:	7d7b      	ldrb	r3, [r7, #21]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f040 8142 	bne.w	80031be <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002f3a:	8afb      	ldrh	r3, [r7, #22]
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d151      	bne.n	8002fe8 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f54:	b29c      	uxth	r4, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3328      	adds	r3, #40	; 0x28
 8002f6a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4413      	add	r3, r2
 8002f80:	3302      	adds	r3, #2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6812      	ldr	r2, [r2, #0]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	441a      	add	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f005 f9cf 	bl	800834c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8234 	beq.w	8003424 <PCD_EP_ISR_Handler+0x510>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f040 822f 	bne.w	8003424 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	b292      	uxth	r2, r2
 8002fda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002fe6:	e21d      	b.n	8003424 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002fee:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002ff8:	8a7b      	ldrh	r3, [r7, #18]
 8002ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d033      	beq.n	800306a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800300a:	b29b      	uxth	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4413      	add	r3, r2
 8003016:	3306      	adds	r3, #6
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6812      	ldr	r2, [r2, #0]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003040:	b29b      	uxth	r3, r3
 8003042:	f002 fa2e 	bl	80054a2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	b29a      	uxth	r2, r3
 800304e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003052:	4013      	ands	r3, r2
 8003054:	b29c      	uxth	r4, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800305e:	b292      	uxth	r2, r2
 8003060:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f005 f948 	bl	80082f8 <HAL_PCD_SetupStageCallback>
 8003068:	e1dc      	b.n	8003424 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800306a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800306e:	2b00      	cmp	r3, #0
 8003070:	f280 81d8 	bge.w	8003424 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	b29a      	uxth	r2, r3
 800307c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003080:	4013      	ands	r3, r2
 8003082:	b29c      	uxth	r4, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800308c:	b292      	uxth	r2, r2
 800308e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003098:	b29b      	uxth	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4413      	add	r3, r2
 80030a4:	3306      	adds	r3, #6
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d019      	beq.n	80030f8 <PCD_EP_ISR_Handler+0x1e4>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d015      	beq.n	80030f8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6959      	ldr	r1, [r3, #20]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80030dc:	b29b      	uxth	r3, r3
 80030de:	f002 f9e0 	bl	80054a2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	695a      	ldr	r2, [r3, #20]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	441a      	add	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80030f0:	2100      	movs	r1, #0
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f005 f912 	bl	800831c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461c      	mov	r4, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003106:	b29b      	uxth	r3, r3
 8003108:	441c      	add	r4, r3
 800310a:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800310e:	461c      	mov	r4, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10e      	bne.n	8003136 <PCD_EP_ISR_Handler+0x222>
 8003118:	8823      	ldrh	r3, [r4, #0]
 800311a:	b29b      	uxth	r3, r3
 800311c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003120:	b29b      	uxth	r3, r3
 8003122:	8023      	strh	r3, [r4, #0]
 8003124:	8823      	ldrh	r3, [r4, #0]
 8003126:	b29b      	uxth	r3, r3
 8003128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800312c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003130:	b29b      	uxth	r3, r3
 8003132:	8023      	strh	r3, [r4, #0]
 8003134:	e02d      	b.n	8003192 <PCD_EP_ISR_Handler+0x27e>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	2b3e      	cmp	r3, #62	; 0x3e
 800313c:	d812      	bhi.n	8003164 <PCD_EP_ISR_Handler+0x250>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	085b      	lsrs	r3, r3, #1
 8003144:	61bb      	str	r3, [r7, #24]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <PCD_EP_ISR_Handler+0x244>
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	3301      	adds	r3, #1
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	b29b      	uxth	r3, r3
 800315c:	029b      	lsls	r3, r3, #10
 800315e:	b29b      	uxth	r3, r3
 8003160:	8023      	strh	r3, [r4, #0]
 8003162:	e016      	b.n	8003192 <PCD_EP_ISR_Handler+0x27e>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	61bb      	str	r3, [r7, #24]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	2b00      	cmp	r3, #0
 8003176:	d102      	bne.n	800317e <PCD_EP_ISR_Handler+0x26a>
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	3b01      	subs	r3, #1
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	b29b      	uxth	r3, r3
 8003182:	029b      	lsls	r3, r3, #10
 8003184:	b29b      	uxth	r3, r3
 8003186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800318a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800318e:	b29b      	uxth	r3, r3
 8003190:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	b29b      	uxth	r3, r3
 800319a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800319e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a2:	b29c      	uxth	r4, r3
 80031a4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80031a8:	b29c      	uxth	r4, r3
 80031aa:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80031ae:	b29c      	uxth	r4, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4ba2      	ldr	r3, [pc, #648]	; (8003440 <PCD_EP_ISR_Handler+0x52c>)
 80031b6:	4323      	orrs	r3, r4
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	8013      	strh	r3, [r2, #0]
 80031bc:	e132      	b.n	8003424 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	7d7b      	ldrb	r3, [r7, #21]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f280 80d1 	bge.w	800337a <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	7d7b      	ldrb	r3, [r7, #21]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031ec:	4013      	ands	r3, r2
 80031ee:	b29c      	uxth	r4, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	461a      	mov	r2, r3
 80031f6:	7d7b      	ldrb	r3, [r7, #21]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003200:	b292      	uxth	r2, r2
 8003202:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003204:	7d7b      	ldrb	r3, [r7, #21]
 8003206:	015b      	lsls	r3, r3, #5
 8003208:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	4413      	add	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	7b1b      	ldrb	r3, [r3, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d121      	bne.n	800325e <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003222:	b29b      	uxth	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	3306      	adds	r3, #6
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	4413      	add	r3, r2
 8003238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003242:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003244:	8bfb      	ldrh	r3, [r7, #30]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d072      	beq.n	8003330 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6959      	ldr	r1, [r3, #20]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	88da      	ldrh	r2, [r3, #6]
 8003256:	8bfb      	ldrh	r3, [r7, #30]
 8003258:	f002 f923 	bl	80054a2 <USB_ReadPMA>
 800325c:	e068      	b.n	8003330 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	b29b      	uxth	r3, r3
 8003270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d021      	beq.n	80032bc <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003280:	b29b      	uxth	r3, r3
 8003282:	461a      	mov	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4413      	add	r3, r2
 800328c:	3302      	adds	r3, #2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	4413      	add	r3, r2
 8003296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032a0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80032a2:	8bfb      	ldrh	r3, [r7, #30]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d02a      	beq.n	80032fe <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6959      	ldr	r1, [r3, #20]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	891a      	ldrh	r2, [r3, #8]
 80032b4:	8bfb      	ldrh	r3, [r7, #30]
 80032b6:	f002 f8f4 	bl	80054a2 <USB_ReadPMA>
 80032ba:	e020      	b.n	80032fe <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	3306      	adds	r3, #6
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032e4:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80032e6:	8bfb      	ldrh	r3, [r7, #30]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6959      	ldr	r1, [r3, #20]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	895a      	ldrh	r2, [r3, #10]
 80032f8:	8bfb      	ldrh	r3, [r7, #30]
 80032fa:	f002 f8d2 	bl	80054a2 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	b29b      	uxth	r3, r3
 8003310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003318:	b29c      	uxth	r4, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	441a      	add	r2, r3
 8003328:	4b46      	ldr	r3, [pc, #280]	; (8003444 <PCD_EP_ISR_Handler+0x530>)
 800332a:	4323      	orrs	r3, r4
 800332c:	b29b      	uxth	r3, r3
 800332e:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	8bfb      	ldrh	r3, [r7, #30]
 8003336:	441a      	add	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	695a      	ldr	r2, [r3, #20]
 8003340:	8bfb      	ldrh	r3, [r7, #30]
 8003342:	441a      	add	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d004      	beq.n	800335a <PCD_EP_ISR_Handler+0x446>
 8003350:	8bfa      	ldrh	r2, [r7, #30]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	429a      	cmp	r2, r3
 8003358:	d206      	bcs.n	8003368 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	4619      	mov	r1, r3
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f004 ffdb 	bl	800831c <HAL_PCD_DataOutStageCallback>
 8003366:	e008      	b.n	800337a <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	7819      	ldrb	r1, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	695a      	ldr	r2, [r3, #20]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff fc9e 	bl	8002cb6 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800337a:	8a7b      	ldrh	r3, [r7, #18]
 800337c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003380:	2b00      	cmp	r3, #0
 8003382:	d04f      	beq.n	8003424 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8003384:	7d7b      	ldrb	r3, [r7, #21]
 8003386:	015b      	lsls	r3, r3, #5
 8003388:	3328      	adds	r3, #40	; 0x28
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	4413      	add	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	7d7b      	ldrb	r3, [r7, #21]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80033a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a8:	b29c      	uxth	r4, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	7d7b      	ldrb	r3, [r7, #21]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	441a      	add	r2, r3
 80033b6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80033ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033be:	b29b      	uxth	r3, r3
 80033c0:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	461a      	mov	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4413      	add	r3, r2
 80033d6:	3302      	adds	r3, #2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	441a      	add	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d106      	bne.n	8003412 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	4619      	mov	r1, r3
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f004 ff9e 	bl	800834c <HAL_PCD_DataInStageCallback>
 8003410:	e008      	b.n	8003424 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	7819      	ldrb	r1, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff fc97 	bl	8002d52 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800342c:	b29b      	uxth	r3, r3
 800342e:	b21b      	sxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	f6ff ad74 	blt.w	8002f1e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3724      	adds	r7, #36	; 0x24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd90      	pop	{r4, r7, pc}
 8003440:	ffff8080 	.word	0xffff8080
 8003444:	ffff80c0 	.word	0xffff80c0

08003448 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	607b      	str	r3, [r7, #4]
 8003452:	460b      	mov	r3, r1
 8003454:	817b      	strh	r3, [r7, #10]
 8003456:	4613      	mov	r3, r2
 8003458:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800345a:	897b      	ldrh	r3, [r7, #10]
 800345c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d008      	beq.n	8003478 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003466:	897b      	ldrh	r3, [r7, #10]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	015b      	lsls	r3, r3, #5
 800346e:	3328      	adds	r3, #40	; 0x28
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4413      	add	r3, r2
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	e006      	b.n	8003486 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003478:	897b      	ldrh	r3, [r7, #10]
 800347a:	015b      	lsls	r3, r3, #5
 800347c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4413      	add	r3, r2
 8003484:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003486:	893b      	ldrh	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d107      	bne.n	800349c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2200      	movs	r2, #0
 8003490:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	b29a      	uxth	r2, r3
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	80da      	strh	r2, [r3, #6]
 800349a:	e00b      	b.n	80034b4 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2201      	movs	r2, #1
 80034a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	0c1b      	lsrs	r3, r3, #16
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e26c      	b.n	80039ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 8087 	beq.w	80035ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034e0:	4b92      	ldr	r3, [pc, #584]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d00c      	beq.n	8003506 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034ec:	4b8f      	ldr	r3, [pc, #572]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 030c 	and.w	r3, r3, #12
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d112      	bne.n	800351e <HAL_RCC_OscConfig+0x5e>
 80034f8:	4b8c      	ldr	r3, [pc, #560]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003504:	d10b      	bne.n	800351e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003506:	4b89      	ldr	r3, [pc, #548]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d06c      	beq.n	80035ec <HAL_RCC_OscConfig+0x12c>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d168      	bne.n	80035ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e246      	b.n	80039ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003526:	d106      	bne.n	8003536 <HAL_RCC_OscConfig+0x76>
 8003528:	4b80      	ldr	r3, [pc, #512]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a7f      	ldr	r2, [pc, #508]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 800352e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	e02e      	b.n	8003594 <HAL_RCC_OscConfig+0xd4>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0x98>
 800353e:	4b7b      	ldr	r3, [pc, #492]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a7a      	ldr	r2, [pc, #488]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 8003544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	4b78      	ldr	r3, [pc, #480]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a77      	ldr	r2, [pc, #476]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 8003550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e01d      	b.n	8003594 <HAL_RCC_OscConfig+0xd4>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0xbc>
 8003562:	4b72      	ldr	r3, [pc, #456]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a71      	ldr	r2, [pc, #452]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 8003568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	4b6f      	ldr	r3, [pc, #444]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a6e      	ldr	r2, [pc, #440]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 8003574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	e00b      	b.n	8003594 <HAL_RCC_OscConfig+0xd4>
 800357c:	4b6b      	ldr	r3, [pc, #428]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a6a      	ldr	r2, [pc, #424]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 8003582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b68      	ldr	r3, [pc, #416]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a67      	ldr	r2, [pc, #412]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 800358e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003592:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d013      	beq.n	80035c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fe f870 	bl	8001680 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a4:	f7fe f86c 	bl	8001680 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e1fa      	b.n	80039ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	4b5d      	ldr	r3, [pc, #372]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0xe4>
 80035c2:	e014      	b.n	80035ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fe f85c 	bl	8001680 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035cc:	f7fe f858 	bl	8001680 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e1e6      	b.n	80039ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035de:	4b53      	ldr	r3, [pc, #332]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x10c>
 80035ea:	e000      	b.n	80035ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d063      	beq.n	80036c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035fa:	4b4c      	ldr	r3, [pc, #304]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003606:	4b49      	ldr	r3, [pc, #292]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b08      	cmp	r3, #8
 8003610:	d11c      	bne.n	800364c <HAL_RCC_OscConfig+0x18c>
 8003612:	4b46      	ldr	r3, [pc, #280]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d116      	bne.n	800364c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361e:	4b43      	ldr	r3, [pc, #268]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_RCC_OscConfig+0x176>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d001      	beq.n	8003636 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e1ba      	b.n	80039ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003636:	4b3d      	ldr	r3, [pc, #244]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4939      	ldr	r1, [pc, #228]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 8003646:	4313      	orrs	r3, r2
 8003648:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364a:	e03a      	b.n	80036c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d020      	beq.n	8003696 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003654:	4b36      	ldr	r3, [pc, #216]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 8003656:	2201      	movs	r2, #1
 8003658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365a:	f7fe f811 	bl	8001680 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003662:	f7fe f80d 	bl	8001680 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e19b      	b.n	80039ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003674:	4b2d      	ldr	r3, [pc, #180]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003680:	4b2a      	ldr	r3, [pc, #168]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4927      	ldr	r1, [pc, #156]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 8003690:	4313      	orrs	r3, r2
 8003692:	600b      	str	r3, [r1, #0]
 8003694:	e015      	b.n	80036c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003696:	4b26      	ldr	r3, [pc, #152]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7fd fff0 	bl	8001680 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a4:	f7fd ffec 	bl	8001680 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e17a      	b.n	80039ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b6:	4b1d      	ldr	r3, [pc, #116]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d03a      	beq.n	8003744 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d019      	beq.n	800370a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d6:	4b17      	ldr	r3, [pc, #92]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 80036d8:	2201      	movs	r2, #1
 80036da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036dc:	f7fd ffd0 	bl	8001680 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e4:	f7fd ffcc 	bl	8001680 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e15a      	b.n	80039ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f6:	4b0d      	ldr	r3, [pc, #52]	; (800372c <HAL_RCC_OscConfig+0x26c>)
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003702:	2001      	movs	r0, #1
 8003704:	f000 faf6 	bl	8003cf4 <RCC_Delay>
 8003708:	e01c      	b.n	8003744 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800370a:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003710:	f7fd ffb6 	bl	8001680 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003716:	e00f      	b.n	8003738 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003718:	f7fd ffb2 	bl	8001680 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d908      	bls.n	8003738 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e140      	b.n	80039ac <HAL_RCC_OscConfig+0x4ec>
 800372a:	bf00      	nop
 800372c:	40021000 	.word	0x40021000
 8003730:	42420000 	.word	0x42420000
 8003734:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003738:	4b9e      	ldr	r3, [pc, #632]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e9      	bne.n	8003718 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 80a6 	beq.w	800389e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003752:	2300      	movs	r3, #0
 8003754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003756:	4b97      	ldr	r3, [pc, #604]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10d      	bne.n	800377e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003762:	4b94      	ldr	r3, [pc, #592]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	4a93      	ldr	r2, [pc, #588]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 8003768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376c:	61d3      	str	r3, [r2, #28]
 800376e:	4b91      	ldr	r3, [pc, #580]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003776:	60bb      	str	r3, [r7, #8]
 8003778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377a:	2301      	movs	r3, #1
 800377c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377e:	4b8e      	ldr	r3, [pc, #568]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003786:	2b00      	cmp	r3, #0
 8003788:	d118      	bne.n	80037bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800378a:	4b8b      	ldr	r3, [pc, #556]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a8a      	ldr	r2, [pc, #552]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 8003790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003796:	f7fd ff73 	bl	8001680 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379e:	f7fd ff6f 	bl	8001680 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b64      	cmp	r3, #100	; 0x64
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e0fd      	b.n	80039ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b0:	4b81      	ldr	r3, [pc, #516]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d106      	bne.n	80037d2 <HAL_RCC_OscConfig+0x312>
 80037c4:	4b7b      	ldr	r3, [pc, #492]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	4a7a      	ldr	r2, [pc, #488]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 80037ca:	f043 0301 	orr.w	r3, r3, #1
 80037ce:	6213      	str	r3, [r2, #32]
 80037d0:	e02d      	b.n	800382e <HAL_RCC_OscConfig+0x36e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10c      	bne.n	80037f4 <HAL_RCC_OscConfig+0x334>
 80037da:	4b76      	ldr	r3, [pc, #472]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	4a75      	ldr	r2, [pc, #468]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	6213      	str	r3, [r2, #32]
 80037e6:	4b73      	ldr	r3, [pc, #460]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	4a72      	ldr	r2, [pc, #456]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 80037ec:	f023 0304 	bic.w	r3, r3, #4
 80037f0:	6213      	str	r3, [r2, #32]
 80037f2:	e01c      	b.n	800382e <HAL_RCC_OscConfig+0x36e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	2b05      	cmp	r3, #5
 80037fa:	d10c      	bne.n	8003816 <HAL_RCC_OscConfig+0x356>
 80037fc:	4b6d      	ldr	r3, [pc, #436]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	4a6c      	ldr	r2, [pc, #432]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 8003802:	f043 0304 	orr.w	r3, r3, #4
 8003806:	6213      	str	r3, [r2, #32]
 8003808:	4b6a      	ldr	r3, [pc, #424]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	4a69      	ldr	r2, [pc, #420]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	6213      	str	r3, [r2, #32]
 8003814:	e00b      	b.n	800382e <HAL_RCC_OscConfig+0x36e>
 8003816:	4b67      	ldr	r3, [pc, #412]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	4a66      	ldr	r2, [pc, #408]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 800381c:	f023 0301 	bic.w	r3, r3, #1
 8003820:	6213      	str	r3, [r2, #32]
 8003822:	4b64      	ldr	r3, [pc, #400]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	4a63      	ldr	r2, [pc, #396]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 8003828:	f023 0304 	bic.w	r3, r3, #4
 800382c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d015      	beq.n	8003862 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003836:	f7fd ff23 	bl	8001680 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383c:	e00a      	b.n	8003854 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800383e:	f7fd ff1f 	bl	8001680 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	f241 3288 	movw	r2, #5000	; 0x1388
 800384c:	4293      	cmp	r3, r2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e0ab      	b.n	80039ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003854:	4b57      	ldr	r3, [pc, #348]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ee      	beq.n	800383e <HAL_RCC_OscConfig+0x37e>
 8003860:	e014      	b.n	800388c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003862:	f7fd ff0d 	bl	8001680 <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003868:	e00a      	b.n	8003880 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386a:	f7fd ff09 	bl	8001680 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	f241 3288 	movw	r2, #5000	; 0x1388
 8003878:	4293      	cmp	r3, r2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e095      	b.n	80039ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003880:	4b4c      	ldr	r3, [pc, #304]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1ee      	bne.n	800386a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800388c:	7dfb      	ldrb	r3, [r7, #23]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d105      	bne.n	800389e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003892:	4b48      	ldr	r3, [pc, #288]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	4a47      	ldr	r2, [pc, #284]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 8003898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 8081 	beq.w	80039aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038a8:	4b42      	ldr	r3, [pc, #264]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 030c 	and.w	r3, r3, #12
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d061      	beq.n	8003978 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d146      	bne.n	800394a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038bc:	4b3f      	ldr	r3, [pc, #252]	; (80039bc <HAL_RCC_OscConfig+0x4fc>)
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c2:	f7fd fedd 	bl	8001680 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ca:	f7fd fed9 	bl	8001680 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e067      	b.n	80039ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038dc:	4b35      	ldr	r3, [pc, #212]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1f0      	bne.n	80038ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f0:	d108      	bne.n	8003904 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038f2:	4b30      	ldr	r3, [pc, #192]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	492d      	ldr	r1, [pc, #180]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 8003900:	4313      	orrs	r3, r2
 8003902:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003904:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a19      	ldr	r1, [r3, #32]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	430b      	orrs	r3, r1
 8003916:	4927      	ldr	r1, [pc, #156]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 8003918:	4313      	orrs	r3, r2
 800391a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800391c:	4b27      	ldr	r3, [pc, #156]	; (80039bc <HAL_RCC_OscConfig+0x4fc>)
 800391e:	2201      	movs	r2, #1
 8003920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003922:	f7fd fead 	bl	8001680 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392a:	f7fd fea9 	bl	8001680 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e037      	b.n	80039ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800393c:	4b1d      	ldr	r3, [pc, #116]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <HAL_RCC_OscConfig+0x46a>
 8003948:	e02f      	b.n	80039aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394a:	4b1c      	ldr	r3, [pc, #112]	; (80039bc <HAL_RCC_OscConfig+0x4fc>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003950:	f7fd fe96 	bl	8001680 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003958:	f7fd fe92 	bl	8001680 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e020      	b.n	80039ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800396a:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x498>
 8003976:	e018      	b.n	80039aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e013      	b.n	80039ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_OscConfig+0x4f4>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	429a      	cmp	r2, r3
 8003996:	d106      	bne.n	80039a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40007000 	.word	0x40007000
 80039bc:	42420060 	.word	0x42420060

080039c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0d0      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039d4:	4b6a      	ldr	r3, [pc, #424]	; (8003b80 <HAL_RCC_ClockConfig+0x1c0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d910      	bls.n	8003a04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e2:	4b67      	ldr	r3, [pc, #412]	; (8003b80 <HAL_RCC_ClockConfig+0x1c0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 0207 	bic.w	r2, r3, #7
 80039ea:	4965      	ldr	r1, [pc, #404]	; (8003b80 <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	4b63      	ldr	r3, [pc, #396]	; (8003b80 <HAL_RCC_ClockConfig+0x1c0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0b8      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d020      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a1c:	4b59      	ldr	r3, [pc, #356]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	4a58      	ldr	r2, [pc, #352]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a34:	4b53      	ldr	r3, [pc, #332]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4a52      	ldr	r2, [pc, #328]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a40:	4b50      	ldr	r3, [pc, #320]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	494d      	ldr	r1, [pc, #308]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d040      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d107      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a66:	4b47      	ldr	r3, [pc, #284]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d115      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e07f      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a7e:	4b41      	ldr	r3, [pc, #260]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e073      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8e:	4b3d      	ldr	r3, [pc, #244]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e06b      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a9e:	4b39      	ldr	r3, [pc, #228]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f023 0203 	bic.w	r2, r3, #3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4936      	ldr	r1, [pc, #216]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ab0:	f7fd fde6 	bl	8001680 <HAL_GetTick>
 8003ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab6:	e00a      	b.n	8003ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab8:	f7fd fde2 	bl	8001680 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e053      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ace:	4b2d      	ldr	r3, [pc, #180]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f003 020c 	and.w	r2, r3, #12
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d1eb      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae0:	4b27      	ldr	r3, [pc, #156]	; (8003b80 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d210      	bcs.n	8003b10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aee:	4b24      	ldr	r3, [pc, #144]	; (8003b80 <HAL_RCC_ClockConfig+0x1c0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 0207 	bic.w	r2, r3, #7
 8003af6:	4922      	ldr	r1, [pc, #136]	; (8003b80 <HAL_RCC_ClockConfig+0x1c0>)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afe:	4b20      	ldr	r3, [pc, #128]	; (8003b80 <HAL_RCC_ClockConfig+0x1c0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e032      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d008      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b1c:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	4916      	ldr	r1, [pc, #88]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b3a:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	490e      	ldr	r1, [pc, #56]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b4e:	f000 f821 	bl	8003b94 <HAL_RCC_GetSysClockFreq>
 8003b52:	4601      	mov	r1, r0
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003b60:	5cd3      	ldrb	r3, [r2, r3]
 8003b62:	fa21 f303 	lsr.w	r3, r1, r3
 8003b66:	4a09      	ldr	r2, [pc, #36]	; (8003b8c <HAL_RCC_ClockConfig+0x1cc>)
 8003b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b6a:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <HAL_RCC_ClockConfig+0x1d0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fd fc76 	bl	8001460 <HAL_InitTick>

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40022000 	.word	0x40022000
 8003b84:	40021000 	.word	0x40021000
 8003b88:	08008f00 	.word	0x08008f00
 8003b8c:	20000000 	.word	0x20000000
 8003b90:	20000004 	.word	0x20000004

08003b94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b94:	b490      	push	{r4, r7}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b9a:	4b2a      	ldr	r3, [pc, #168]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b9c:	1d3c      	adds	r4, r7, #4
 8003b9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ba0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ba4:	4b28      	ldr	r3, [pc, #160]	; (8003c48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	61fb      	str	r3, [r7, #28]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61bb      	str	r3, [r7, #24]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bbe:	4b23      	ldr	r3, [pc, #140]	; (8003c4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d002      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x40>
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d003      	beq.n	8003bda <HAL_RCC_GetSysClockFreq+0x46>
 8003bd2:	e02d      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bd4:	4b1e      	ldr	r3, [pc, #120]	; (8003c50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bd6:	623b      	str	r3, [r7, #32]
      break;
 8003bd8:	e02d      	b.n	8003c36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	0c9b      	lsrs	r3, r3, #18
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003be6:	4413      	add	r3, r2
 8003be8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003bec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d013      	beq.n	8003c20 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bf8:	4b14      	ldr	r3, [pc, #80]	; (8003c4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	0c5b      	lsrs	r3, r3, #17
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c06:	4413      	add	r3, r2
 8003c08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	4a0f      	ldr	r2, [pc, #60]	; (8003c50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c12:	fb02 f203 	mul.w	r2, r2, r3
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1e:	e004      	b.n	8003c2a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	4a0c      	ldr	r2, [pc, #48]	; (8003c54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c24:	fb02 f303 	mul.w	r3, r2, r3
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	623b      	str	r3, [r7, #32]
      break;
 8003c2e:	e002      	b.n	8003c36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c30:	4b07      	ldr	r3, [pc, #28]	; (8003c50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c32:	623b      	str	r3, [r7, #32]
      break;
 8003c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c36:	6a3b      	ldr	r3, [r7, #32]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3728      	adds	r7, #40	; 0x28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc90      	pop	{r4, r7}
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	080088cc 	.word	0x080088cc
 8003c48:	080088dc 	.word	0x080088dc
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	007a1200 	.word	0x007a1200
 8003c54:	003d0900 	.word	0x003d0900

08003c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c5c:	4b02      	ldr	r3, [pc, #8]	; (8003c68 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr
 8003c68:	20000000 	.word	0x20000000

08003c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c70:	f7ff fff2 	bl	8003c58 <HAL_RCC_GetHCLKFreq>
 8003c74:	4601      	mov	r1, r0
 8003c76:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	0a1b      	lsrs	r3, r3, #8
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	4a03      	ldr	r2, [pc, #12]	; (8003c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c82:	5cd3      	ldrb	r3, [r2, r3]
 8003c84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	08008f10 	.word	0x08008f10

08003c94 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	220f      	movs	r2, #15
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ca4:	4b11      	ldr	r3, [pc, #68]	; (8003cec <HAL_RCC_GetClockConfig+0x58>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0203 	and.w	r2, r3, #3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cb0:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <HAL_RCC_GetClockConfig+0x58>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_RCC_GetClockConfig+0x58>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003cc8:	4b08      	ldr	r3, [pc, #32]	; (8003cec <HAL_RCC_GetClockConfig+0x58>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	08db      	lsrs	r3, r3, #3
 8003cce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cd6:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0207 	and.w	r2, r3, #7
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40022000 	.word	0x40022000

08003cf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <RCC_Delay+0x34>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a0a      	ldr	r2, [pc, #40]	; (8003d2c <RCC_Delay+0x38>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	0a5b      	lsrs	r3, r3, #9
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	fb02 f303 	mul.w	r3, r2, r3
 8003d0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d10:	bf00      	nop
  }
  while (Delay --);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1e5a      	subs	r2, r3, #1
 8003d16:	60fa      	str	r2, [r7, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1f9      	bne.n	8003d10 <RCC_Delay+0x1c>
}
 8003d1c:	bf00      	nop
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	20000000 	.word	0x20000000
 8003d2c:	10624dd3 	.word	0x10624dd3

08003d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d07d      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d50:	4b4f      	ldr	r3, [pc, #316]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10d      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d5c:	4b4c      	ldr	r3, [pc, #304]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	4a4b      	ldr	r2, [pc, #300]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d66:	61d3      	str	r3, [r2, #28]
 8003d68:	4b49      	ldr	r3, [pc, #292]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d74:	2301      	movs	r3, #1
 8003d76:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d78:	4b46      	ldr	r3, [pc, #280]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d118      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d84:	4b43      	ldr	r3, [pc, #268]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a42      	ldr	r2, [pc, #264]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d90:	f7fd fc76 	bl	8001680 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d96:	e008      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d98:	f7fd fc72 	bl	8001680 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	; 0x64
 8003da4:	d901      	bls.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e06d      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003daa:	4b3a      	ldr	r3, [pc, #232]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003db6:	4b36      	ldr	r3, [pc, #216]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dbe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d02e      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d027      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dd4:	4b2e      	ldr	r3, [pc, #184]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ddc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dde:	4b2e      	ldr	r3, [pc, #184]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003de4:	4b2c      	ldr	r3, [pc, #176]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dea:	4a29      	ldr	r2, [pc, #164]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d014      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfa:	f7fd fc41 	bl	8001680 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e00:	e00a      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e02:	f7fd fc3d 	bl	8001680 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e036      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e18:	4b1d      	ldr	r3, [pc, #116]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0ee      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e24:	4b1a      	ldr	r3, [pc, #104]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	4917      	ldr	r1, [pc, #92]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e36:	7dfb      	ldrb	r3, [r7, #23]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d105      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e3c:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	4a13      	ldr	r2, [pc, #76]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e54:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	490b      	ldr	r1, [pc, #44]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d008      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e72:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	4904      	ldr	r1, [pc, #16]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40007000 	.word	0x40007000
 8003e98:	42420440 	.word	0x42420440

08003e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e01d      	b.n	8003eea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f815 	bl	8003ef2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4610      	mov	r0, r2
 8003edc:	f000 f962 	bl	80041a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr

08003f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b06      	cmp	r3, #6
 8003f2c:	d007      	beq.n	8003f3e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0201 	orr.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d122      	bne.n	8003fa6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d11b      	bne.n	8003fa6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f06f 0202 	mvn.w	r2, #2
 8003f76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f8ed 	bl	800416c <HAL_TIM_IC_CaptureCallback>
 8003f92:	e005      	b.n	8003fa0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f8e0 	bl	800415a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f8ef 	bl	800417e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d122      	bne.n	8003ffa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d11b      	bne.n	8003ffa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f06f 0204 	mvn.w	r2, #4
 8003fca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f8c3 	bl	800416c <HAL_TIM_IC_CaptureCallback>
 8003fe6:	e005      	b.n	8003ff4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f8b6 	bl	800415a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f8c5 	bl	800417e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f003 0308 	and.w	r3, r3, #8
 8004004:	2b08      	cmp	r3, #8
 8004006:	d122      	bne.n	800404e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b08      	cmp	r3, #8
 8004014:	d11b      	bne.n	800404e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f06f 0208 	mvn.w	r2, #8
 800401e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2204      	movs	r2, #4
 8004024:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	f003 0303 	and.w	r3, r3, #3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f899 	bl	800416c <HAL_TIM_IC_CaptureCallback>
 800403a:	e005      	b.n	8004048 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f88c 	bl	800415a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f89b 	bl	800417e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b10      	cmp	r3, #16
 800405a:	d122      	bne.n	80040a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f003 0310 	and.w	r3, r3, #16
 8004066:	2b10      	cmp	r3, #16
 8004068:	d11b      	bne.n	80040a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f06f 0210 	mvn.w	r2, #16
 8004072:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2208      	movs	r2, #8
 8004078:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f86f 	bl	800416c <HAL_TIM_IC_CaptureCallback>
 800408e:	e005      	b.n	800409c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f862 	bl	800415a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f871 	bl	800417e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d10e      	bne.n	80040ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d107      	bne.n	80040ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f06f 0201 	mvn.w	r2, #1
 80040c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7fc fe85 	bl	8000dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d8:	2b80      	cmp	r3, #128	; 0x80
 80040da:	d10e      	bne.n	80040fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e6:	2b80      	cmp	r3, #128	; 0x80
 80040e8:	d107      	bne.n	80040fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f8c0 	bl	800427a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004104:	2b40      	cmp	r3, #64	; 0x40
 8004106:	d10e      	bne.n	8004126 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004112:	2b40      	cmp	r3, #64	; 0x40
 8004114:	d107      	bne.n	8004126 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800411e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f835 	bl	8004190 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b20      	cmp	r3, #32
 8004132:	d10e      	bne.n	8004152 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b20      	cmp	r3, #32
 8004140:	d107      	bne.n	8004152 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f06f 0220 	mvn.w	r2, #32
 800414a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f88b 	bl	8004268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004152:	bf00      	nop
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr

08004190 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr
	...

080041a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a29      	ldr	r2, [pc, #164]	; (800425c <TIM_Base_SetConfig+0xb8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00b      	beq.n	80041d4 <TIM_Base_SetConfig+0x30>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c2:	d007      	beq.n	80041d4 <TIM_Base_SetConfig+0x30>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a26      	ldr	r2, [pc, #152]	; (8004260 <TIM_Base_SetConfig+0xbc>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d003      	beq.n	80041d4 <TIM_Base_SetConfig+0x30>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a25      	ldr	r2, [pc, #148]	; (8004264 <TIM_Base_SetConfig+0xc0>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d108      	bne.n	80041e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a1c      	ldr	r2, [pc, #112]	; (800425c <TIM_Base_SetConfig+0xb8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00b      	beq.n	8004206 <TIM_Base_SetConfig+0x62>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f4:	d007      	beq.n	8004206 <TIM_Base_SetConfig+0x62>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a19      	ldr	r2, [pc, #100]	; (8004260 <TIM_Base_SetConfig+0xbc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d003      	beq.n	8004206 <TIM_Base_SetConfig+0x62>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a18      	ldr	r2, [pc, #96]	; (8004264 <TIM_Base_SetConfig+0xc0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d108      	bne.n	8004218 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a07      	ldr	r2, [pc, #28]	; (800425c <TIM_Base_SetConfig+0xb8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d103      	bne.n	800424c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	615a      	str	r2, [r3, #20]
}
 8004252:	bf00      	nop
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr
 800425c:	40012c00 	.word	0x40012c00
 8004260:	40000400 	.word	0x40000400
 8004264:	40000800 	.word	0x40000800

08004268 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr

0800427a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr

0800428c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800428c:	b084      	sub	sp, #16
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	f107 0014 	add.w	r0, r7, #20
 800429a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	b004      	add	sp, #16
 80042aa:	4770      	bx	lr

080042ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042b4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80042b8:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	89fb      	ldrh	r3, [r7, #14]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr

080042da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80042da:	b480      	push	{r7}
 80042dc:	b085      	sub	sp, #20
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042e2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80042e6:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	b21a      	sxth	r2, r3
 80042f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042f6:	43db      	mvns	r3, r3
 80042f8:	b21b      	sxth	r3, r3
 80042fa:	4013      	ands	r3, r2
 80042fc:	b21b      	sxth	r3, r3
 80042fe:	b29a      	uxth	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	bc80      	pop	{r7}
 8004310:	4770      	bx	lr

08004312 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	460b      	mov	r3, r1
 800431c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr

0800432a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800432a:	b084      	sub	sp, #16
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	f107 0014 	add.w	r0, r7, #20
 8004338:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff ffa5 	bl	80042ac <USB_EnableGlobalInt>

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800436e:	b004      	add	sp, #16
 8004370:	4770      	bx	lr
	...

08004374 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004374:	b490      	push	{r4, r7}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	b29b      	uxth	r3, r3
 8004390:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004398:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	78db      	ldrb	r3, [r3, #3]
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d819      	bhi.n	80043d6 <USB_ActivateEndpoint+0x62>
 80043a2:	a201      	add	r2, pc, #4	; (adr r2, 80043a8 <USB_ActivateEndpoint+0x34>)
 80043a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a8:	080043b9 	.word	0x080043b9
 80043ac:	080043cd 	.word	0x080043cd
 80043b0:	080043dd 	.word	0x080043dd
 80043b4:	080043c3 	.word	0x080043c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80043b8:	89bb      	ldrh	r3, [r7, #12]
 80043ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043be:	81bb      	strh	r3, [r7, #12]
      break;
 80043c0:	e00d      	b.n	80043de <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80043c2:	89bb      	ldrh	r3, [r7, #12]
 80043c4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80043c8:	81bb      	strh	r3, [r7, #12]
      break;
 80043ca:	e008      	b.n	80043de <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80043cc:	89bb      	ldrh	r3, [r7, #12]
 80043ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043d2:	81bb      	strh	r3, [r7, #12]
      break;
 80043d4:	e003      	b.n	80043de <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	73fb      	strb	r3, [r7, #15]
      break;
 80043da:	e000      	b.n	80043de <USB_ActivateEndpoint+0x6a>
      break;
 80043dc:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	441a      	add	r2, r3
 80043e8:	89bb      	ldrh	r3, [r7, #12]
 80043ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	b29b      	uxth	r3, r3
 800440c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004414:	b29a      	uxth	r2, r3
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	4313      	orrs	r3, r2
 800441e:	b29c      	uxth	r4, r3
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	441a      	add	r2, r3
 800442a:	4b8a      	ldr	r3, [pc, #552]	; (8004654 <USB_ActivateEndpoint+0x2e0>)
 800442c:	4323      	orrs	r3, r4
 800442e:	b29b      	uxth	r3, r3
 8004430:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	7b1b      	ldrb	r3, [r3, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	f040 8112 	bne.w	8004660 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	785b      	ldrb	r3, [r3, #1]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d067      	beq.n	8004514 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004444:	687c      	ldr	r4, [r7, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800444c:	b29b      	uxth	r3, r3
 800444e:	441c      	add	r4, r3
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	4423      	add	r3, r4
 8004458:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800445c:	461c      	mov	r4, r3
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	88db      	ldrh	r3, [r3, #6]
 8004462:	085b      	lsrs	r3, r3, #1
 8004464:	b29b      	uxth	r3, r3
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	b29b      	uxth	r3, r3
 800446a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b29c      	uxth	r4, r3
 800447a:	4623      	mov	r3, r4
 800447c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004480:	2b00      	cmp	r3, #0
 8004482:	d014      	beq.n	80044ae <USB_ActivateEndpoint+0x13a>
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	b29b      	uxth	r3, r3
 8004492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449a:	b29c      	uxth	r4, r3
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	441a      	add	r2, r3
 80044a6:	4b6c      	ldr	r3, [pc, #432]	; (8004658 <USB_ActivateEndpoint+0x2e4>)
 80044a8:	4323      	orrs	r3, r4
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	78db      	ldrb	r3, [r3, #3]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d018      	beq.n	80044e8 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044cc:	b29c      	uxth	r4, r3
 80044ce:	f084 0320 	eor.w	r3, r4, #32
 80044d2:	b29c      	uxth	r4, r3
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	441a      	add	r2, r3
 80044de:	4b5d      	ldr	r3, [pc, #372]	; (8004654 <USB_ActivateEndpoint+0x2e0>)
 80044e0:	4323      	orrs	r3, r4
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	8013      	strh	r3, [r2, #0]
 80044e6:	e22b      	b.n	8004940 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044fe:	b29c      	uxth	r4, r3
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	441a      	add	r2, r3
 800450a:	4b52      	ldr	r3, [pc, #328]	; (8004654 <USB_ActivateEndpoint+0x2e0>)
 800450c:	4323      	orrs	r3, r4
 800450e:	b29b      	uxth	r3, r3
 8004510:	8013      	strh	r3, [r2, #0]
 8004512:	e215      	b.n	8004940 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004514:	687c      	ldr	r4, [r7, #4]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451c:	b29b      	uxth	r3, r3
 800451e:	441c      	add	r4, r3
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	4423      	add	r3, r4
 8004528:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800452c:	461c      	mov	r4, r3
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	88db      	ldrh	r3, [r3, #6]
 8004532:	085b      	lsrs	r3, r3, #1
 8004534:	b29b      	uxth	r3, r3
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	b29b      	uxth	r3, r3
 800453a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800453c:	687c      	ldr	r4, [r7, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004544:	b29b      	uxth	r3, r3
 8004546:	441c      	add	r4, r3
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	4423      	add	r3, r4
 8004550:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004554:	461c      	mov	r4, r3
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10e      	bne.n	800457c <USB_ActivateEndpoint+0x208>
 800455e:	8823      	ldrh	r3, [r4, #0]
 8004560:	b29b      	uxth	r3, r3
 8004562:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004566:	b29b      	uxth	r3, r3
 8004568:	8023      	strh	r3, [r4, #0]
 800456a:	8823      	ldrh	r3, [r4, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004576:	b29b      	uxth	r3, r3
 8004578:	8023      	strh	r3, [r4, #0]
 800457a:	e02d      	b.n	80045d8 <USB_ActivateEndpoint+0x264>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	2b3e      	cmp	r3, #62	; 0x3e
 8004582:	d812      	bhi.n	80045aa <USB_ActivateEndpoint+0x236>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	085b      	lsrs	r3, r3, #1
 800458a:	60bb      	str	r3, [r7, #8]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d002      	beq.n	800459e <USB_ActivateEndpoint+0x22a>
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	3301      	adds	r3, #1
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	029b      	lsls	r3, r3, #10
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	8023      	strh	r3, [r4, #0]
 80045a8:	e016      	b.n	80045d8 <USB_ActivateEndpoint+0x264>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 031f 	and.w	r3, r3, #31
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d102      	bne.n	80045c4 <USB_ActivateEndpoint+0x250>
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	60bb      	str	r3, [r7, #8]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	029b      	lsls	r3, r3, #10
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29c      	uxth	r4, r3
 80045e6:	4623      	mov	r3, r4
 80045e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d014      	beq.n	800461a <USB_ActivateEndpoint+0x2a6>
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004606:	b29c      	uxth	r4, r3
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	441a      	add	r2, r3
 8004612:	4b12      	ldr	r3, [pc, #72]	; (800465c <USB_ActivateEndpoint+0x2e8>)
 8004614:	4323      	orrs	r3, r4
 8004616:	b29b      	uxth	r3, r3
 8004618:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	b29b      	uxth	r3, r3
 8004628:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800462c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004630:	b29c      	uxth	r4, r3
 8004632:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004636:	b29c      	uxth	r4, r3
 8004638:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800463c:	b29c      	uxth	r4, r3
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	441a      	add	r2, r3
 8004648:	4b02      	ldr	r3, [pc, #8]	; (8004654 <USB_ActivateEndpoint+0x2e0>)
 800464a:	4323      	orrs	r3, r4
 800464c:	b29b      	uxth	r3, r3
 800464e:	8013      	strh	r3, [r2, #0]
 8004650:	e176      	b.n	8004940 <USB_ActivateEndpoint+0x5cc>
 8004652:	bf00      	nop
 8004654:	ffff8080 	.word	0xffff8080
 8004658:	ffff80c0 	.word	0xffff80c0
 800465c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	b29b      	uxth	r3, r3
 800466e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004676:	b29c      	uxth	r4, r3
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	441a      	add	r2, r3
 8004682:	4b96      	ldr	r3, [pc, #600]	; (80048dc <USB_ActivateEndpoint+0x568>)
 8004684:	4323      	orrs	r3, r4
 8004686:	b29b      	uxth	r3, r3
 8004688:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800468a:	687c      	ldr	r4, [r7, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004692:	b29b      	uxth	r3, r3
 8004694:	441c      	add	r4, r3
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	4423      	add	r3, r4
 800469e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046a2:	461c      	mov	r4, r3
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	891b      	ldrh	r3, [r3, #8]
 80046a8:	085b      	lsrs	r3, r3, #1
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	8023      	strh	r3, [r4, #0]
 80046b2:	687c      	ldr	r4, [r7, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	441c      	add	r4, r3
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	4423      	add	r3, r4
 80046c6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80046ca:	461c      	mov	r4, r3
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	895b      	ldrh	r3, [r3, #10]
 80046d0:	085b      	lsrs	r3, r3, #1
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	785b      	ldrb	r3, [r3, #1]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f040 8088 	bne.w	80047f4 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	b29c      	uxth	r4, r3
 80046f2:	4623      	mov	r3, r4
 80046f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d014      	beq.n	8004726 <USB_ActivateEndpoint+0x3b2>
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b29b      	uxth	r3, r3
 800470a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004712:	b29c      	uxth	r4, r3
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	441a      	add	r2, r3
 800471e:	4b70      	ldr	r3, [pc, #448]	; (80048e0 <USB_ActivateEndpoint+0x56c>)
 8004720:	4323      	orrs	r3, r4
 8004722:	b29b      	uxth	r3, r3
 8004724:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	b29c      	uxth	r4, r3
 8004734:	4623      	mov	r3, r4
 8004736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d014      	beq.n	8004768 <USB_ActivateEndpoint+0x3f4>
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004754:	b29c      	uxth	r4, r3
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	441a      	add	r2, r3
 8004760:	4b60      	ldr	r3, [pc, #384]	; (80048e4 <USB_ActivateEndpoint+0x570>)
 8004762:	4323      	orrs	r3, r4
 8004764:	b29b      	uxth	r3, r3
 8004766:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	b29b      	uxth	r3, r3
 8004776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800477a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477e:	b29c      	uxth	r4, r3
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	441a      	add	r2, r3
 800478a:	4b56      	ldr	r3, [pc, #344]	; (80048e4 <USB_ActivateEndpoint+0x570>)
 800478c:	4323      	orrs	r3, r4
 800478e:	b29b      	uxth	r3, r3
 8004790:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a8:	b29c      	uxth	r4, r3
 80047aa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80047ae:	b29c      	uxth	r4, r3
 80047b0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80047b4:	b29c      	uxth	r4, r3
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	441a      	add	r2, r3
 80047c0:	4b49      	ldr	r3, [pc, #292]	; (80048e8 <USB_ActivateEndpoint+0x574>)
 80047c2:	4323      	orrs	r3, r4
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047de:	b29c      	uxth	r4, r3
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	441a      	add	r2, r3
 80047ea:	4b3f      	ldr	r3, [pc, #252]	; (80048e8 <USB_ActivateEndpoint+0x574>)
 80047ec:	4323      	orrs	r3, r4
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	8013      	strh	r3, [r2, #0]
 80047f2:	e0a5      	b.n	8004940 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	b29c      	uxth	r4, r3
 8004802:	4623      	mov	r3, r4
 8004804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d014      	beq.n	8004836 <USB_ActivateEndpoint+0x4c2>
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	b29b      	uxth	r3, r3
 800481a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800481e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004822:	b29c      	uxth	r4, r3
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	441a      	add	r2, r3
 800482e:	4b2c      	ldr	r3, [pc, #176]	; (80048e0 <USB_ActivateEndpoint+0x56c>)
 8004830:	4323      	orrs	r3, r4
 8004832:	b29b      	uxth	r3, r3
 8004834:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	b29c      	uxth	r4, r3
 8004844:	4623      	mov	r3, r4
 8004846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484a:	2b00      	cmp	r3, #0
 800484c:	d014      	beq.n	8004878 <USB_ActivateEndpoint+0x504>
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	b29b      	uxth	r3, r3
 800485c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004864:	b29c      	uxth	r4, r3
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	441a      	add	r2, r3
 8004870:	4b1c      	ldr	r3, [pc, #112]	; (80048e4 <USB_ActivateEndpoint+0x570>)
 8004872:	4323      	orrs	r3, r4
 8004874:	b29b      	uxth	r3, r3
 8004876:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	b29b      	uxth	r3, r3
 8004886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800488a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488e:	b29c      	uxth	r4, r3
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	441a      	add	r2, r3
 800489a:	4b11      	ldr	r3, [pc, #68]	; (80048e0 <USB_ActivateEndpoint+0x56c>)
 800489c:	4323      	orrs	r3, r4
 800489e:	b29b      	uxth	r3, r3
 80048a0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	78db      	ldrb	r3, [r3, #3]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d020      	beq.n	80048ec <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c0:	b29c      	uxth	r4, r3
 80048c2:	f084 0320 	eor.w	r3, r4, #32
 80048c6:	b29c      	uxth	r4, r3
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	441a      	add	r2, r3
 80048d2:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <USB_ActivateEndpoint+0x574>)
 80048d4:	4323      	orrs	r3, r4
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	8013      	strh	r3, [r2, #0]
 80048da:	e01c      	b.n	8004916 <USB_ActivateEndpoint+0x5a2>
 80048dc:	ffff8180 	.word	0xffff8180
 80048e0:	ffffc080 	.word	0xffffc080
 80048e4:	ffff80c0 	.word	0xffff80c0
 80048e8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004902:	b29c      	uxth	r4, r3
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	441a      	add	r2, r3
 800490e:	4b0f      	ldr	r3, [pc, #60]	; (800494c <USB_ActivateEndpoint+0x5d8>)
 8004910:	4323      	orrs	r3, r4
 8004912:	b29b      	uxth	r3, r3
 8004914:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492c:	b29c      	uxth	r4, r3
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	441a      	add	r2, r3
 8004938:	4b04      	ldr	r3, [pc, #16]	; (800494c <USB_ActivateEndpoint+0x5d8>)
 800493a:	4323      	orrs	r3, r4
 800493c:	b29b      	uxth	r3, r3
 800493e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004940:	7bfb      	ldrb	r3, [r7, #15]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bc90      	pop	{r4, r7}
 800494a:	4770      	bx	lr
 800494c:	ffff8080 	.word	0xffff8080

08004950 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004950:	b490      	push	{r4, r7}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	7b1b      	ldrb	r3, [r3, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d171      	bne.n	8004a46 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	785b      	ldrb	r3, [r3, #1]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d036      	beq.n	80049d8 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	881b      	ldrh	r3, [r3, #0]
 8004976:	b29c      	uxth	r4, r3
 8004978:	4623      	mov	r3, r4
 800497a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d014      	beq.n	80049ac <USB_DeactivateEndpoint+0x5c>
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	b29b      	uxth	r3, r3
 8004990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004998:	b29c      	uxth	r4, r3
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	441a      	add	r2, r3
 80049a4:	4b6b      	ldr	r3, [pc, #428]	; (8004b54 <USB_DeactivateEndpoint+0x204>)
 80049a6:	4323      	orrs	r3, r4
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c2:	b29c      	uxth	r4, r3
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	441a      	add	r2, r3
 80049ce:	4b62      	ldr	r3, [pc, #392]	; (8004b58 <USB_DeactivateEndpoint+0x208>)
 80049d0:	4323      	orrs	r3, r4
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	8013      	strh	r3, [r2, #0]
 80049d6:	e144      	b.n	8004c62 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29c      	uxth	r4, r3
 80049e6:	4623      	mov	r3, r4
 80049e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d014      	beq.n	8004a1a <USB_DeactivateEndpoint+0xca>
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a06:	b29c      	uxth	r4, r3
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	441a      	add	r2, r3
 8004a12:	4b52      	ldr	r3, [pc, #328]	; (8004b5c <USB_DeactivateEndpoint+0x20c>)
 8004a14:	4323      	orrs	r3, r4
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a30:	b29c      	uxth	r4, r3
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	441a      	add	r2, r3
 8004a3c:	4b46      	ldr	r3, [pc, #280]	; (8004b58 <USB_DeactivateEndpoint+0x208>)
 8004a3e:	4323      	orrs	r3, r4
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	8013      	strh	r3, [r2, #0]
 8004a44:	e10d      	b.n	8004c62 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	785b      	ldrb	r3, [r3, #1]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f040 8088 	bne.w	8004b60 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	b29c      	uxth	r4, r3
 8004a5e:	4623      	mov	r3, r4
 8004a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d014      	beq.n	8004a92 <USB_DeactivateEndpoint+0x142>
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7e:	b29c      	uxth	r4, r3
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	441a      	add	r2, r3
 8004a8a:	4b34      	ldr	r3, [pc, #208]	; (8004b5c <USB_DeactivateEndpoint+0x20c>)
 8004a8c:	4323      	orrs	r3, r4
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	b29c      	uxth	r4, r3
 8004aa0:	4623      	mov	r3, r4
 8004aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d014      	beq.n	8004ad4 <USB_DeactivateEndpoint+0x184>
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac0:	b29c      	uxth	r4, r3
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	441a      	add	r2, r3
 8004acc:	4b21      	ldr	r3, [pc, #132]	; (8004b54 <USB_DeactivateEndpoint+0x204>)
 8004ace:	4323      	orrs	r3, r4
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aea:	b29c      	uxth	r4, r3
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	441a      	add	r2, r3
 8004af6:	4b17      	ldr	r3, [pc, #92]	; (8004b54 <USB_DeactivateEndpoint+0x204>)
 8004af8:	4323      	orrs	r3, r4
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b14:	b29c      	uxth	r4, r3
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	441a      	add	r2, r3
 8004b20:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <USB_DeactivateEndpoint+0x208>)
 8004b22:	4323      	orrs	r3, r4
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b3e:	b29c      	uxth	r4, r3
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	441a      	add	r2, r3
 8004b4a:	4b03      	ldr	r3, [pc, #12]	; (8004b58 <USB_DeactivateEndpoint+0x208>)
 8004b4c:	4323      	orrs	r3, r4
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	8013      	strh	r3, [r2, #0]
 8004b52:	e086      	b.n	8004c62 <USB_DeactivateEndpoint+0x312>
 8004b54:	ffff80c0 	.word	0xffff80c0
 8004b58:	ffff8080 	.word	0xffff8080
 8004b5c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	b29c      	uxth	r4, r3
 8004b6e:	4623      	mov	r3, r4
 8004b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d014      	beq.n	8004ba2 <USB_DeactivateEndpoint+0x252>
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8e:	b29c      	uxth	r4, r3
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	441a      	add	r2, r3
 8004b9a:	4b35      	ldr	r3, [pc, #212]	; (8004c70 <USB_DeactivateEndpoint+0x320>)
 8004b9c:	4323      	orrs	r3, r4
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	b29c      	uxth	r4, r3
 8004bb0:	4623      	mov	r3, r4
 8004bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d014      	beq.n	8004be4 <USB_DeactivateEndpoint+0x294>
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd0:	b29c      	uxth	r4, r3
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	441a      	add	r2, r3
 8004bdc:	4b25      	ldr	r3, [pc, #148]	; (8004c74 <USB_DeactivateEndpoint+0x324>)
 8004bde:	4323      	orrs	r3, r4
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfa:	b29c      	uxth	r4, r3
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	441a      	add	r2, r3
 8004c06:	4b1a      	ldr	r3, [pc, #104]	; (8004c70 <USB_DeactivateEndpoint+0x320>)
 8004c08:	4323      	orrs	r3, r4
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c24:	b29c      	uxth	r4, r3
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	441a      	add	r2, r3
 8004c30:	4b11      	ldr	r3, [pc, #68]	; (8004c78 <USB_DeactivateEndpoint+0x328>)
 8004c32:	4323      	orrs	r3, r4
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4e:	b29c      	uxth	r4, r3
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	441a      	add	r2, r3
 8004c5a:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <USB_DeactivateEndpoint+0x328>)
 8004c5c:	4323      	orrs	r3, r4
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc90      	pop	{r4, r7}
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	ffffc080 	.word	0xffffc080
 8004c74:	ffff80c0 	.word	0xffff80c0
 8004c78:	ffff8080 	.word	0xffff8080

08004c7c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c7c:	b590      	push	{r4, r7, lr}
 8004c7e:	b08d      	sub	sp, #52	; 0x34
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	785b      	ldrb	r3, [r3, #1]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	f040 8160 	bne.w	8004f50 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	699a      	ldr	r2, [r3, #24]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d909      	bls.n	8004cb0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	1ad2      	subs	r2, r2, r3
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	619a      	str	r2, [r3, #24]
 8004cae:	e005      	b.n	8004cbc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	7b1b      	ldrb	r3, [r3, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d119      	bne.n	8004cf8 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	6959      	ldr	r1, [r3, #20]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	88da      	ldrh	r2, [r3, #6]
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 fba2 	bl	800541a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004cd6:	687c      	ldr	r4, [r7, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	441c      	add	r4, r3
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	4423      	add	r3, r4
 8004cea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cee:	461c      	mov	r4, r3
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	8023      	strh	r3, [r4, #0]
 8004cf6:	e10f      	b.n	8004f18 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d065      	beq.n	8004dda <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d0e:	687c      	ldr	r4, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	785b      	ldrb	r3, [r3, #1]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d148      	bne.n	8004daa <USB_EPStartXfer+0x12e>
 8004d18:	687c      	ldr	r4, [r7, #4]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	441c      	add	r4, r3
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	4423      	add	r3, r4
 8004d2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d30:	461c      	mov	r4, r3
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10e      	bne.n	8004d56 <USB_EPStartXfer+0xda>
 8004d38:	8823      	ldrh	r3, [r4, #0]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	8023      	strh	r3, [r4, #0]
 8004d44:	8823      	ldrh	r3, [r4, #0]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	8023      	strh	r3, [r4, #0]
 8004d54:	e03d      	b.n	8004dd2 <USB_EPStartXfer+0x156>
 8004d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d58:	2b3e      	cmp	r3, #62	; 0x3e
 8004d5a:	d810      	bhi.n	8004d7e <USB_EPStartXfer+0x102>
 8004d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5e:	085b      	lsrs	r3, r3, #1
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <USB_EPStartXfer+0xf6>
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	3301      	adds	r3, #1
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	029b      	lsls	r3, r3, #10
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	8023      	strh	r3, [r4, #0]
 8004d7c:	e029      	b.n	8004dd2 <USB_EPStartXfer+0x156>
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	627b      	str	r3, [r7, #36]	; 0x24
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	f003 031f 	and.w	r3, r3, #31
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d102      	bne.n	8004d94 <USB_EPStartXfer+0x118>
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	3b01      	subs	r3, #1
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	029b      	lsls	r3, r3, #10
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	8023      	strh	r3, [r4, #0]
 8004da8:	e013      	b.n	8004dd2 <USB_EPStartXfer+0x156>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	785b      	ldrb	r3, [r3, #1]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d10f      	bne.n	8004dd2 <USB_EPStartXfer+0x156>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	441c      	add	r4, r3
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	4423      	add	r3, r4
 8004dc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	895b      	ldrh	r3, [r3, #10]
 8004dd6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004dd8:	e063      	b.n	8004ea2 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	785b      	ldrb	r3, [r3, #1]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d148      	bne.n	8004e74 <USB_EPStartXfer+0x1f8>
 8004de2:	687c      	ldr	r4, [r7, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	441c      	add	r4, r3
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	4423      	add	r3, r4
 8004df6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004dfa:	461c      	mov	r4, r3
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10e      	bne.n	8004e20 <USB_EPStartXfer+0x1a4>
 8004e02:	8823      	ldrh	r3, [r4, #0]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	8023      	strh	r3, [r4, #0]
 8004e0e:	8823      	ldrh	r3, [r4, #0]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	8023      	strh	r3, [r4, #0]
 8004e1e:	e03d      	b.n	8004e9c <USB_EPStartXfer+0x220>
 8004e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e22:	2b3e      	cmp	r3, #62	; 0x3e
 8004e24:	d810      	bhi.n	8004e48 <USB_EPStartXfer+0x1cc>
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	085b      	lsrs	r3, r3, #1
 8004e2a:	623b      	str	r3, [r7, #32]
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <USB_EPStartXfer+0x1c0>
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	623b      	str	r3, [r7, #32]
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	029b      	lsls	r3, r3, #10
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	8023      	strh	r3, [r4, #0]
 8004e46:	e029      	b.n	8004e9c <USB_EPStartXfer+0x220>
 8004e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4a:	095b      	lsrs	r3, r3, #5
 8004e4c:	623b      	str	r3, [r7, #32]
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	f003 031f 	and.w	r3, r3, #31
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d102      	bne.n	8004e5e <USB_EPStartXfer+0x1e2>
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	623b      	str	r3, [r7, #32]
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	029b      	lsls	r3, r3, #10
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	8023      	strh	r3, [r4, #0]
 8004e72:	e013      	b.n	8004e9c <USB_EPStartXfer+0x220>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d10f      	bne.n	8004e9c <USB_EPStartXfer+0x220>
 8004e7c:	687c      	ldr	r4, [r7, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	441c      	add	r4, r3
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	4423      	add	r3, r4
 8004e90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e94:	461c      	mov	r4, r3
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	891b      	ldrh	r3, [r3, #8]
 8004ea0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	6959      	ldr	r1, [r3, #20]
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 fab4 	bl	800541a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	785b      	ldrb	r3, [r3, #1]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d115      	bne.n	8004ee6 <USB_EPStartXfer+0x26a>
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed0:	b29c      	uxth	r4, r3
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	441a      	add	r2, r3
 8004edc:	4b9a      	ldr	r3, [pc, #616]	; (8005148 <USB_EPStartXfer+0x4cc>)
 8004ede:	4323      	orrs	r3, r4
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	8013      	strh	r3, [r2, #0]
 8004ee4:	e018      	b.n	8004f18 <USB_EPStartXfer+0x29c>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	785b      	ldrb	r3, [r3, #1]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d114      	bne.n	8004f18 <USB_EPStartXfer+0x29c>
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f04:	b29c      	uxth	r4, r3
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	441a      	add	r2, r3
 8004f10:	4b8e      	ldr	r3, [pc, #568]	; (800514c <USB_EPStartXfer+0x4d0>)
 8004f12:	4323      	orrs	r3, r4
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f2e:	b29c      	uxth	r4, r3
 8004f30:	f084 0310 	eor.w	r3, r4, #16
 8004f34:	b29c      	uxth	r4, r3
 8004f36:	f084 0320 	eor.w	r3, r4, #32
 8004f3a:	b29c      	uxth	r4, r3
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	441a      	add	r2, r3
 8004f46:	4b82      	ldr	r3, [pc, #520]	; (8005150 <USB_EPStartXfer+0x4d4>)
 8004f48:	4323      	orrs	r3, r4
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	8013      	strh	r3, [r2, #0]
 8004f4e:	e146      	b.n	80051de <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	699a      	ldr	r2, [r3, #24]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d909      	bls.n	8004f70 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f68:	1ad2      	subs	r2, r2, r3
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	619a      	str	r2, [r3, #24]
 8004f6e:	e005      	b.n	8004f7c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	7b1b      	ldrb	r3, [r3, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d148      	bne.n	8005016 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004f84:	687c      	ldr	r4, [r7, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	441c      	add	r4, r3
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	4423      	add	r3, r4
 8004f98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f9c:	461c      	mov	r4, r3
 8004f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10e      	bne.n	8004fc2 <USB_EPStartXfer+0x346>
 8004fa4:	8823      	ldrh	r3, [r4, #0]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	8023      	strh	r3, [r4, #0]
 8004fb0:	8823      	ldrh	r3, [r4, #0]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	8023      	strh	r3, [r4, #0]
 8004fc0:	e0f2      	b.n	80051a8 <USB_EPStartXfer+0x52c>
 8004fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc4:	2b3e      	cmp	r3, #62	; 0x3e
 8004fc6:	d810      	bhi.n	8004fea <USB_EPStartXfer+0x36e>
 8004fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fca:	085b      	lsrs	r3, r3, #1
 8004fcc:	61fb      	str	r3, [r7, #28]
 8004fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <USB_EPStartXfer+0x362>
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	61fb      	str	r3, [r7, #28]
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	029b      	lsls	r3, r3, #10
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	8023      	strh	r3, [r4, #0]
 8004fe8:	e0de      	b.n	80051a8 <USB_EPStartXfer+0x52c>
 8004fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	61fb      	str	r3, [r7, #28]
 8004ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff2:	f003 031f 	and.w	r3, r3, #31
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d102      	bne.n	8005000 <USB_EPStartXfer+0x384>
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	61fb      	str	r3, [r7, #28]
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	b29b      	uxth	r3, r3
 8005004:	029b      	lsls	r3, r3, #10
 8005006:	b29b      	uxth	r3, r3
 8005008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800500c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005010:	b29b      	uxth	r3, r3
 8005012:	8023      	strh	r3, [r4, #0]
 8005014:	e0c8      	b.n	80051a8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	785b      	ldrb	r3, [r3, #1]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d148      	bne.n	80050b0 <USB_EPStartXfer+0x434>
 800501e:	687c      	ldr	r4, [r7, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005026:	b29b      	uxth	r3, r3
 8005028:	441c      	add	r4, r3
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	4423      	add	r3, r4
 8005032:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005036:	461c      	mov	r4, r3
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10e      	bne.n	800505c <USB_EPStartXfer+0x3e0>
 800503e:	8823      	ldrh	r3, [r4, #0]
 8005040:	b29b      	uxth	r3, r3
 8005042:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005046:	b29b      	uxth	r3, r3
 8005048:	8023      	strh	r3, [r4, #0]
 800504a:	8823      	ldrh	r3, [r4, #0]
 800504c:	b29b      	uxth	r3, r3
 800504e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005056:	b29b      	uxth	r3, r3
 8005058:	8023      	strh	r3, [r4, #0]
 800505a:	e03d      	b.n	80050d8 <USB_EPStartXfer+0x45c>
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	2b3e      	cmp	r3, #62	; 0x3e
 8005060:	d810      	bhi.n	8005084 <USB_EPStartXfer+0x408>
 8005062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005064:	085b      	lsrs	r3, r3, #1
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <USB_EPStartXfer+0x3fc>
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	3301      	adds	r3, #1
 8005076:	61bb      	str	r3, [r7, #24]
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	b29b      	uxth	r3, r3
 800507c:	029b      	lsls	r3, r3, #10
 800507e:	b29b      	uxth	r3, r3
 8005080:	8023      	strh	r3, [r4, #0]
 8005082:	e029      	b.n	80050d8 <USB_EPStartXfer+0x45c>
 8005084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	61bb      	str	r3, [r7, #24]
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	f003 031f 	and.w	r3, r3, #31
 8005090:	2b00      	cmp	r3, #0
 8005092:	d102      	bne.n	800509a <USB_EPStartXfer+0x41e>
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	3b01      	subs	r3, #1
 8005098:	61bb      	str	r3, [r7, #24]
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	b29b      	uxth	r3, r3
 800509e:	029b      	lsls	r3, r3, #10
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	8023      	strh	r3, [r4, #0]
 80050ae:	e013      	b.n	80050d8 <USB_EPStartXfer+0x45c>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	785b      	ldrb	r3, [r3, #1]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d10f      	bne.n	80050d8 <USB_EPStartXfer+0x45c>
 80050b8:	687c      	ldr	r4, [r7, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	441c      	add	r4, r3
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	4423      	add	r3, r4
 80050cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050d0:	461c      	mov	r4, r3
 80050d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	8023      	strh	r3, [r4, #0]
 80050d8:	687c      	ldr	r4, [r7, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	785b      	ldrb	r3, [r3, #1]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d14e      	bne.n	8005180 <USB_EPStartXfer+0x504>
 80050e2:	687c      	ldr	r4, [r7, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	441c      	add	r4, r3
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	4423      	add	r3, r4
 80050f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050fa:	461c      	mov	r4, r3
 80050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10e      	bne.n	8005120 <USB_EPStartXfer+0x4a4>
 8005102:	8823      	ldrh	r3, [r4, #0]
 8005104:	b29b      	uxth	r3, r3
 8005106:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800510a:	b29b      	uxth	r3, r3
 800510c:	8023      	strh	r3, [r4, #0]
 800510e:	8823      	ldrh	r3, [r4, #0]
 8005110:	b29b      	uxth	r3, r3
 8005112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800511a:	b29b      	uxth	r3, r3
 800511c:	8023      	strh	r3, [r4, #0]
 800511e:	e043      	b.n	80051a8 <USB_EPStartXfer+0x52c>
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	2b3e      	cmp	r3, #62	; 0x3e
 8005124:	d816      	bhi.n	8005154 <USB_EPStartXfer+0x4d8>
 8005126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005128:	085b      	lsrs	r3, r3, #1
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d002      	beq.n	800513c <USB_EPStartXfer+0x4c0>
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	3301      	adds	r3, #1
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	b29b      	uxth	r3, r3
 8005140:	029b      	lsls	r3, r3, #10
 8005142:	b29b      	uxth	r3, r3
 8005144:	8023      	strh	r3, [r4, #0]
 8005146:	e02f      	b.n	80051a8 <USB_EPStartXfer+0x52c>
 8005148:	ffff80c0 	.word	0xffff80c0
 800514c:	ffffc080 	.word	0xffffc080
 8005150:	ffff8080 	.word	0xffff8080
 8005154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	f003 031f 	and.w	r3, r3, #31
 8005160:	2b00      	cmp	r3, #0
 8005162:	d102      	bne.n	800516a <USB_EPStartXfer+0x4ee>
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	3b01      	subs	r3, #1
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	b29b      	uxth	r3, r3
 800516e:	029b      	lsls	r3, r3, #10
 8005170:	b29b      	uxth	r3, r3
 8005172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800517a:	b29b      	uxth	r3, r3
 800517c:	8023      	strh	r3, [r4, #0]
 800517e:	e013      	b.n	80051a8 <USB_EPStartXfer+0x52c>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	785b      	ldrb	r3, [r3, #1]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d10f      	bne.n	80051a8 <USB_EPStartXfer+0x52c>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800518e:	b29b      	uxth	r3, r3
 8005190:	441c      	add	r4, r3
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	4423      	add	r3, r4
 800519a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051be:	b29c      	uxth	r4, r3
 80051c0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80051c4:	b29c      	uxth	r4, r3
 80051c6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80051ca:	b29c      	uxth	r4, r3
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	441a      	add	r2, r3
 80051d6:	4b04      	ldr	r3, [pc, #16]	; (80051e8 <USB_EPStartXfer+0x56c>)
 80051d8:	4323      	orrs	r3, r4
 80051da:	b29b      	uxth	r3, r3
 80051dc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3734      	adds	r7, #52	; 0x34
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd90      	pop	{r4, r7, pc}
 80051e8:	ffff8080 	.word	0xffff8080

080051ec <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051ec:	b490      	push	{r4, r7}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	785b      	ldrb	r3, [r3, #1]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d018      	beq.n	8005230 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	b29b      	uxth	r3, r3
 800520c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005214:	b29c      	uxth	r4, r3
 8005216:	f084 0310 	eor.w	r3, r4, #16
 800521a:	b29c      	uxth	r4, r3
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	441a      	add	r2, r3
 8005226:	4b11      	ldr	r3, [pc, #68]	; (800526c <USB_EPSetStall+0x80>)
 8005228:	4323      	orrs	r3, r4
 800522a:	b29b      	uxth	r3, r3
 800522c:	8013      	strh	r3, [r2, #0]
 800522e:	e017      	b.n	8005260 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	b29b      	uxth	r3, r3
 800523e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005246:	b29c      	uxth	r4, r3
 8005248:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800524c:	b29c      	uxth	r4, r3
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	441a      	add	r2, r3
 8005258:	4b04      	ldr	r3, [pc, #16]	; (800526c <USB_EPSetStall+0x80>)
 800525a:	4323      	orrs	r3, r4
 800525c:	b29b      	uxth	r3, r3
 800525e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bc90      	pop	{r4, r7}
 800526a:	4770      	bx	lr
 800526c:	ffff8080 	.word	0xffff8080

08005270 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005270:	b490      	push	{r4, r7}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	7b1b      	ldrb	r3, [r3, #12]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d17d      	bne.n	800537e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	785b      	ldrb	r3, [r3, #1]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d03d      	beq.n	8005306 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	b29c      	uxth	r4, r3
 8005298:	4623      	mov	r3, r4
 800529a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d014      	beq.n	80052cc <USB_EPClearStall+0x5c>
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b8:	b29c      	uxth	r4, r3
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	441a      	add	r2, r3
 80052c4:	4b31      	ldr	r3, [pc, #196]	; (800538c <USB_EPClearStall+0x11c>)
 80052c6:	4323      	orrs	r3, r4
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	78db      	ldrb	r3, [r3, #3]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d054      	beq.n	800537e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ea:	b29c      	uxth	r4, r3
 80052ec:	f084 0320 	eor.w	r3, r4, #32
 80052f0:	b29c      	uxth	r4, r3
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	441a      	add	r2, r3
 80052fc:	4b24      	ldr	r3, [pc, #144]	; (8005390 <USB_EPClearStall+0x120>)
 80052fe:	4323      	orrs	r3, r4
 8005300:	b29b      	uxth	r3, r3
 8005302:	8013      	strh	r3, [r2, #0]
 8005304:	e03b      	b.n	800537e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	b29c      	uxth	r4, r3
 8005314:	4623      	mov	r3, r4
 8005316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d014      	beq.n	8005348 <USB_EPClearStall+0xd8>
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	b29b      	uxth	r3, r3
 800532c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005334:	b29c      	uxth	r4, r3
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	441a      	add	r2, r3
 8005340:	4b14      	ldr	r3, [pc, #80]	; (8005394 <USB_EPClearStall+0x124>)
 8005342:	4323      	orrs	r3, r4
 8005344:	b29b      	uxth	r3, r3
 8005346:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800535a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535e:	b29c      	uxth	r4, r3
 8005360:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005364:	b29c      	uxth	r4, r3
 8005366:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800536a:	b29c      	uxth	r4, r3
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	441a      	add	r2, r3
 8005376:	4b06      	ldr	r3, [pc, #24]	; (8005390 <USB_EPClearStall+0x120>)
 8005378:	4323      	orrs	r3, r4
 800537a:	b29b      	uxth	r3, r3
 800537c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bc90      	pop	{r4, r7}
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	ffff80c0 	.word	0xffff80c0
 8005390:	ffff8080 	.word	0xffff8080
 8005394:	ffffc080 	.word	0xffffc080

08005398 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	460b      	mov	r3, r1
 80053a2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d103      	bne.n	80053b2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2280      	movs	r2, #128	; 0x80
 80053ae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr

080053be <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr

080053d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr

080053e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b085      	sub	sp, #20
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80053f8:	68fb      	ldr	r3, [r7, #12]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	bc80      	pop	{r7}
 8005402:	4770      	bx	lr

08005404 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	bc80      	pop	{r7}
 8005418:	4770      	bx	lr

0800541a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800541a:	b480      	push	{r7}
 800541c:	b08d      	sub	sp, #52	; 0x34
 800541e:	af00      	add	r7, sp, #0
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	4611      	mov	r1, r2
 8005426:	461a      	mov	r2, r3
 8005428:	460b      	mov	r3, r1
 800542a:	80fb      	strh	r3, [r7, #6]
 800542c:	4613      	mov	r3, r2
 800542e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005430:	88bb      	ldrh	r3, [r7, #4]
 8005432:	3301      	adds	r3, #1
 8005434:	085b      	lsrs	r3, r3, #1
 8005436:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005440:	88fb      	ldrh	r3, [r7, #6]
 8005442:	005a      	lsls	r2, r3, #1
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800544c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005452:	e01e      	b.n	8005492 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	3301      	adds	r3, #1
 800545e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	b29b      	uxth	r3, r3
 8005466:	021b      	lsls	r3, r3, #8
 8005468:	b29b      	uxth	r3, r3
 800546a:	461a      	mov	r2, r3
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	b29a      	uxth	r2, r3
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800547a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547c:	3302      	adds	r3, #2
 800547e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005482:	3302      	adds	r3, #2
 8005484:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	3301      	adds	r3, #1
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800548c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548e:	3b01      	subs	r3, #1
 8005490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1dd      	bne.n	8005454 <USB_WritePMA+0x3a>
  }
}
 8005498:	bf00      	nop
 800549a:	3734      	adds	r7, #52	; 0x34
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b08b      	sub	sp, #44	; 0x2c
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	4611      	mov	r1, r2
 80054ae:	461a      	mov	r2, r3
 80054b0:	460b      	mov	r3, r1
 80054b2:	80fb      	strh	r3, [r7, #6]
 80054b4:	4613      	mov	r3, r2
 80054b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80054b8:	88bb      	ldrh	r3, [r7, #4]
 80054ba:	085b      	lsrs	r3, r3, #1
 80054bc:	b29b      	uxth	r3, r3
 80054be:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80054c8:	88fb      	ldrh	r3, [r7, #6]
 80054ca:	005a      	lsls	r2, r3, #1
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054d4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
 80054da:	e01b      	b.n	8005514 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	3302      	adds	r3, #2
 80054e8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	3301      	adds	r3, #1
 80054f6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	0a1b      	lsrs	r3, r3, #8
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	3301      	adds	r3, #1
 8005506:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	3302      	adds	r3, #2
 800550c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	3b01      	subs	r3, #1
 8005512:	627b      	str	r3, [r7, #36]	; 0x24
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e0      	bne.n	80054dc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800551a:	88bb      	ldrh	r3, [r7, #4]
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d007      	beq.n	8005536 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	b29b      	uxth	r3, r3
 800552c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	b2da      	uxtb	r2, r3
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	701a      	strb	r2, [r3, #0]
  }
}
 8005536:	bf00      	nop
 8005538:	372c      	adds	r7, #44	; 0x2c
 800553a:	46bd      	mov	sp, r7
 800553c:	bc80      	pop	{r7}
 800553e:	4770      	bx	lr

08005540 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	7c1b      	ldrb	r3, [r3, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d115      	bne.n	8005584 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800555c:	2202      	movs	r2, #2
 800555e:	2181      	movs	r1, #129	; 0x81
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f002 ffd4 	bl	800850e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800556c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005570:	2202      	movs	r2, #2
 8005572:	2101      	movs	r1, #1
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f002 ffca 	bl	800850e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005582:	e012      	b.n	80055aa <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005584:	2340      	movs	r3, #64	; 0x40
 8005586:	2202      	movs	r2, #2
 8005588:	2181      	movs	r1, #129	; 0x81
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f002 ffbf 	bl	800850e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005596:	2340      	movs	r3, #64	; 0x40
 8005598:	2202      	movs	r2, #2
 800559a:	2101      	movs	r1, #1
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f002 ffb6 	bl	800850e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80055aa:	2308      	movs	r3, #8
 80055ac:	2203      	movs	r2, #3
 80055ae:	2182      	movs	r1, #130	; 0x82
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f002 ffac 	bl	800850e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80055bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80055c0:	f003 f8c6 	bl	8008750 <USBD_static_malloc>
 80055c4:	4602      	mov	r2, r0
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d102      	bne.n	80055dc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80055d6:	2301      	movs	r3, #1
 80055d8:	73fb      	strb	r3, [r7, #15]
 80055da:	e026      	b.n	800562a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	7c1b      	ldrb	r3, [r3, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800560c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005610:	2101      	movs	r1, #1
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f003 f865 	bl	80086e2 <USBD_LL_PrepareReceive>
 8005618:	e007      	b.n	800562a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005620:	2340      	movs	r3, #64	; 0x40
 8005622:	2101      	movs	r1, #1
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f003 f85c 	bl	80086e2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800562a:	7bfb      	ldrb	r3, [r7, #15]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005644:	2181      	movs	r1, #129	; 0x81
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f002 ff87 	bl	800855a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005652:	2101      	movs	r1, #1
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f002 ff80 	bl	800855a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005662:	2182      	movs	r1, #130	; 0x82
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f002 ff78 	bl	800855a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00e      	beq.n	8005698 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800568a:	4618      	mov	r0, r3
 800568c:	f003 f86c 	bl	8008768 <USBD_static_free>
    pdev->pClassData = NULL;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b086      	sub	sp, #24
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056b2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80056bc:	2300      	movs	r3, #0
 80056be:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d039      	beq.n	8005740 <USBD_CDC_Setup+0x9e>
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	d17c      	bne.n	80057ca <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	88db      	ldrh	r3, [r3, #6]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d029      	beq.n	800572c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	b25b      	sxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	da11      	bge.n	8005706 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80056ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	88d2      	ldrh	r2, [r2, #6]
 80056f4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80056f6:	6939      	ldr	r1, [r7, #16]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	88db      	ldrh	r3, [r3, #6]
 80056fc:	461a      	mov	r2, r3
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f001 f9c6 	bl	8006a90 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005704:	e068      	b.n	80057d8 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	785a      	ldrb	r2, [r3, #1]
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	88db      	ldrh	r3, [r3, #6]
 8005714:	b2da      	uxtb	r2, r3
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800571c:	6939      	ldr	r1, [r7, #16]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	88db      	ldrh	r3, [r3, #6]
 8005722:	461a      	mov	r2, r3
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f001 f9e1 	bl	8006aec <USBD_CtlPrepareRx>
      break;
 800572a:	e055      	b.n	80057d8 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	7850      	ldrb	r0, [r2, #1]
 8005738:	2200      	movs	r2, #0
 800573a:	6839      	ldr	r1, [r7, #0]
 800573c:	4798      	blx	r3
      break;
 800573e:	e04b      	b.n	80057d8 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	785b      	ldrb	r3, [r3, #1]
 8005744:	2b0a      	cmp	r3, #10
 8005746:	d017      	beq.n	8005778 <USBD_CDC_Setup+0xd6>
 8005748:	2b0b      	cmp	r3, #11
 800574a:	d029      	beq.n	80057a0 <USBD_CDC_Setup+0xfe>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d133      	bne.n	80057b8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005756:	2b03      	cmp	r3, #3
 8005758:	d107      	bne.n	800576a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800575a:	f107 030c 	add.w	r3, r7, #12
 800575e:	2202      	movs	r2, #2
 8005760:	4619      	mov	r1, r3
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f001 f994 	bl	8006a90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005768:	e02e      	b.n	80057c8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800576a:	6839      	ldr	r1, [r7, #0]
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f001 f925 	bl	80069bc <USBD_CtlError>
            ret = USBD_FAIL;
 8005772:	2302      	movs	r3, #2
 8005774:	75fb      	strb	r3, [r7, #23]
          break;
 8005776:	e027      	b.n	80057c8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800577e:	2b03      	cmp	r3, #3
 8005780:	d107      	bne.n	8005792 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005782:	f107 030f 	add.w	r3, r7, #15
 8005786:	2201      	movs	r2, #1
 8005788:	4619      	mov	r1, r3
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f001 f980 	bl	8006a90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005790:	e01a      	b.n	80057c8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005792:	6839      	ldr	r1, [r7, #0]
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f001 f911 	bl	80069bc <USBD_CtlError>
            ret = USBD_FAIL;
 800579a:	2302      	movs	r3, #2
 800579c:	75fb      	strb	r3, [r7, #23]
          break;
 800579e:	e013      	b.n	80057c8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057a6:	2b03      	cmp	r3, #3
 80057a8:	d00d      	beq.n	80057c6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80057aa:	6839      	ldr	r1, [r7, #0]
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f001 f905 	bl	80069bc <USBD_CtlError>
            ret = USBD_FAIL;
 80057b2:	2302      	movs	r3, #2
 80057b4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80057b6:	e006      	b.n	80057c6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80057b8:	6839      	ldr	r1, [r7, #0]
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f001 f8fe 	bl	80069bc <USBD_CtlError>
          ret = USBD_FAIL;
 80057c0:	2302      	movs	r3, #2
 80057c2:	75fb      	strb	r3, [r7, #23]
          break;
 80057c4:	e000      	b.n	80057c8 <USBD_CDC_Setup+0x126>
          break;
 80057c6:	bf00      	nop
      }
      break;
 80057c8:	e006      	b.n	80057d8 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80057ca:	6839      	ldr	r1, [r7, #0]
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f001 f8f5 	bl	80069bc <USBD_CtlError>
      ret = USBD_FAIL;
 80057d2:	2302      	movs	r3, #2
 80057d4:	75fb      	strb	r3, [r7, #23]
      break;
 80057d6:	bf00      	nop
  }

  return ret;
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	460b      	mov	r3, r1
 80057ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057fc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005804:	2b00      	cmp	r3, #0
 8005806:	d037      	beq.n	8005878 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005808:	78fa      	ldrb	r2, [r7, #3]
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	4613      	mov	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	331c      	adds	r3, #28
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d026      	beq.n	800586c <USBD_CDC_DataIn+0x8a>
 800581e:	78fa      	ldrb	r2, [r7, #3]
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	440b      	add	r3, r1
 800582c:	331c      	adds	r3, #28
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	78fa      	ldrb	r2, [r7, #3]
 8005832:	68b9      	ldr	r1, [r7, #8]
 8005834:	0152      	lsls	r2, r2, #5
 8005836:	440a      	add	r2, r1
 8005838:	3238      	adds	r2, #56	; 0x38
 800583a:	6812      	ldr	r2, [r2, #0]
 800583c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005840:	fb02 f201 	mul.w	r2, r2, r1
 8005844:	1a9b      	subs	r3, r3, r2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d110      	bne.n	800586c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800584a:	78fa      	ldrb	r2, [r7, #3]
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	440b      	add	r3, r1
 8005858:	331c      	adds	r3, #28
 800585a:	2200      	movs	r2, #0
 800585c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800585e:	78f9      	ldrb	r1, [r7, #3]
 8005860:	2300      	movs	r3, #0
 8005862:	2200      	movs	r2, #0
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f002 ff19 	bl	800869c <USBD_LL_Transmit>
 800586a:	e003      	b.n	8005874 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	e000      	b.n	800587a <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8005878:	2302      	movs	r3, #2
  }
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	460b      	mov	r3, r1
 800588c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005894:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005896:	78fb      	ldrb	r3, [r7, #3]
 8005898:	4619      	mov	r1, r3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f002 ff44 	bl	8008728 <USBD_LL_GetRxDataSize>
 80058a0:	4602      	mov	r2, r0
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00d      	beq.n	80058ce <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80058c6:	4611      	mov	r1, r2
 80058c8:	4798      	blx	r3

    return USBD_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	e000      	b.n	80058d0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80058ce:	2302      	movs	r3, #2
  }
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d015      	beq.n	800591e <USBD_CDC_EP0_RxReady+0x46>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80058f8:	2bff      	cmp	r3, #255	; 0xff
 80058fa:	d010      	beq.n	800591e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800590a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005912:	b292      	uxth	r2, r2
 8005914:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	22ff      	movs	r2, #255	; 0xff
 800591a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2243      	movs	r2, #67	; 0x43
 8005934:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005936:	4b03      	ldr	r3, [pc, #12]	; (8005944 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	bc80      	pop	{r7}
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	20000094 	.word	0x20000094

08005948 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2243      	movs	r2, #67	; 0x43
 8005954:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005956:	4b03      	ldr	r3, [pc, #12]	; (8005964 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005958:	4618      	mov	r0, r3
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	20000050 	.word	0x20000050

08005968 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2243      	movs	r2, #67	; 0x43
 8005974:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005976:	4b03      	ldr	r3, [pc, #12]	; (8005984 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005978:	4618      	mov	r0, r3
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	bc80      	pop	{r7}
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	200000d8 	.word	0x200000d8

08005988 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	220a      	movs	r2, #10
 8005994:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005996:	4b03      	ldr	r3, [pc, #12]	; (80059a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005998:	4618      	mov	r0, r3
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	bc80      	pop	{r7}
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	2000000c 	.word	0x2000000c

080059a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80059b2:	2302      	movs	r3, #2
 80059b4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr

080059d4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	4613      	mov	r3, r2
 80059e0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059e8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80059f2:	88fa      	ldrh	r2, [r7, #6]
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	371c      	adds	r7, #28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bc80      	pop	{r7}
 8005a04:	4770      	bx	lr

08005a06 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b085      	sub	sp, #20
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a16:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr

08005a2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d017      	beq.n	8005a76 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	7c1b      	ldrb	r3, [r3, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d109      	bne.n	8005a62 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a58:	2101      	movs	r1, #1
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f002 fe41 	bl	80086e2 <USBD_LL_PrepareReceive>
 8005a60:	e007      	b.n	8005a72 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a68:	2340      	movs	r3, #64	; 0x40
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f002 fe38 	bl	80086e2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005a72:	2300      	movs	r3, #0
 8005a74:	e000      	b.n	8005a78 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005a76:	2302      	movs	r3, #2
  }
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005a94:	2302      	movs	r3, #2
 8005a96:	e01a      	b.n	8005ace <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	79fa      	ldrb	r2, [r7, #7]
 8005ac4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f002 fcac 	bl	8008424 <USBD_LL_Init>

  return USBD_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b085      	sub	sp, #20
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d006      	beq.n	8005af8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005af2:	2300      	movs	r3, #0
 8005af4:	73fb      	strb	r3, [r7, #15]
 8005af6:	e001      	b.n	8005afc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005af8:	2302      	movs	r3, #2
 8005afa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc80      	pop	{r7}
 8005b06:	4770      	bx	lr

08005b08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f002 fce1 	bl	80084d8 <USBD_LL_Start>

  return USBD_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bc80      	pop	{r7}
 8005b32:	4770      	bx	lr

08005b34 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005b40:	2302      	movs	r3, #2
 8005b42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00c      	beq.n	8005b68 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	78fa      	ldrb	r2, [r7, #3]
 8005b58:	4611      	mov	r1, r2
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	4798      	blx	r3
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b082      	sub	sp, #8
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	78fa      	ldrb	r2, [r7, #3]
 8005b88:	4611      	mov	r1, r2
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	4798      	blx	r3

  return USBD_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ba8:	6839      	ldr	r1, [r7, #0]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 feca 	bl	8006944 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005bcc:	f003 031f 	and.w	r3, r3, #31
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d00c      	beq.n	8005bee <USBD_LL_SetupStage+0x56>
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d302      	bcc.n	8005bde <USBD_LL_SetupStage+0x46>
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d010      	beq.n	8005bfe <USBD_LL_SetupStage+0x66>
 8005bdc:	e017      	b.n	8005c0e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005be4:	4619      	mov	r1, r3
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f9ca 	bl	8005f80 <USBD_StdDevReq>
      break;
 8005bec:	e01a      	b.n	8005c24 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fa2c 	bl	8006054 <USBD_StdItfReq>
      break;
 8005bfc:	e012      	b.n	8005c24 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005c04:	4619      	mov	r1, r3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fa6a 	bl	80060e0 <USBD_StdEPReq>
      break;
 8005c0c:	e00a      	b.n	8005c24 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f002 fcbb 	bl	8008598 <USBD_LL_StallEP>
      break;
 8005c22:	bf00      	nop
  }

  return USBD_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b086      	sub	sp, #24
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	60f8      	str	r0, [r7, #12]
 8005c36:	460b      	mov	r3, r1
 8005c38:	607a      	str	r2, [r7, #4]
 8005c3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005c3c:	7afb      	ldrb	r3, [r7, #11]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d14b      	bne.n	8005cda <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005c48:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d134      	bne.n	8005cbe <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d919      	bls.n	8005c94 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	1ad2      	subs	r2, r2, r3
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d203      	bcs.n	8005c82 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	e002      	b.n	8005c88 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	461a      	mov	r2, r3
 8005c8a:	6879      	ldr	r1, [r7, #4]
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 ff4b 	bl	8006b28 <USBD_CtlContinueRx>
 8005c92:	e038      	b.n	8005d06 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00a      	beq.n	8005cb6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	d105      	bne.n	8005cb6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 ff48 	bl	8006b4c <USBD_CtlSendStatus>
 8005cbc:	e023      	b.n	8005d06 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005cc4:	2b05      	cmp	r3, #5
 8005cc6:	d11e      	bne.n	8005d06 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f002 fc60 	bl	8008598 <USBD_LL_StallEP>
 8005cd8:	e015      	b.n	8005d06 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00d      	beq.n	8005d02 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d108      	bne.n	8005d02 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	7afa      	ldrb	r2, [r7, #11]
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	4798      	blx	r3
 8005d00:	e001      	b.n	8005d06 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005d02:	2302      	movs	r3, #2
 8005d04:	e000      	b.n	8005d08 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005d1e:	7afb      	ldrb	r3, [r7, #11]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d17f      	bne.n	8005e24 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	3314      	adds	r3, #20
 8005d28:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d15c      	bne.n	8005dee <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	68da      	ldr	r2, [r3, #12]
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d915      	bls.n	8005d6c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	68da      	ldr	r2, [r3, #12]
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	1ad2      	subs	r2, r2, r3
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	6879      	ldr	r1, [r7, #4]
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 feb5 	bl	8006ac8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d5e:	2300      	movs	r3, #0
 8005d60:	2200      	movs	r2, #0
 8005d62:	2100      	movs	r1, #0
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f002 fcbc 	bl	80086e2 <USBD_LL_PrepareReceive>
 8005d6a:	e04e      	b.n	8005e0a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	6912      	ldr	r2, [r2, #16]
 8005d74:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d78:	fb02 f201 	mul.w	r2, r2, r1
 8005d7c:	1a9b      	subs	r3, r3, r2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d11c      	bne.n	8005dbc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d316      	bcc.n	8005dbc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d20f      	bcs.n	8005dbc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	2100      	movs	r1, #0
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 fe91 	bl	8006ac8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005dae:	2300      	movs	r3, #0
 8005db0:	2200      	movs	r2, #0
 8005db2:	2100      	movs	r1, #0
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f002 fc94 	bl	80086e2 <USBD_LL_PrepareReceive>
 8005dba:	e026      	b.n	8005e0a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d105      	bne.n	8005dde <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005dde:	2180      	movs	r1, #128	; 0x80
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f002 fbd9 	bl	8008598 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 fec3 	bl	8006b72 <USBD_CtlReceiveStatus>
 8005dec:	e00d      	b.n	8005e0a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d004      	beq.n	8005e02 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d103      	bne.n	8005e0a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005e02:	2180      	movs	r1, #128	; 0x80
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f002 fbc7 	bl	8008598 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d11d      	bne.n	8005e50 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7ff fe83 	bl	8005b20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005e22:	e015      	b.n	8005e50 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00d      	beq.n	8005e4c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	d108      	bne.n	8005e4c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	7afa      	ldrb	r2, [r7, #11]
 8005e44:	4611      	mov	r1, r2
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	4798      	blx	r3
 8005e4a:	e001      	b.n	8005e50 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e000      	b.n	8005e52 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b082      	sub	sp, #8
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e62:	2340      	movs	r3, #64	; 0x40
 8005e64:	2200      	movs	r2, #0
 8005e66:	2100      	movs	r1, #0
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f002 fb50 	bl	800850e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2240      	movs	r2, #64	; 0x40
 8005e7a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e7e:	2340      	movs	r3, #64	; 0x40
 8005e80:	2200      	movs	r2, #0
 8005e82:	2180      	movs	r1, #128	; 0x80
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f002 fb42 	bl	800850e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2240      	movs	r2, #64	; 0x40
 8005e94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d009      	beq.n	8005ed2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6852      	ldr	r2, [r2, #4]
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	4611      	mov	r1, r2
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	4798      	blx	r3
  }

  return USBD_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	78fa      	ldrb	r2, [r7, #3]
 8005eec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bc80      	pop	{r7}
 8005ef8:	4770      	bx	lr

08005efa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2204      	movs	r2, #4
 8005f12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bc80      	pop	{r7}
 8005f20:	4770      	bx	lr

08005f22 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d105      	bne.n	8005f40 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bc80      	pop	{r7}
 8005f4a:	4770      	bx	lr

08005f4c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d10b      	bne.n	8005f76 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d005      	beq.n	8005f76 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d004      	beq.n	8005fa4 <USBD_StdDevReq+0x24>
 8005f9a:	2b40      	cmp	r3, #64	; 0x40
 8005f9c:	d002      	beq.n	8005fa4 <USBD_StdDevReq+0x24>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d008      	beq.n	8005fb4 <USBD_StdDevReq+0x34>
 8005fa2:	e04c      	b.n	800603e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	4798      	blx	r3
      break;
 8005fb2:	e049      	b.n	8006048 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	785b      	ldrb	r3, [r3, #1]
 8005fb8:	2b09      	cmp	r3, #9
 8005fba:	d83a      	bhi.n	8006032 <USBD_StdDevReq+0xb2>
 8005fbc:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <USBD_StdDevReq+0x44>)
 8005fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc2:	bf00      	nop
 8005fc4:	08006015 	.word	0x08006015
 8005fc8:	08006029 	.word	0x08006029
 8005fcc:	08006033 	.word	0x08006033
 8005fd0:	0800601f 	.word	0x0800601f
 8005fd4:	08006033 	.word	0x08006033
 8005fd8:	08005ff7 	.word	0x08005ff7
 8005fdc:	08005fed 	.word	0x08005fed
 8005fe0:	08006033 	.word	0x08006033
 8005fe4:	0800600b 	.word	0x0800600b
 8005fe8:	08006001 	.word	0x08006001
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f9d4 	bl	800639c <USBD_GetDescriptor>
          break;
 8005ff4:	e022      	b.n	800603c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fb37 	bl	800666c <USBD_SetAddress>
          break;
 8005ffe:	e01d      	b.n	800603c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fb74 	bl	80066f0 <USBD_SetConfig>
          break;
 8006008:	e018      	b.n	800603c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800600a:	6839      	ldr	r1, [r7, #0]
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fbfd 	bl	800680c <USBD_GetConfig>
          break;
 8006012:	e013      	b.n	800603c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006014:	6839      	ldr	r1, [r7, #0]
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 fc2c 	bl	8006874 <USBD_GetStatus>
          break;
 800601c:	e00e      	b.n	800603c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800601e:	6839      	ldr	r1, [r7, #0]
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fc5a 	bl	80068da <USBD_SetFeature>
          break;
 8006026:	e009      	b.n	800603c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006028:	6839      	ldr	r1, [r7, #0]
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fc69 	bl	8006902 <USBD_ClrFeature>
          break;
 8006030:	e004      	b.n	800603c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006032:	6839      	ldr	r1, [r7, #0]
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fcc1 	bl	80069bc <USBD_CtlError>
          break;
 800603a:	bf00      	nop
      }
      break;
 800603c:	e004      	b.n	8006048 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800603e:	6839      	ldr	r1, [r7, #0]
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fcbb 	bl	80069bc <USBD_CtlError>
      break;
 8006046:	bf00      	nop
  }

  return ret;
 8006048:	7bfb      	ldrb	r3, [r7, #15]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop

08006054 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800606a:	2b20      	cmp	r3, #32
 800606c:	d003      	beq.n	8006076 <USBD_StdItfReq+0x22>
 800606e:	2b40      	cmp	r3, #64	; 0x40
 8006070:	d001      	beq.n	8006076 <USBD_StdItfReq+0x22>
 8006072:	2b00      	cmp	r3, #0
 8006074:	d12a      	bne.n	80060cc <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800607c:	3b01      	subs	r3, #1
 800607e:	2b02      	cmp	r3, #2
 8006080:	d81d      	bhi.n	80060be <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	889b      	ldrh	r3, [r3, #4]
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b01      	cmp	r3, #1
 800608a:	d813      	bhi.n	80060b4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	6839      	ldr	r1, [r7, #0]
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	4798      	blx	r3
 800609a:	4603      	mov	r3, r0
 800609c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	88db      	ldrh	r3, [r3, #6]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d110      	bne.n	80060c8 <USBD_StdItfReq+0x74>
 80060a6:	7bfb      	ldrb	r3, [r7, #15]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10d      	bne.n	80060c8 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fd4d 	bl	8006b4c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80060b2:	e009      	b.n	80060c8 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80060b4:	6839      	ldr	r1, [r7, #0]
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fc80 	bl	80069bc <USBD_CtlError>
          break;
 80060bc:	e004      	b.n	80060c8 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80060be:	6839      	ldr	r1, [r7, #0]
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fc7b 	bl	80069bc <USBD_CtlError>
          break;
 80060c6:	e000      	b.n	80060ca <USBD_StdItfReq+0x76>
          break;
 80060c8:	bf00      	nop
      }
      break;
 80060ca:	e004      	b.n	80060d6 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80060cc:	6839      	ldr	r1, [r7, #0]
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fc74 	bl	80069bc <USBD_CtlError>
      break;
 80060d4:	bf00      	nop
  }

  return USBD_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	889b      	ldrh	r3, [r3, #4]
 80060f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060fc:	2b20      	cmp	r3, #32
 80060fe:	d004      	beq.n	800610a <USBD_StdEPReq+0x2a>
 8006100:	2b40      	cmp	r3, #64	; 0x40
 8006102:	d002      	beq.n	800610a <USBD_StdEPReq+0x2a>
 8006104:	2b00      	cmp	r3, #0
 8006106:	d008      	beq.n	800611a <USBD_StdEPReq+0x3a>
 8006108:	e13d      	b.n	8006386 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	4798      	blx	r3
      break;
 8006118:	e13a      	b.n	8006390 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006122:	2b20      	cmp	r3, #32
 8006124:	d10a      	bne.n	800613c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	4798      	blx	r3
 8006134:	4603      	mov	r3, r0
 8006136:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006138:	7bfb      	ldrb	r3, [r7, #15]
 800613a:	e12a      	b.n	8006392 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	785b      	ldrb	r3, [r3, #1]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d03e      	beq.n	80061c2 <USBD_StdEPReq+0xe2>
 8006144:	2b03      	cmp	r3, #3
 8006146:	d002      	beq.n	800614e <USBD_StdEPReq+0x6e>
 8006148:	2b00      	cmp	r3, #0
 800614a:	d070      	beq.n	800622e <USBD_StdEPReq+0x14e>
 800614c:	e115      	b.n	800637a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006154:	2b02      	cmp	r3, #2
 8006156:	d002      	beq.n	800615e <USBD_StdEPReq+0x7e>
 8006158:	2b03      	cmp	r3, #3
 800615a:	d015      	beq.n	8006188 <USBD_StdEPReq+0xa8>
 800615c:	e02b      	b.n	80061b6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800615e:	7bbb      	ldrb	r3, [r7, #14]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00c      	beq.n	800617e <USBD_StdEPReq+0x9e>
 8006164:	7bbb      	ldrb	r3, [r7, #14]
 8006166:	2b80      	cmp	r3, #128	; 0x80
 8006168:	d009      	beq.n	800617e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800616a:	7bbb      	ldrb	r3, [r7, #14]
 800616c:	4619      	mov	r1, r3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f002 fa12 	bl	8008598 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006174:	2180      	movs	r1, #128	; 0x80
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f002 fa0e 	bl	8008598 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800617c:	e020      	b.n	80061c0 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800617e:	6839      	ldr	r1, [r7, #0]
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fc1b 	bl	80069bc <USBD_CtlError>
              break;
 8006186:	e01b      	b.n	80061c0 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	885b      	ldrh	r3, [r3, #2]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10e      	bne.n	80061ae <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006190:	7bbb      	ldrb	r3, [r7, #14]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00b      	beq.n	80061ae <USBD_StdEPReq+0xce>
 8006196:	7bbb      	ldrb	r3, [r7, #14]
 8006198:	2b80      	cmp	r3, #128	; 0x80
 800619a:	d008      	beq.n	80061ae <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	88db      	ldrh	r3, [r3, #6]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d104      	bne.n	80061ae <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80061a4:	7bbb      	ldrb	r3, [r7, #14]
 80061a6:	4619      	mov	r1, r3
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f002 f9f5 	bl	8008598 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fccc 	bl	8006b4c <USBD_CtlSendStatus>

              break;
 80061b4:	e004      	b.n	80061c0 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80061b6:	6839      	ldr	r1, [r7, #0]
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 fbff 	bl	80069bc <USBD_CtlError>
              break;
 80061be:	bf00      	nop
          }
          break;
 80061c0:	e0e0      	b.n	8006384 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d002      	beq.n	80061d2 <USBD_StdEPReq+0xf2>
 80061cc:	2b03      	cmp	r3, #3
 80061ce:	d015      	beq.n	80061fc <USBD_StdEPReq+0x11c>
 80061d0:	e026      	b.n	8006220 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061d2:	7bbb      	ldrb	r3, [r7, #14]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00c      	beq.n	80061f2 <USBD_StdEPReq+0x112>
 80061d8:	7bbb      	ldrb	r3, [r7, #14]
 80061da:	2b80      	cmp	r3, #128	; 0x80
 80061dc:	d009      	beq.n	80061f2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80061de:	7bbb      	ldrb	r3, [r7, #14]
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f002 f9d8 	bl	8008598 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80061e8:	2180      	movs	r1, #128	; 0x80
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f002 f9d4 	bl	8008598 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061f0:	e01c      	b.n	800622c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fbe1 	bl	80069bc <USBD_CtlError>
              break;
 80061fa:	e017      	b.n	800622c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	885b      	ldrh	r3, [r3, #2]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d112      	bne.n	800622a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006204:	7bbb      	ldrb	r3, [r7, #14]
 8006206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800620a:	2b00      	cmp	r3, #0
 800620c:	d004      	beq.n	8006218 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800620e:	7bbb      	ldrb	r3, [r7, #14]
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f002 f9df 	bl	80085d6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fc97 	bl	8006b4c <USBD_CtlSendStatus>
              }
              break;
 800621e:	e004      	b.n	800622a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fbca 	bl	80069bc <USBD_CtlError>
              break;
 8006228:	e000      	b.n	800622c <USBD_StdEPReq+0x14c>
              break;
 800622a:	bf00      	nop
          }
          break;
 800622c:	e0aa      	b.n	8006384 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006234:	2b02      	cmp	r3, #2
 8006236:	d002      	beq.n	800623e <USBD_StdEPReq+0x15e>
 8006238:	2b03      	cmp	r3, #3
 800623a:	d032      	beq.n	80062a2 <USBD_StdEPReq+0x1c2>
 800623c:	e097      	b.n	800636e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800623e:	7bbb      	ldrb	r3, [r7, #14]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d007      	beq.n	8006254 <USBD_StdEPReq+0x174>
 8006244:	7bbb      	ldrb	r3, [r7, #14]
 8006246:	2b80      	cmp	r3, #128	; 0x80
 8006248:	d004      	beq.n	8006254 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fbb5 	bl	80069bc <USBD_CtlError>
                break;
 8006252:	e091      	b.n	8006378 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006254:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006258:	2b00      	cmp	r3, #0
 800625a:	da0b      	bge.n	8006274 <USBD_StdEPReq+0x194>
 800625c:	7bbb      	ldrb	r3, [r7, #14]
 800625e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006262:	4613      	mov	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	3310      	adds	r3, #16
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	4413      	add	r3, r2
 8006270:	3304      	adds	r3, #4
 8006272:	e00b      	b.n	800628c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006274:	7bbb      	ldrb	r3, [r7, #14]
 8006276:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800627a:	4613      	mov	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	4413      	add	r3, r2
 800628a:	3304      	adds	r3, #4
 800628c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2202      	movs	r2, #2
 8006298:	4619      	mov	r1, r3
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fbf8 	bl	8006a90 <USBD_CtlSendData>
              break;
 80062a0:	e06a      	b.n	8006378 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80062a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	da11      	bge.n	80062ce <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80062aa:	7bbb      	ldrb	r3, [r7, #14]
 80062ac:	f003 020f 	and.w	r2, r3, #15
 80062b0:	6879      	ldr	r1, [r7, #4]
 80062b2:	4613      	mov	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	440b      	add	r3, r1
 80062bc:	3318      	adds	r3, #24
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d117      	bne.n	80062f4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80062c4:	6839      	ldr	r1, [r7, #0]
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fb78 	bl	80069bc <USBD_CtlError>
                  break;
 80062cc:	e054      	b.n	8006378 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80062ce:	7bbb      	ldrb	r3, [r7, #14]
 80062d0:	f003 020f 	and.w	r2, r3, #15
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	440b      	add	r3, r1
 80062e0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d104      	bne.n	80062f4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80062ea:	6839      	ldr	r1, [r7, #0]
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fb65 	bl	80069bc <USBD_CtlError>
                  break;
 80062f2:	e041      	b.n	8006378 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	da0b      	bge.n	8006314 <USBD_StdEPReq+0x234>
 80062fc:	7bbb      	ldrb	r3, [r7, #14]
 80062fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006302:	4613      	mov	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	3310      	adds	r3, #16
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	4413      	add	r3, r2
 8006310:	3304      	adds	r3, #4
 8006312:	e00b      	b.n	800632c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006314:	7bbb      	ldrb	r3, [r7, #14]
 8006316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800631a:	4613      	mov	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	4413      	add	r3, r2
 800632a:	3304      	adds	r3, #4
 800632c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800632e:	7bbb      	ldrb	r3, [r7, #14]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <USBD_StdEPReq+0x25a>
 8006334:	7bbb      	ldrb	r3, [r7, #14]
 8006336:	2b80      	cmp	r3, #128	; 0x80
 8006338:	d103      	bne.n	8006342 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	e00e      	b.n	8006360 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006342:	7bbb      	ldrb	r3, [r7, #14]
 8006344:	4619      	mov	r1, r3
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f002 f964 	bl	8008614 <USBD_LL_IsStallEP>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2201      	movs	r2, #1
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	e002      	b.n	8006360 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2202      	movs	r2, #2
 8006364:	4619      	mov	r1, r3
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fb92 	bl	8006a90 <USBD_CtlSendData>
              break;
 800636c:	e004      	b.n	8006378 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fb23 	bl	80069bc <USBD_CtlError>
              break;
 8006376:	bf00      	nop
          }
          break;
 8006378:	e004      	b.n	8006384 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800637a:	6839      	ldr	r1, [r7, #0]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fb1d 	bl	80069bc <USBD_CtlError>
          break;
 8006382:	bf00      	nop
      }
      break;
 8006384:	e004      	b.n	8006390 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006386:	6839      	ldr	r1, [r7, #0]
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fb17 	bl	80069bc <USBD_CtlError>
      break;
 800638e:	bf00      	nop
  }

  return ret;
 8006390:	7bfb      	ldrb	r3, [r7, #15]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
	...

0800639c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80063aa:	2300      	movs	r3, #0
 80063ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	885b      	ldrh	r3, [r3, #2]
 80063b6:	0a1b      	lsrs	r3, r3, #8
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	3b01      	subs	r3, #1
 80063bc:	2b06      	cmp	r3, #6
 80063be:	f200 8128 	bhi.w	8006612 <USBD_GetDescriptor+0x276>
 80063c2:	a201      	add	r2, pc, #4	; (adr r2, 80063c8 <USBD_GetDescriptor+0x2c>)
 80063c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c8:	080063e5 	.word	0x080063e5
 80063cc:	080063fd 	.word	0x080063fd
 80063d0:	0800643d 	.word	0x0800643d
 80063d4:	08006613 	.word	0x08006613
 80063d8:	08006613 	.word	0x08006613
 80063dc:	080065b3 	.word	0x080065b3
 80063e0:	080065df 	.word	0x080065df
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	7c12      	ldrb	r2, [r2, #16]
 80063f0:	f107 0108 	add.w	r1, r7, #8
 80063f4:	4610      	mov	r0, r2
 80063f6:	4798      	blx	r3
 80063f8:	60f8      	str	r0, [r7, #12]
      break;
 80063fa:	e112      	b.n	8006622 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	7c1b      	ldrb	r3, [r3, #16]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10d      	bne.n	8006420 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640c:	f107 0208 	add.w	r2, r7, #8
 8006410:	4610      	mov	r0, r2
 8006412:	4798      	blx	r3
 8006414:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3301      	adds	r3, #1
 800641a:	2202      	movs	r2, #2
 800641c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800641e:	e100      	b.n	8006622 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006428:	f107 0208 	add.w	r2, r7, #8
 800642c:	4610      	mov	r0, r2
 800642e:	4798      	blx	r3
 8006430:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	3301      	adds	r3, #1
 8006436:	2202      	movs	r2, #2
 8006438:	701a      	strb	r2, [r3, #0]
      break;
 800643a:	e0f2      	b.n	8006622 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	885b      	ldrh	r3, [r3, #2]
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b05      	cmp	r3, #5
 8006444:	f200 80ac 	bhi.w	80065a0 <USBD_GetDescriptor+0x204>
 8006448:	a201      	add	r2, pc, #4	; (adr r2, 8006450 <USBD_GetDescriptor+0xb4>)
 800644a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644e:	bf00      	nop
 8006450:	08006469 	.word	0x08006469
 8006454:	0800649d 	.word	0x0800649d
 8006458:	080064d1 	.word	0x080064d1
 800645c:	08006505 	.word	0x08006505
 8006460:	08006539 	.word	0x08006539
 8006464:	0800656d 	.word	0x0800656d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00b      	beq.n	800648c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	7c12      	ldrb	r2, [r2, #16]
 8006480:	f107 0108 	add.w	r1, r7, #8
 8006484:	4610      	mov	r0, r2
 8006486:	4798      	blx	r3
 8006488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800648a:	e091      	b.n	80065b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fa94 	bl	80069bc <USBD_CtlError>
            err++;
 8006494:	7afb      	ldrb	r3, [r7, #11]
 8006496:	3301      	adds	r3, #1
 8006498:	72fb      	strb	r3, [r7, #11]
          break;
 800649a:	e089      	b.n	80065b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00b      	beq.n	80064c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	7c12      	ldrb	r2, [r2, #16]
 80064b4:	f107 0108 	add.w	r1, r7, #8
 80064b8:	4610      	mov	r0, r2
 80064ba:	4798      	blx	r3
 80064bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064be:	e077      	b.n	80065b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fa7a 	bl	80069bc <USBD_CtlError>
            err++;
 80064c8:	7afb      	ldrb	r3, [r7, #11]
 80064ca:	3301      	adds	r3, #1
 80064cc:	72fb      	strb	r3, [r7, #11]
          break;
 80064ce:	e06f      	b.n	80065b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00b      	beq.n	80064f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	7c12      	ldrb	r2, [r2, #16]
 80064e8:	f107 0108 	add.w	r1, r7, #8
 80064ec:	4610      	mov	r0, r2
 80064ee:	4798      	blx	r3
 80064f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064f2:	e05d      	b.n	80065b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064f4:	6839      	ldr	r1, [r7, #0]
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fa60 	bl	80069bc <USBD_CtlError>
            err++;
 80064fc:	7afb      	ldrb	r3, [r7, #11]
 80064fe:	3301      	adds	r3, #1
 8006500:	72fb      	strb	r3, [r7, #11]
          break;
 8006502:	e055      	b.n	80065b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00b      	beq.n	8006528 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	7c12      	ldrb	r2, [r2, #16]
 800651c:	f107 0108 	add.w	r1, r7, #8
 8006520:	4610      	mov	r0, r2
 8006522:	4798      	blx	r3
 8006524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006526:	e043      	b.n	80065b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fa46 	bl	80069bc <USBD_CtlError>
            err++;
 8006530:	7afb      	ldrb	r3, [r7, #11]
 8006532:	3301      	adds	r3, #1
 8006534:	72fb      	strb	r3, [r7, #11]
          break;
 8006536:	e03b      	b.n	80065b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00b      	beq.n	800655c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	7c12      	ldrb	r2, [r2, #16]
 8006550:	f107 0108 	add.w	r1, r7, #8
 8006554:	4610      	mov	r0, r2
 8006556:	4798      	blx	r3
 8006558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800655a:	e029      	b.n	80065b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800655c:	6839      	ldr	r1, [r7, #0]
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fa2c 	bl	80069bc <USBD_CtlError>
            err++;
 8006564:	7afb      	ldrb	r3, [r7, #11]
 8006566:	3301      	adds	r3, #1
 8006568:	72fb      	strb	r3, [r7, #11]
          break;
 800656a:	e021      	b.n	80065b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00b      	beq.n	8006590 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	7c12      	ldrb	r2, [r2, #16]
 8006584:	f107 0108 	add.w	r1, r7, #8
 8006588:	4610      	mov	r0, r2
 800658a:	4798      	blx	r3
 800658c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800658e:	e00f      	b.n	80065b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fa12 	bl	80069bc <USBD_CtlError>
            err++;
 8006598:	7afb      	ldrb	r3, [r7, #11]
 800659a:	3301      	adds	r3, #1
 800659c:	72fb      	strb	r3, [r7, #11]
          break;
 800659e:	e007      	b.n	80065b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80065a0:	6839      	ldr	r1, [r7, #0]
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fa0a 	bl	80069bc <USBD_CtlError>
          err++;
 80065a8:	7afb      	ldrb	r3, [r7, #11]
 80065aa:	3301      	adds	r3, #1
 80065ac:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80065ae:	e038      	b.n	8006622 <USBD_GetDescriptor+0x286>
 80065b0:	e037      	b.n	8006622 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	7c1b      	ldrb	r3, [r3, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d109      	bne.n	80065ce <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c2:	f107 0208 	add.w	r2, r7, #8
 80065c6:	4610      	mov	r0, r2
 80065c8:	4798      	blx	r3
 80065ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065cc:	e029      	b.n	8006622 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f9f3 	bl	80069bc <USBD_CtlError>
        err++;
 80065d6:	7afb      	ldrb	r3, [r7, #11]
 80065d8:	3301      	adds	r3, #1
 80065da:	72fb      	strb	r3, [r7, #11]
      break;
 80065dc:	e021      	b.n	8006622 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	7c1b      	ldrb	r3, [r3, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10d      	bne.n	8006602 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ee:	f107 0208 	add.w	r2, r7, #8
 80065f2:	4610      	mov	r0, r2
 80065f4:	4798      	blx	r3
 80065f6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3301      	adds	r3, #1
 80065fc:	2207      	movs	r2, #7
 80065fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006600:	e00f      	b.n	8006622 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f9d9 	bl	80069bc <USBD_CtlError>
        err++;
 800660a:	7afb      	ldrb	r3, [r7, #11]
 800660c:	3301      	adds	r3, #1
 800660e:	72fb      	strb	r3, [r7, #11]
      break;
 8006610:	e007      	b.n	8006622 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006612:	6839      	ldr	r1, [r7, #0]
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f9d1 	bl	80069bc <USBD_CtlError>
      err++;
 800661a:	7afb      	ldrb	r3, [r7, #11]
 800661c:	3301      	adds	r3, #1
 800661e:	72fb      	strb	r3, [r7, #11]
      break;
 8006620:	bf00      	nop
  }

  if (err != 0U)
 8006622:	7afb      	ldrb	r3, [r7, #11]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d11c      	bne.n	8006662 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006628:	893b      	ldrh	r3, [r7, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d011      	beq.n	8006652 <USBD_GetDescriptor+0x2b6>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	88db      	ldrh	r3, [r3, #6]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00d      	beq.n	8006652 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	88da      	ldrh	r2, [r3, #6]
 800663a:	893b      	ldrh	r3, [r7, #8]
 800663c:	4293      	cmp	r3, r2
 800663e:	bf28      	it	cs
 8006640:	4613      	movcs	r3, r2
 8006642:	b29b      	uxth	r3, r3
 8006644:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006646:	893b      	ldrh	r3, [r7, #8]
 8006648:	461a      	mov	r2, r3
 800664a:	68f9      	ldr	r1, [r7, #12]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fa1f 	bl	8006a90 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	88db      	ldrh	r3, [r3, #6]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d104      	bne.n	8006664 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fa76 	bl	8006b4c <USBD_CtlSendStatus>
 8006660:	e000      	b.n	8006664 <USBD_GetDescriptor+0x2c8>
    return;
 8006662:	bf00      	nop
    }
  }
}
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop

0800666c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	889b      	ldrh	r3, [r3, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d130      	bne.n	80066e0 <USBD_SetAddress+0x74>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	88db      	ldrh	r3, [r3, #6]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d12c      	bne.n	80066e0 <USBD_SetAddress+0x74>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	885b      	ldrh	r3, [r3, #2]
 800668a:	2b7f      	cmp	r3, #127	; 0x7f
 800668c:	d828      	bhi.n	80066e0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	885b      	ldrh	r3, [r3, #2]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006698:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d104      	bne.n	80066ae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f988 	bl	80069bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ac:	e01c      	b.n	80066e8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	7bfa      	ldrb	r2, [r7, #15]
 80066b2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80066b6:	7bfb      	ldrb	r3, [r7, #15]
 80066b8:	4619      	mov	r1, r3
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 ffcf 	bl	800865e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fa43 	bl	8006b4c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d004      	beq.n	80066d6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2202      	movs	r2, #2
 80066d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066d4:	e008      	b.n	80066e8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066de:	e003      	b.n	80066e8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f96a 	bl	80069bc <USBD_CtlError>
  }
}
 80066e8:	bf00      	nop
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	885b      	ldrh	r3, [r3, #2]
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	4b41      	ldr	r3, [pc, #260]	; (8006808 <USBD_SetConfig+0x118>)
 8006702:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006704:	4b40      	ldr	r3, [pc, #256]	; (8006808 <USBD_SetConfig+0x118>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d904      	bls.n	8006716 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800670c:	6839      	ldr	r1, [r7, #0]
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f954 	bl	80069bc <USBD_CtlError>
 8006714:	e075      	b.n	8006802 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800671c:	2b02      	cmp	r3, #2
 800671e:	d002      	beq.n	8006726 <USBD_SetConfig+0x36>
 8006720:	2b03      	cmp	r3, #3
 8006722:	d023      	beq.n	800676c <USBD_SetConfig+0x7c>
 8006724:	e062      	b.n	80067ec <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006726:	4b38      	ldr	r3, [pc, #224]	; (8006808 <USBD_SetConfig+0x118>)
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d01a      	beq.n	8006764 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800672e:	4b36      	ldr	r3, [pc, #216]	; (8006808 <USBD_SetConfig+0x118>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2203      	movs	r2, #3
 800673c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006740:	4b31      	ldr	r3, [pc, #196]	; (8006808 <USBD_SetConfig+0x118>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	4619      	mov	r1, r3
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff f9f4 	bl	8005b34 <USBD_SetClassConfig>
 800674c:	4603      	mov	r3, r0
 800674e:	2b02      	cmp	r3, #2
 8006750:	d104      	bne.n	800675c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f931 	bl	80069bc <USBD_CtlError>
            return;
 800675a:	e052      	b.n	8006802 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f9f5 	bl	8006b4c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006762:	e04e      	b.n	8006802 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f9f1 	bl	8006b4c <USBD_CtlSendStatus>
        break;
 800676a:	e04a      	b.n	8006802 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800676c:	4b26      	ldr	r3, [pc, #152]	; (8006808 <USBD_SetConfig+0x118>)
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d112      	bne.n	800679a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800677c:	4b22      	ldr	r3, [pc, #136]	; (8006808 <USBD_SetConfig+0x118>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	461a      	mov	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006786:	4b20      	ldr	r3, [pc, #128]	; (8006808 <USBD_SetConfig+0x118>)
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7ff f9f0 	bl	8005b72 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f9da 	bl	8006b4c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006798:	e033      	b.n	8006802 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800679a:	4b1b      	ldr	r3, [pc, #108]	; (8006808 <USBD_SetConfig+0x118>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d01d      	beq.n	80067e4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff f9de 	bl	8005b72 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80067b6:	4b14      	ldr	r3, [pc, #80]	; (8006808 <USBD_SetConfig+0x118>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80067c0:	4b11      	ldr	r3, [pc, #68]	; (8006808 <USBD_SetConfig+0x118>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	4619      	mov	r1, r3
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7ff f9b4 	bl	8005b34 <USBD_SetClassConfig>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d104      	bne.n	80067dc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f8f1 	bl	80069bc <USBD_CtlError>
            return;
 80067da:	e012      	b.n	8006802 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 f9b5 	bl	8006b4c <USBD_CtlSendStatus>
        break;
 80067e2:	e00e      	b.n	8006802 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f9b1 	bl	8006b4c <USBD_CtlSendStatus>
        break;
 80067ea:	e00a      	b.n	8006802 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f8e4 	bl	80069bc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80067f4:	4b04      	ldr	r3, [pc, #16]	; (8006808 <USBD_SetConfig+0x118>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff f9b9 	bl	8005b72 <USBD_ClrClassConfig>
        break;
 8006800:	bf00      	nop
    }
  }
}
 8006802:	3708      	adds	r7, #8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	20000658 	.word	0x20000658

0800680c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	88db      	ldrh	r3, [r3, #6]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d004      	beq.n	8006828 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f8cb 	bl	80069bc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006826:	e021      	b.n	800686c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800682e:	2b01      	cmp	r3, #1
 8006830:	db17      	blt.n	8006862 <USBD_GetConfig+0x56>
 8006832:	2b02      	cmp	r3, #2
 8006834:	dd02      	ble.n	800683c <USBD_GetConfig+0x30>
 8006836:	2b03      	cmp	r3, #3
 8006838:	d00b      	beq.n	8006852 <USBD_GetConfig+0x46>
 800683a:	e012      	b.n	8006862 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3308      	adds	r3, #8
 8006846:	2201      	movs	r2, #1
 8006848:	4619      	mov	r1, r3
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f920 	bl	8006a90 <USBD_CtlSendData>
        break;
 8006850:	e00c      	b.n	800686c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	3304      	adds	r3, #4
 8006856:	2201      	movs	r2, #1
 8006858:	4619      	mov	r1, r3
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f918 	bl	8006a90 <USBD_CtlSendData>
        break;
 8006860:	e004      	b.n	800686c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006862:	6839      	ldr	r1, [r7, #0]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f8a9 	bl	80069bc <USBD_CtlError>
        break;
 800686a:	bf00      	nop
}
 800686c:	bf00      	nop
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006884:	3b01      	subs	r3, #1
 8006886:	2b02      	cmp	r3, #2
 8006888:	d81e      	bhi.n	80068c8 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	88db      	ldrh	r3, [r3, #6]
 800688e:	2b02      	cmp	r3, #2
 8006890:	d004      	beq.n	800689c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f891 	bl	80069bc <USBD_CtlError>
        break;
 800689a:	e01a      	b.n	80068d2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d005      	beq.n	80068b8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f043 0202 	orr.w	r2, r3, #2
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	330c      	adds	r3, #12
 80068bc:	2202      	movs	r2, #2
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f8e5 	bl	8006a90 <USBD_CtlSendData>
      break;
 80068c6:	e004      	b.n	80068d2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f876 	bl	80069bc <USBD_CtlError>
      break;
 80068d0:	bf00      	nop
  }
}
 80068d2:	bf00      	nop
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b082      	sub	sp, #8
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
 80068e2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	885b      	ldrh	r3, [r3, #2]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d106      	bne.n	80068fa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f929 	bl	8006b4c <USBD_CtlSendStatus>
  }
}
 80068fa:	bf00      	nop
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b082      	sub	sp, #8
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006912:	3b01      	subs	r3, #1
 8006914:	2b02      	cmp	r3, #2
 8006916:	d80b      	bhi.n	8006930 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	885b      	ldrh	r3, [r3, #2]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d10c      	bne.n	800693a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f90f 	bl	8006b4c <USBD_CtlSendStatus>
      }
      break;
 800692e:	e004      	b.n	800693a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006930:	6839      	ldr	r1, [r7, #0]
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f842 	bl	80069bc <USBD_CtlError>
      break;
 8006938:	e000      	b.n	800693c <USBD_ClrFeature+0x3a>
      break;
 800693a:	bf00      	nop
  }
}
 800693c:	bf00      	nop
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	781a      	ldrb	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	785a      	ldrb	r2, [r3, #1]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	3302      	adds	r3, #2
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	b29a      	uxth	r2, r3
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	3303      	adds	r3, #3
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	b29b      	uxth	r3, r3
 800696e:	021b      	lsls	r3, r3, #8
 8006970:	b29b      	uxth	r3, r3
 8006972:	4413      	add	r3, r2
 8006974:	b29a      	uxth	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	3304      	adds	r3, #4
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	b29a      	uxth	r2, r3
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	3305      	adds	r3, #5
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	b29b      	uxth	r3, r3
 800698a:	021b      	lsls	r3, r3, #8
 800698c:	b29b      	uxth	r3, r3
 800698e:	4413      	add	r3, r2
 8006990:	b29a      	uxth	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	3306      	adds	r3, #6
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	b29a      	uxth	r2, r3
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	3307      	adds	r3, #7
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	021b      	lsls	r3, r3, #8
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	4413      	add	r3, r2
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	80da      	strh	r2, [r3, #6]

}
 80069b2:	bf00      	nop
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bc80      	pop	{r7}
 80069ba:	4770      	bx	lr

080069bc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80069c6:	2180      	movs	r1, #128	; 0x80
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f001 fde5 	bl	8008598 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80069ce:	2100      	movs	r1, #0
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f001 fde1 	bl	8008598 <USBD_LL_StallEP>
}
 80069d6:	bf00      	nop
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b086      	sub	sp, #24
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	60f8      	str	r0, [r7, #12]
 80069e6:	60b9      	str	r1, [r7, #8]
 80069e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d032      	beq.n	8006a5a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 f834 	bl	8006a62 <USBD_GetLen>
 80069fa:	4603      	mov	r3, r0
 80069fc:	3301      	adds	r3, #1
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006a08:	7dfb      	ldrb	r3, [r7, #23]
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	75fa      	strb	r2, [r7, #23]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	4413      	add	r3, r2
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	7812      	ldrb	r2, [r2, #0]
 8006a18:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006a1a:	7dfb      	ldrb	r3, [r7, #23]
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	75fa      	strb	r2, [r7, #23]
 8006a20:	461a      	mov	r2, r3
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	4413      	add	r3, r2
 8006a26:	2203      	movs	r2, #3
 8006a28:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006a2a:	e012      	b.n	8006a52 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	60fa      	str	r2, [r7, #12]
 8006a32:	7dfa      	ldrb	r2, [r7, #23]
 8006a34:	1c51      	adds	r1, r2, #1
 8006a36:	75f9      	strb	r1, [r7, #23]
 8006a38:	4611      	mov	r1, r2
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	440a      	add	r2, r1
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006a42:	7dfb      	ldrb	r3, [r7, #23]
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	75fa      	strb	r2, [r7, #23]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	2200      	movs	r2, #0
 8006a50:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1e8      	bne.n	8006a2c <USBD_GetString+0x4e>
    }
  }
}
 8006a5a:	bf00      	nop
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b085      	sub	sp, #20
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006a6e:	e005      	b.n	8006a7c <USBD_GetLen+0x1a>
  {
    len++;
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	3301      	adds	r3, #1
 8006a74:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1f5      	bne.n	8006a70 <USBD_GetLen+0xe>
  }

  return len;
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bc80      	pop	{r7}
 8006a8e:	4770      	bx	lr

08006a90 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006aa6:	88fa      	ldrh	r2, [r7, #6]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006aac:	88fa      	ldrh	r2, [r7, #6]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ab2:	88fb      	ldrh	r3, [r7, #6]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f001 fdef 	bl	800869c <USBD_LL_Transmit>

  return USBD_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ad6:	88fb      	ldrh	r3, [r7, #6]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	2100      	movs	r1, #0
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f001 fddd 	bl	800869c <USBD_LL_Transmit>

  return USBD_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	4613      	mov	r3, r2
 8006af8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2203      	movs	r2, #3
 8006afe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006b02:	88fa      	ldrh	r2, [r7, #6]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006b0a:	88fa      	ldrh	r2, [r7, #6]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b12:	88fb      	ldrh	r3, [r7, #6]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	2100      	movs	r1, #0
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f001 fde2 	bl	80086e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	4613      	mov	r3, r2
 8006b34:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b36:	88fb      	ldrh	r3, [r7, #6]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f001 fdd0 	bl	80086e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2204      	movs	r2, #4
 8006b58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2100      	movs	r1, #0
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f001 fd9a 	bl	800869c <USBD_LL_Transmit>

  return USBD_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b082      	sub	sp, #8
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2205      	movs	r2, #5
 8006b7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b82:	2300      	movs	r3, #0
 8006b84:	2200      	movs	r2, #0
 8006b86:	2100      	movs	r1, #0
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 fdaa 	bl	80086e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006baa:	2b84      	cmp	r3, #132	; 0x84
 8006bac:	d005      	beq.n	8006bba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006bae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	3303      	adds	r3, #3
 8006bb8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006bba:	68fb      	ldr	r3, [r7, #12]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bc80      	pop	{r7}
 8006bc4:	4770      	bx	lr

08006bc6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006bca:	f000 facd 	bl	8007168 <vTaskStartScheduler>
  
  return osOK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bd6:	b089      	sub	sp, #36	; 0x24
 8006bd8:	af04      	add	r7, sp, #16
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d020      	beq.n	8006c28 <osThreadCreate+0x54>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d01c      	beq.n	8006c28 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685c      	ldr	r4, [r3, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681d      	ldr	r5, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691e      	ldr	r6, [r3, #16]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7ff ffc9 	bl	8006b98 <makeFreeRtosPriority>
 8006c06:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c10:	9202      	str	r2, [sp, #8]
 8006c12:	9301      	str	r3, [sp, #4]
 8006c14:	9100      	str	r1, [sp, #0]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	4632      	mov	r2, r6
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f000 f8e8 	bl	8006df2 <xTaskCreateStatic>
 8006c22:	4603      	mov	r3, r0
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	e01c      	b.n	8006c62 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685c      	ldr	r4, [r3, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c34:	b29e      	uxth	r6, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7ff ffab 	bl	8006b98 <makeFreeRtosPriority>
 8006c42:	4602      	mov	r2, r0
 8006c44:	f107 030c 	add.w	r3, r7, #12
 8006c48:	9301      	str	r3, [sp, #4]
 8006c4a:	9200      	str	r2, [sp, #0]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	4632      	mov	r2, r6
 8006c50:	4629      	mov	r1, r5
 8006c52:	4620      	mov	r0, r4
 8006c54:	f000 f926 	bl	8006ea4 <xTaskCreate>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d001      	beq.n	8006c62 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	e000      	b.n	8006c64 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006c62:	68fb      	ldr	r3, [r7, #12]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c6c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <osDelay+0x16>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	e000      	b.n	8006c84 <osDelay+0x18>
 8006c82:	2301      	movs	r3, #1
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 fa3b 	bl	8007100 <vTaskDelay>
  
  return osOK;
 8006c8a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f103 0208 	add.w	r2, r3, #8
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f103 0208 	add.w	r2, r3, #8
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f103 0208 	add.w	r2, r3, #8
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bc80      	pop	{r7}
 8006cd0:	4770      	bx	lr

08006cd2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b083      	sub	sp, #12
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bc80      	pop	{r7}
 8006ce8:	4770      	bx	lr

08006cea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cea:	b480      	push	{r7}
 8006cec:	b085      	sub	sp, #20
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	601a      	str	r2, [r3, #0]
}
 8006d26:	bf00      	nop
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bc80      	pop	{r7}
 8006d2e:	4770      	bx	lr

08006d30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d46:	d103      	bne.n	8006d50 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	60fb      	str	r3, [r7, #12]
 8006d4e:	e00c      	b.n	8006d6a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3308      	adds	r3, #8
 8006d54:	60fb      	str	r3, [r7, #12]
 8006d56:	e002      	b.n	8006d5e <vListInsert+0x2e>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	60fb      	str	r3, [r7, #12]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d2f6      	bcs.n	8006d58 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	601a      	str	r2, [r3, #0]
}
 8006d96:	bf00      	nop
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bc80      	pop	{r7}
 8006d9e:	4770      	bx	lr

08006da0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	6892      	ldr	r2, [r2, #8]
 8006db6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	6852      	ldr	r2, [r2, #4]
 8006dc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d103      	bne.n	8006dd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689a      	ldr	r2, [r3, #8]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	1e5a      	subs	r2, r3, #1
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bc80      	pop	{r7}
 8006df0:	4770      	bx	lr

08006df2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b08e      	sub	sp, #56	; 0x38
 8006df6:	af04      	add	r7, sp, #16
 8006df8:	60f8      	str	r0, [r7, #12]
 8006dfa:	60b9      	str	r1, [r7, #8]
 8006dfc:	607a      	str	r2, [r7, #4]
 8006dfe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d109      	bne.n	8006e1a <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	623b      	str	r3, [r7, #32]
 8006e18:	e7fe      	b.n	8006e18 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d109      	bne.n	8006e34 <xTaskCreateStatic+0x42>
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	61fb      	str	r3, [r7, #28]
 8006e32:	e7fe      	b.n	8006e32 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e34:	2354      	movs	r3, #84	; 0x54
 8006e36:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	2b54      	cmp	r3, #84	; 0x54
 8006e3c:	d009      	beq.n	8006e52 <xTaskCreateStatic+0x60>
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	61bb      	str	r3, [r7, #24]
 8006e50:	e7fe      	b.n	8006e50 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01e      	beq.n	8006e96 <xTaskCreateStatic+0xa4>
 8006e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d01b      	beq.n	8006e96 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e60:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e66:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e70:	2300      	movs	r3, #0
 8006e72:	9303      	str	r3, [sp, #12]
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	9302      	str	r3, [sp, #8]
 8006e78:	f107 0314 	add.w	r3, r7, #20
 8006e7c:	9301      	str	r3, [sp, #4]
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	68b9      	ldr	r1, [r7, #8]
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 f850 	bl	8006f2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e90:	f000 f8cc 	bl	800702c <prvAddNewTaskToReadyList>
 8006e94:	e001      	b.n	8006e9a <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006e96:	2300      	movs	r3, #0
 8006e98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e9a:	697b      	ldr	r3, [r7, #20]
	}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3728      	adds	r7, #40	; 0x28
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08c      	sub	sp, #48	; 0x30
 8006ea8:	af04      	add	r7, sp, #16
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	603b      	str	r3, [r7, #0]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eb4:	88fb      	ldrh	r3, [r7, #6]
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fe57 	bl	8007b6c <pvPortMalloc>
 8006ebe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00e      	beq.n	8006ee4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006ec6:	2054      	movs	r0, #84	; 0x54
 8006ec8:	f000 fe50 	bl	8007b6c <pvPortMalloc>
 8006ecc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	631a      	str	r2, [r3, #48]	; 0x30
 8006eda:	e005      	b.n	8006ee8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006edc:	6978      	ldr	r0, [r7, #20]
 8006ede:	f000 ff07 	bl	8007cf0 <vPortFree>
 8006ee2:	e001      	b.n	8006ee8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d017      	beq.n	8006f1e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ef6:	88fa      	ldrh	r2, [r7, #6]
 8006ef8:	2300      	movs	r3, #0
 8006efa:	9303      	str	r3, [sp, #12]
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	9302      	str	r3, [sp, #8]
 8006f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f02:	9301      	str	r3, [sp, #4]
 8006f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	68b9      	ldr	r1, [r7, #8]
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 f80e 	bl	8006f2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f12:	69f8      	ldr	r0, [r7, #28]
 8006f14:	f000 f88a 	bl	800702c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	61bb      	str	r3, [r7, #24]
 8006f1c:	e002      	b.n	8006f24 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f24:	69bb      	ldr	r3, [r7, #24]
	}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3720      	adds	r7, #32
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b088      	sub	sp, #32
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60f8      	str	r0, [r7, #12]
 8006f36:	60b9      	str	r1, [r7, #8]
 8006f38:	607a      	str	r2, [r7, #4]
 8006f3a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f46:	3b01      	subs	r3, #1
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	f023 0307 	bic.w	r3, r3, #7
 8006f54:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	f003 0307 	and.w	r3, r3, #7
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d009      	beq.n	8006f74 <prvInitialiseNewTask+0x46>
 8006f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	617b      	str	r3, [r7, #20]
 8006f72:	e7fe      	b.n	8006f72 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f74:	2300      	movs	r3, #0
 8006f76:	61fb      	str	r3, [r7, #28]
 8006f78:	e012      	b.n	8006fa0 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	4413      	add	r3, r2
 8006f80:	7819      	ldrb	r1, [r3, #0]
 8006f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	4413      	add	r3, r2
 8006f88:	3334      	adds	r3, #52	; 0x34
 8006f8a:	460a      	mov	r2, r1
 8006f8c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	4413      	add	r3, r2
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d006      	beq.n	8006fa8 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	61fb      	str	r3, [r7, #28]
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	2b0f      	cmp	r3, #15
 8006fa4:	d9e9      	bls.n	8006f7a <prvInitialiseNewTask+0x4c>
 8006fa6:	e000      	b.n	8006faa <prvInitialiseNewTask+0x7c>
		{
			break;
 8006fa8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb4:	2b06      	cmp	r3, #6
 8006fb6:	d901      	bls.n	8006fbc <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006fb8:	2306      	movs	r3, #6
 8006fba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fc0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fc6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fca:	2200      	movs	r2, #0
 8006fcc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7ff fe7d 	bl	8006cd2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fda:	3318      	adds	r3, #24
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7ff fe78 	bl	8006cd2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fe6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fea:	f1c3 0207 	rsb	r2, r3, #7
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ff6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	68f9      	ldr	r1, [r7, #12]
 800700a:	69b8      	ldr	r0, [r7, #24]
 800700c:	f000 fc06 	bl	800781c <pxPortInitialiseStack>
 8007010:	4602      	mov	r2, r0
 8007012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007014:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800701c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007020:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007022:	bf00      	nop
 8007024:	3720      	adds	r7, #32
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007034:	f000 fce0 	bl	80079f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007038:	4b2a      	ldr	r3, [pc, #168]	; (80070e4 <prvAddNewTaskToReadyList+0xb8>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3301      	adds	r3, #1
 800703e:	4a29      	ldr	r2, [pc, #164]	; (80070e4 <prvAddNewTaskToReadyList+0xb8>)
 8007040:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007042:	4b29      	ldr	r3, [pc, #164]	; (80070e8 <prvAddNewTaskToReadyList+0xbc>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d109      	bne.n	800705e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800704a:	4a27      	ldr	r2, [pc, #156]	; (80070e8 <prvAddNewTaskToReadyList+0xbc>)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007050:	4b24      	ldr	r3, [pc, #144]	; (80070e4 <prvAddNewTaskToReadyList+0xb8>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d110      	bne.n	800707a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007058:	f000 fabc 	bl	80075d4 <prvInitialiseTaskLists>
 800705c:	e00d      	b.n	800707a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800705e:	4b23      	ldr	r3, [pc, #140]	; (80070ec <prvAddNewTaskToReadyList+0xc0>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d109      	bne.n	800707a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007066:	4b20      	ldr	r3, [pc, #128]	; (80070e8 <prvAddNewTaskToReadyList+0xbc>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007070:	429a      	cmp	r2, r3
 8007072:	d802      	bhi.n	800707a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007074:	4a1c      	ldr	r2, [pc, #112]	; (80070e8 <prvAddNewTaskToReadyList+0xbc>)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800707a:	4b1d      	ldr	r3, [pc, #116]	; (80070f0 <prvAddNewTaskToReadyList+0xc4>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	3301      	adds	r3, #1
 8007080:	4a1b      	ldr	r2, [pc, #108]	; (80070f0 <prvAddNewTaskToReadyList+0xc4>)
 8007082:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007088:	2201      	movs	r2, #1
 800708a:	409a      	lsls	r2, r3
 800708c:	4b19      	ldr	r3, [pc, #100]	; (80070f4 <prvAddNewTaskToReadyList+0xc8>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4313      	orrs	r3, r2
 8007092:	4a18      	ldr	r2, [pc, #96]	; (80070f4 <prvAddNewTaskToReadyList+0xc8>)
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800709a:	4613      	mov	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4a15      	ldr	r2, [pc, #84]	; (80070f8 <prvAddNewTaskToReadyList+0xcc>)
 80070a4:	441a      	add	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	3304      	adds	r3, #4
 80070aa:	4619      	mov	r1, r3
 80070ac:	4610      	mov	r0, r2
 80070ae:	f7ff fe1c 	bl	8006cea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80070b2:	f000 fccf 	bl	8007a54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80070b6:	4b0d      	ldr	r3, [pc, #52]	; (80070ec <prvAddNewTaskToReadyList+0xc0>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00e      	beq.n	80070dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80070be:	4b0a      	ldr	r3, [pc, #40]	; (80070e8 <prvAddNewTaskToReadyList+0xbc>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d207      	bcs.n	80070dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80070cc:	4b0b      	ldr	r3, [pc, #44]	; (80070fc <prvAddNewTaskToReadyList+0xd0>)
 80070ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070dc:	bf00      	nop
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	2000075c 	.word	0x2000075c
 80070e8:	2000065c 	.word	0x2000065c
 80070ec:	20000768 	.word	0x20000768
 80070f0:	20000778 	.word	0x20000778
 80070f4:	20000764 	.word	0x20000764
 80070f8:	20000660 	.word	0x20000660
 80070fc:	e000ed04 	.word	0xe000ed04

08007100 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007108:	2300      	movs	r3, #0
 800710a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d016      	beq.n	8007140 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007112:	4b13      	ldr	r3, [pc, #76]	; (8007160 <vTaskDelay+0x60>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d009      	beq.n	800712e <vTaskDelay+0x2e>
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	60bb      	str	r3, [r7, #8]
 800712c:	e7fe      	b.n	800712c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800712e:	f000 f879 	bl	8007224 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007132:	2100      	movs	r1, #0
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fb0b 	bl	8007750 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800713a:	f000 f881 	bl	8007240 <xTaskResumeAll>
 800713e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d107      	bne.n	8007156 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007146:	4b07      	ldr	r3, [pc, #28]	; (8007164 <vTaskDelay+0x64>)
 8007148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007156:	bf00      	nop
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	20000784 	.word	0x20000784
 8007164:	e000ed04 	.word	0xe000ed04

08007168 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08a      	sub	sp, #40	; 0x28
 800716c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800716e:	2300      	movs	r3, #0
 8007170:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007176:	463a      	mov	r2, r7
 8007178:	1d39      	adds	r1, r7, #4
 800717a:	f107 0308 	add.w	r3, r7, #8
 800717e:	4618      	mov	r0, r3
 8007180:	f7f9 fc0a 	bl	8000998 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	9202      	str	r2, [sp, #8]
 800718c:	9301      	str	r3, [sp, #4]
 800718e:	2300      	movs	r3, #0
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	2300      	movs	r3, #0
 8007194:	460a      	mov	r2, r1
 8007196:	491d      	ldr	r1, [pc, #116]	; (800720c <vTaskStartScheduler+0xa4>)
 8007198:	481d      	ldr	r0, [pc, #116]	; (8007210 <vTaskStartScheduler+0xa8>)
 800719a:	f7ff fe2a 	bl	8006df2 <xTaskCreateStatic>
 800719e:	4602      	mov	r2, r0
 80071a0:	4b1c      	ldr	r3, [pc, #112]	; (8007214 <vTaskStartScheduler+0xac>)
 80071a2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80071a4:	4b1b      	ldr	r3, [pc, #108]	; (8007214 <vTaskStartScheduler+0xac>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80071ac:	2301      	movs	r3, #1
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	e001      	b.n	80071b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80071b2:	2300      	movs	r3, #0
 80071b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d115      	bne.n	80071e8 <vTaskStartScheduler+0x80>
 80071bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80071ce:	4b12      	ldr	r3, [pc, #72]	; (8007218 <vTaskStartScheduler+0xb0>)
 80071d0:	f04f 32ff 	mov.w	r2, #4294967295
 80071d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80071d6:	4b11      	ldr	r3, [pc, #68]	; (800721c <vTaskStartScheduler+0xb4>)
 80071d8:	2201      	movs	r2, #1
 80071da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80071dc:	4b10      	ldr	r3, [pc, #64]	; (8007220 <vTaskStartScheduler+0xb8>)
 80071de:	2200      	movs	r2, #0
 80071e0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80071e2:	f000 fb99 	bl	8007918 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80071e6:	e00d      	b.n	8007204 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ee:	d109      	bne.n	8007204 <vTaskStartScheduler+0x9c>
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	60fb      	str	r3, [r7, #12]
 8007202:	e7fe      	b.n	8007202 <vTaskStartScheduler+0x9a>
}
 8007204:	bf00      	nop
 8007206:	3718      	adds	r7, #24
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	080088e0 	.word	0x080088e0
 8007210:	080075a5 	.word	0x080075a5
 8007214:	20000780 	.word	0x20000780
 8007218:	2000077c 	.word	0x2000077c
 800721c:	20000768 	.word	0x20000768
 8007220:	20000760 	.word	0x20000760

08007224 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007224:	b480      	push	{r7}
 8007226:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007228:	4b04      	ldr	r3, [pc, #16]	; (800723c <vTaskSuspendAll+0x18>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3301      	adds	r3, #1
 800722e:	4a03      	ldr	r2, [pc, #12]	; (800723c <vTaskSuspendAll+0x18>)
 8007230:	6013      	str	r3, [r2, #0]
}
 8007232:	bf00      	nop
 8007234:	46bd      	mov	sp, r7
 8007236:	bc80      	pop	{r7}
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	20000784 	.word	0x20000784

08007240 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007246:	2300      	movs	r3, #0
 8007248:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800724a:	2300      	movs	r3, #0
 800724c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800724e:	4b41      	ldr	r3, [pc, #260]	; (8007354 <xTaskResumeAll+0x114>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d109      	bne.n	800726a <xTaskResumeAll+0x2a>
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	603b      	str	r3, [r7, #0]
 8007268:	e7fe      	b.n	8007268 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800726a:	f000 fbc5 	bl	80079f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800726e:	4b39      	ldr	r3, [pc, #228]	; (8007354 <xTaskResumeAll+0x114>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3b01      	subs	r3, #1
 8007274:	4a37      	ldr	r2, [pc, #220]	; (8007354 <xTaskResumeAll+0x114>)
 8007276:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007278:	4b36      	ldr	r3, [pc, #216]	; (8007354 <xTaskResumeAll+0x114>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d161      	bne.n	8007344 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007280:	4b35      	ldr	r3, [pc, #212]	; (8007358 <xTaskResumeAll+0x118>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d05d      	beq.n	8007344 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007288:	e02e      	b.n	80072e8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800728a:	4b34      	ldr	r3, [pc, #208]	; (800735c <xTaskResumeAll+0x11c>)
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3318      	adds	r3, #24
 8007296:	4618      	mov	r0, r3
 8007298:	f7ff fd82 	bl	8006da0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	3304      	adds	r3, #4
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff fd7d 	bl	8006da0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072aa:	2201      	movs	r2, #1
 80072ac:	409a      	lsls	r2, r3
 80072ae:	4b2c      	ldr	r3, [pc, #176]	; (8007360 <xTaskResumeAll+0x120>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	4a2a      	ldr	r2, [pc, #168]	; (8007360 <xTaskResumeAll+0x120>)
 80072b6:	6013      	str	r3, [r2, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072bc:	4613      	mov	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4a27      	ldr	r2, [pc, #156]	; (8007364 <xTaskResumeAll+0x124>)
 80072c6:	441a      	add	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3304      	adds	r3, #4
 80072cc:	4619      	mov	r1, r3
 80072ce:	4610      	mov	r0, r2
 80072d0:	f7ff fd0b 	bl	8006cea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d8:	4b23      	ldr	r3, [pc, #140]	; (8007368 <xTaskResumeAll+0x128>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072de:	429a      	cmp	r2, r3
 80072e0:	d302      	bcc.n	80072e8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80072e2:	4b22      	ldr	r3, [pc, #136]	; (800736c <xTaskResumeAll+0x12c>)
 80072e4:	2201      	movs	r2, #1
 80072e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072e8:	4b1c      	ldr	r3, [pc, #112]	; (800735c <xTaskResumeAll+0x11c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1cc      	bne.n	800728a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80072f6:	f000 fa07 	bl	8007708 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80072fa:	4b1d      	ldr	r3, [pc, #116]	; (8007370 <xTaskResumeAll+0x130>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d010      	beq.n	8007328 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007306:	f000 f837 	bl	8007378 <xTaskIncrementTick>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007310:	4b16      	ldr	r3, [pc, #88]	; (800736c <xTaskResumeAll+0x12c>)
 8007312:	2201      	movs	r2, #1
 8007314:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	3b01      	subs	r3, #1
 800731a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1f1      	bne.n	8007306 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007322:	4b13      	ldr	r3, [pc, #76]	; (8007370 <xTaskResumeAll+0x130>)
 8007324:	2200      	movs	r2, #0
 8007326:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007328:	4b10      	ldr	r3, [pc, #64]	; (800736c <xTaskResumeAll+0x12c>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d009      	beq.n	8007344 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007330:	2301      	movs	r3, #1
 8007332:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007334:	4b0f      	ldr	r3, [pc, #60]	; (8007374 <xTaskResumeAll+0x134>)
 8007336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007344:	f000 fb86 	bl	8007a54 <vPortExitCritical>

	return xAlreadyYielded;
 8007348:	68bb      	ldr	r3, [r7, #8]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	20000784 	.word	0x20000784
 8007358:	2000075c 	.word	0x2000075c
 800735c:	2000071c 	.word	0x2000071c
 8007360:	20000764 	.word	0x20000764
 8007364:	20000660 	.word	0x20000660
 8007368:	2000065c 	.word	0x2000065c
 800736c:	20000770 	.word	0x20000770
 8007370:	2000076c 	.word	0x2000076c
 8007374:	e000ed04 	.word	0xe000ed04

08007378 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800737e:	2300      	movs	r3, #0
 8007380:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007382:	4b50      	ldr	r3, [pc, #320]	; (80074c4 <xTaskIncrementTick+0x14c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	f040 808c 	bne.w	80074a4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800738c:	4b4e      	ldr	r3, [pc, #312]	; (80074c8 <xTaskIncrementTick+0x150>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3301      	adds	r3, #1
 8007392:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007394:	4a4c      	ldr	r2, [pc, #304]	; (80074c8 <xTaskIncrementTick+0x150>)
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d11f      	bne.n	80073e0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80073a0:	4b4a      	ldr	r3, [pc, #296]	; (80074cc <xTaskIncrementTick+0x154>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d009      	beq.n	80073be <xTaskIncrementTick+0x46>
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	603b      	str	r3, [r7, #0]
 80073bc:	e7fe      	b.n	80073bc <xTaskIncrementTick+0x44>
 80073be:	4b43      	ldr	r3, [pc, #268]	; (80074cc <xTaskIncrementTick+0x154>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	60fb      	str	r3, [r7, #12]
 80073c4:	4b42      	ldr	r3, [pc, #264]	; (80074d0 <xTaskIncrementTick+0x158>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a40      	ldr	r2, [pc, #256]	; (80074cc <xTaskIncrementTick+0x154>)
 80073ca:	6013      	str	r3, [r2, #0]
 80073cc:	4a40      	ldr	r2, [pc, #256]	; (80074d0 <xTaskIncrementTick+0x158>)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6013      	str	r3, [r2, #0]
 80073d2:	4b40      	ldr	r3, [pc, #256]	; (80074d4 <xTaskIncrementTick+0x15c>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3301      	adds	r3, #1
 80073d8:	4a3e      	ldr	r2, [pc, #248]	; (80074d4 <xTaskIncrementTick+0x15c>)
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	f000 f994 	bl	8007708 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80073e0:	4b3d      	ldr	r3, [pc, #244]	; (80074d8 <xTaskIncrementTick+0x160>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d34d      	bcc.n	8007486 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073ea:	4b38      	ldr	r3, [pc, #224]	; (80074cc <xTaskIncrementTick+0x154>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <xTaskIncrementTick+0x80>
 80073f4:	2301      	movs	r3, #1
 80073f6:	e000      	b.n	80073fa <xTaskIncrementTick+0x82>
 80073f8:	2300      	movs	r3, #0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d004      	beq.n	8007408 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073fe:	4b36      	ldr	r3, [pc, #216]	; (80074d8 <xTaskIncrementTick+0x160>)
 8007400:	f04f 32ff 	mov.w	r2, #4294967295
 8007404:	601a      	str	r2, [r3, #0]
					break;
 8007406:	e03e      	b.n	8007486 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007408:	4b30      	ldr	r3, [pc, #192]	; (80074cc <xTaskIncrementTick+0x154>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	429a      	cmp	r2, r3
 800741e:	d203      	bcs.n	8007428 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007420:	4a2d      	ldr	r2, [pc, #180]	; (80074d8 <xTaskIncrementTick+0x160>)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6013      	str	r3, [r2, #0]
						break;
 8007426:	e02e      	b.n	8007486 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	3304      	adds	r3, #4
 800742c:	4618      	mov	r0, r3
 800742e:	f7ff fcb7 	bl	8006da0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007436:	2b00      	cmp	r3, #0
 8007438:	d004      	beq.n	8007444 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	3318      	adds	r3, #24
 800743e:	4618      	mov	r0, r3
 8007440:	f7ff fcae 	bl	8006da0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007448:	2201      	movs	r2, #1
 800744a:	409a      	lsls	r2, r3
 800744c:	4b23      	ldr	r3, [pc, #140]	; (80074dc <xTaskIncrementTick+0x164>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4313      	orrs	r3, r2
 8007452:	4a22      	ldr	r2, [pc, #136]	; (80074dc <xTaskIncrementTick+0x164>)
 8007454:	6013      	str	r3, [r2, #0]
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745a:	4613      	mov	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4a1f      	ldr	r2, [pc, #124]	; (80074e0 <xTaskIncrementTick+0x168>)
 8007464:	441a      	add	r2, r3
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	3304      	adds	r3, #4
 800746a:	4619      	mov	r1, r3
 800746c:	4610      	mov	r0, r2
 800746e:	f7ff fc3c 	bl	8006cea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007476:	4b1b      	ldr	r3, [pc, #108]	; (80074e4 <xTaskIncrementTick+0x16c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747c:	429a      	cmp	r2, r3
 800747e:	d3b4      	bcc.n	80073ea <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007480:	2301      	movs	r3, #1
 8007482:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007484:	e7b1      	b.n	80073ea <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007486:	4b17      	ldr	r3, [pc, #92]	; (80074e4 <xTaskIncrementTick+0x16c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800748c:	4914      	ldr	r1, [pc, #80]	; (80074e0 <xTaskIncrementTick+0x168>)
 800748e:	4613      	mov	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	440b      	add	r3, r1
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d907      	bls.n	80074ae <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800749e:	2301      	movs	r3, #1
 80074a0:	617b      	str	r3, [r7, #20]
 80074a2:	e004      	b.n	80074ae <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80074a4:	4b10      	ldr	r3, [pc, #64]	; (80074e8 <xTaskIncrementTick+0x170>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3301      	adds	r3, #1
 80074aa:	4a0f      	ldr	r2, [pc, #60]	; (80074e8 <xTaskIncrementTick+0x170>)
 80074ac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80074ae:	4b0f      	ldr	r3, [pc, #60]	; (80074ec <xTaskIncrementTick+0x174>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80074b6:	2301      	movs	r3, #1
 80074b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80074ba:	697b      	ldr	r3, [r7, #20]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3718      	adds	r7, #24
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	20000784 	.word	0x20000784
 80074c8:	20000760 	.word	0x20000760
 80074cc:	20000714 	.word	0x20000714
 80074d0:	20000718 	.word	0x20000718
 80074d4:	20000774 	.word	0x20000774
 80074d8:	2000077c 	.word	0x2000077c
 80074dc:	20000764 	.word	0x20000764
 80074e0:	20000660 	.word	0x20000660
 80074e4:	2000065c 	.word	0x2000065c
 80074e8:	2000076c 	.word	0x2000076c
 80074ec:	20000770 	.word	0x20000770

080074f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80074f6:	4b26      	ldr	r3, [pc, #152]	; (8007590 <vTaskSwitchContext+0xa0>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80074fe:	4b25      	ldr	r3, [pc, #148]	; (8007594 <vTaskSwitchContext+0xa4>)
 8007500:	2201      	movs	r2, #1
 8007502:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007504:	e03e      	b.n	8007584 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007506:	4b23      	ldr	r3, [pc, #140]	; (8007594 <vTaskSwitchContext+0xa4>)
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800750c:	4b22      	ldr	r3, [pc, #136]	; (8007598 <vTaskSwitchContext+0xa8>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	fab3 f383 	clz	r3, r3
 8007518:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800751a:	7afb      	ldrb	r3, [r7, #11]
 800751c:	f1c3 031f 	rsb	r3, r3, #31
 8007520:	617b      	str	r3, [r7, #20]
 8007522:	491e      	ldr	r1, [pc, #120]	; (800759c <vTaskSwitchContext+0xac>)
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	4613      	mov	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	440b      	add	r3, r1
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d109      	bne.n	800754a <vTaskSwitchContext+0x5a>
	__asm volatile
 8007536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	607b      	str	r3, [r7, #4]
 8007548:	e7fe      	b.n	8007548 <vTaskSwitchContext+0x58>
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	4613      	mov	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4a11      	ldr	r2, [pc, #68]	; (800759c <vTaskSwitchContext+0xac>)
 8007556:	4413      	add	r3, r2
 8007558:	613b      	str	r3, [r7, #16]
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	685a      	ldr	r2, [r3, #4]
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	605a      	str	r2, [r3, #4]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	3308      	adds	r3, #8
 800756c:	429a      	cmp	r2, r3
 800756e:	d104      	bne.n	800757a <vTaskSwitchContext+0x8a>
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	605a      	str	r2, [r3, #4]
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	4a07      	ldr	r2, [pc, #28]	; (80075a0 <vTaskSwitchContext+0xb0>)
 8007582:	6013      	str	r3, [r2, #0]
}
 8007584:	bf00      	nop
 8007586:	371c      	adds	r7, #28
 8007588:	46bd      	mov	sp, r7
 800758a:	bc80      	pop	{r7}
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	20000784 	.word	0x20000784
 8007594:	20000770 	.word	0x20000770
 8007598:	20000764 	.word	0x20000764
 800759c:	20000660 	.word	0x20000660
 80075a0:	2000065c 	.word	0x2000065c

080075a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075ac:	f000 f852 	bl	8007654 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075b0:	4b06      	ldr	r3, [pc, #24]	; (80075cc <prvIdleTask+0x28>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d9f9      	bls.n	80075ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80075b8:	4b05      	ldr	r3, [pc, #20]	; (80075d0 <prvIdleTask+0x2c>)
 80075ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075be:	601a      	str	r2, [r3, #0]
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075c8:	e7f0      	b.n	80075ac <prvIdleTask+0x8>
 80075ca:	bf00      	nop
 80075cc:	20000660 	.word	0x20000660
 80075d0:	e000ed04 	.word	0xe000ed04

080075d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075da:	2300      	movs	r3, #0
 80075dc:	607b      	str	r3, [r7, #4]
 80075de:	e00c      	b.n	80075fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	4613      	mov	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4a12      	ldr	r2, [pc, #72]	; (8007634 <prvInitialiseTaskLists+0x60>)
 80075ec:	4413      	add	r3, r2
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7ff fb50 	bl	8006c94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3301      	adds	r3, #1
 80075f8:	607b      	str	r3, [r7, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b06      	cmp	r3, #6
 80075fe:	d9ef      	bls.n	80075e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007600:	480d      	ldr	r0, [pc, #52]	; (8007638 <prvInitialiseTaskLists+0x64>)
 8007602:	f7ff fb47 	bl	8006c94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007606:	480d      	ldr	r0, [pc, #52]	; (800763c <prvInitialiseTaskLists+0x68>)
 8007608:	f7ff fb44 	bl	8006c94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800760c:	480c      	ldr	r0, [pc, #48]	; (8007640 <prvInitialiseTaskLists+0x6c>)
 800760e:	f7ff fb41 	bl	8006c94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007612:	480c      	ldr	r0, [pc, #48]	; (8007644 <prvInitialiseTaskLists+0x70>)
 8007614:	f7ff fb3e 	bl	8006c94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007618:	480b      	ldr	r0, [pc, #44]	; (8007648 <prvInitialiseTaskLists+0x74>)
 800761a:	f7ff fb3b 	bl	8006c94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800761e:	4b0b      	ldr	r3, [pc, #44]	; (800764c <prvInitialiseTaskLists+0x78>)
 8007620:	4a05      	ldr	r2, [pc, #20]	; (8007638 <prvInitialiseTaskLists+0x64>)
 8007622:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007624:	4b0a      	ldr	r3, [pc, #40]	; (8007650 <prvInitialiseTaskLists+0x7c>)
 8007626:	4a05      	ldr	r2, [pc, #20]	; (800763c <prvInitialiseTaskLists+0x68>)
 8007628:	601a      	str	r2, [r3, #0]
}
 800762a:	bf00      	nop
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	20000660 	.word	0x20000660
 8007638:	200006ec 	.word	0x200006ec
 800763c:	20000700 	.word	0x20000700
 8007640:	2000071c 	.word	0x2000071c
 8007644:	20000730 	.word	0x20000730
 8007648:	20000748 	.word	0x20000748
 800764c:	20000714 	.word	0x20000714
 8007650:	20000718 	.word	0x20000718

08007654 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800765a:	e019      	b.n	8007690 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800765c:	f000 f9cc 	bl	80079f8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007660:	4b0f      	ldr	r3, [pc, #60]	; (80076a0 <prvCheckTasksWaitingTermination+0x4c>)
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3304      	adds	r3, #4
 800766c:	4618      	mov	r0, r3
 800766e:	f7ff fb97 	bl	8006da0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007672:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <prvCheckTasksWaitingTermination+0x50>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3b01      	subs	r3, #1
 8007678:	4a0a      	ldr	r2, [pc, #40]	; (80076a4 <prvCheckTasksWaitingTermination+0x50>)
 800767a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800767c:	4b0a      	ldr	r3, [pc, #40]	; (80076a8 <prvCheckTasksWaitingTermination+0x54>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3b01      	subs	r3, #1
 8007682:	4a09      	ldr	r2, [pc, #36]	; (80076a8 <prvCheckTasksWaitingTermination+0x54>)
 8007684:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007686:	f000 f9e5 	bl	8007a54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f80e 	bl	80076ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007690:	4b05      	ldr	r3, [pc, #20]	; (80076a8 <prvCheckTasksWaitingTermination+0x54>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1e1      	bne.n	800765c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007698:	bf00      	nop
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	20000730 	.word	0x20000730
 80076a4:	2000075c 	.word	0x2000075c
 80076a8:	20000744 	.word	0x20000744

080076ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d108      	bne.n	80076d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 fb14 	bl	8007cf0 <vPortFree>
				vPortFree( pxTCB );
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fb11 	bl	8007cf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076ce:	e017      	b.n	8007700 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d103      	bne.n	80076e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fb08 	bl	8007cf0 <vPortFree>
	}
 80076e0:	e00e      	b.n	8007700 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d009      	beq.n	8007700 <prvDeleteTCB+0x54>
 80076ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f0:	f383 8811 	msr	BASEPRI, r3
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	60fb      	str	r3, [r7, #12]
 80076fe:	e7fe      	b.n	80076fe <prvDeleteTCB+0x52>
	}
 8007700:	bf00      	nop
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800770e:	4b0e      	ldr	r3, [pc, #56]	; (8007748 <prvResetNextTaskUnblockTime+0x40>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d101      	bne.n	800771c <prvResetNextTaskUnblockTime+0x14>
 8007718:	2301      	movs	r3, #1
 800771a:	e000      	b.n	800771e <prvResetNextTaskUnblockTime+0x16>
 800771c:	2300      	movs	r3, #0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d004      	beq.n	800772c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007722:	4b0a      	ldr	r3, [pc, #40]	; (800774c <prvResetNextTaskUnblockTime+0x44>)
 8007724:	f04f 32ff 	mov.w	r2, #4294967295
 8007728:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800772a:	e008      	b.n	800773e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800772c:	4b06      	ldr	r3, [pc, #24]	; (8007748 <prvResetNextTaskUnblockTime+0x40>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	4a04      	ldr	r2, [pc, #16]	; (800774c <prvResetNextTaskUnblockTime+0x44>)
 800773c:	6013      	str	r3, [r2, #0]
}
 800773e:	bf00      	nop
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	bc80      	pop	{r7}
 8007746:	4770      	bx	lr
 8007748:	20000714 	.word	0x20000714
 800774c:	2000077c 	.word	0x2000077c

08007750 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800775a:	4b29      	ldr	r3, [pc, #164]	; (8007800 <prvAddCurrentTaskToDelayedList+0xb0>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007760:	4b28      	ldr	r3, [pc, #160]	; (8007804 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3304      	adds	r3, #4
 8007766:	4618      	mov	r0, r3
 8007768:	f7ff fb1a 	bl	8006da0 <uxListRemove>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10b      	bne.n	800778a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007772:	4b24      	ldr	r3, [pc, #144]	; (8007804 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007778:	2201      	movs	r2, #1
 800777a:	fa02 f303 	lsl.w	r3, r2, r3
 800777e:	43da      	mvns	r2, r3
 8007780:	4b21      	ldr	r3, [pc, #132]	; (8007808 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4013      	ands	r3, r2
 8007786:	4a20      	ldr	r2, [pc, #128]	; (8007808 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007788:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007790:	d10a      	bne.n	80077a8 <prvAddCurrentTaskToDelayedList+0x58>
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d007      	beq.n	80077a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007798:	4b1a      	ldr	r3, [pc, #104]	; (8007804 <prvAddCurrentTaskToDelayedList+0xb4>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	3304      	adds	r3, #4
 800779e:	4619      	mov	r1, r3
 80077a0:	481a      	ldr	r0, [pc, #104]	; (800780c <prvAddCurrentTaskToDelayedList+0xbc>)
 80077a2:	f7ff faa2 	bl	8006cea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077a6:	e026      	b.n	80077f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4413      	add	r3, r2
 80077ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077b0:	4b14      	ldr	r3, [pc, #80]	; (8007804 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d209      	bcs.n	80077d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077c0:	4b13      	ldr	r3, [pc, #76]	; (8007810 <prvAddCurrentTaskToDelayedList+0xc0>)
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	4b0f      	ldr	r3, [pc, #60]	; (8007804 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3304      	adds	r3, #4
 80077ca:	4619      	mov	r1, r3
 80077cc:	4610      	mov	r0, r2
 80077ce:	f7ff faaf 	bl	8006d30 <vListInsert>
}
 80077d2:	e010      	b.n	80077f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077d4:	4b0f      	ldr	r3, [pc, #60]	; (8007814 <prvAddCurrentTaskToDelayedList+0xc4>)
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	4b0a      	ldr	r3, [pc, #40]	; (8007804 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3304      	adds	r3, #4
 80077de:	4619      	mov	r1, r3
 80077e0:	4610      	mov	r0, r2
 80077e2:	f7ff faa5 	bl	8006d30 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077e6:	4b0c      	ldr	r3, [pc, #48]	; (8007818 <prvAddCurrentTaskToDelayedList+0xc8>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d202      	bcs.n	80077f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80077f0:	4a09      	ldr	r2, [pc, #36]	; (8007818 <prvAddCurrentTaskToDelayedList+0xc8>)
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	6013      	str	r3, [r2, #0]
}
 80077f6:	bf00      	nop
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	20000760 	.word	0x20000760
 8007804:	2000065c 	.word	0x2000065c
 8007808:	20000764 	.word	0x20000764
 800780c:	20000748 	.word	0x20000748
 8007810:	20000718 	.word	0x20000718
 8007814:	20000714 	.word	0x20000714
 8007818:	2000077c 	.word	0x2000077c

0800781c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	3b04      	subs	r3, #4
 800782c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	3b04      	subs	r3, #4
 800783a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f023 0201 	bic.w	r2, r3, #1
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3b04      	subs	r3, #4
 800784a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800784c:	4a08      	ldr	r2, [pc, #32]	; (8007870 <pxPortInitialiseStack+0x54>)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3b14      	subs	r3, #20
 8007856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3b20      	subs	r3, #32
 8007862:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007864:	68fb      	ldr	r3, [r7, #12]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	bc80      	pop	{r7}
 800786e:	4770      	bx	lr
 8007870:	08007875 	.word	0x08007875

08007874 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800787a:	2300      	movs	r3, #0
 800787c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800787e:	4b10      	ldr	r3, [pc, #64]	; (80078c0 <prvTaskExitError+0x4c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007886:	d009      	beq.n	800789c <prvTaskExitError+0x28>
 8007888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	60fb      	str	r3, [r7, #12]
 800789a:	e7fe      	b.n	800789a <prvTaskExitError+0x26>
 800789c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078ae:	bf00      	nop
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d0fc      	beq.n	80078b0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078b6:	bf00      	nop
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bc80      	pop	{r7}
 80078be:	4770      	bx	lr
 80078c0:	2000011c 	.word	0x2000011c
	...

080078d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078d0:	4b07      	ldr	r3, [pc, #28]	; (80078f0 <pxCurrentTCBConst2>)
 80078d2:	6819      	ldr	r1, [r3, #0]
 80078d4:	6808      	ldr	r0, [r1, #0]
 80078d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80078da:	f380 8809 	msr	PSP, r0
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f04f 0000 	mov.w	r0, #0
 80078e6:	f380 8811 	msr	BASEPRI, r0
 80078ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80078ee:	4770      	bx	lr

080078f0 <pxCurrentTCBConst2>:
 80078f0:	2000065c 	.word	0x2000065c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop

080078f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80078f8:	4806      	ldr	r0, [pc, #24]	; (8007914 <prvPortStartFirstTask+0x1c>)
 80078fa:	6800      	ldr	r0, [r0, #0]
 80078fc:	6800      	ldr	r0, [r0, #0]
 80078fe:	f380 8808 	msr	MSP, r0
 8007902:	b662      	cpsie	i
 8007904:	b661      	cpsie	f
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	df00      	svc	0
 8007910:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007912:	bf00      	nop
 8007914:	e000ed08 	.word	0xe000ed08

08007918 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800791e:	4b31      	ldr	r3, [pc, #196]	; (80079e4 <xPortStartScheduler+0xcc>)
 8007920:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	b2db      	uxtb	r3, r3
 8007928:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	22ff      	movs	r2, #255	; 0xff
 800792e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007938:	78fb      	ldrb	r3, [r7, #3]
 800793a:	b2db      	uxtb	r3, r3
 800793c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007940:	b2da      	uxtb	r2, r3
 8007942:	4b29      	ldr	r3, [pc, #164]	; (80079e8 <xPortStartScheduler+0xd0>)
 8007944:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007946:	4b29      	ldr	r3, [pc, #164]	; (80079ec <xPortStartScheduler+0xd4>)
 8007948:	2207      	movs	r2, #7
 800794a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800794c:	e009      	b.n	8007962 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800794e:	4b27      	ldr	r3, [pc, #156]	; (80079ec <xPortStartScheduler+0xd4>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3b01      	subs	r3, #1
 8007954:	4a25      	ldr	r2, [pc, #148]	; (80079ec <xPortStartScheduler+0xd4>)
 8007956:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007958:	78fb      	ldrb	r3, [r7, #3]
 800795a:	b2db      	uxtb	r3, r3
 800795c:	005b      	lsls	r3, r3, #1
 800795e:	b2db      	uxtb	r3, r3
 8007960:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007962:	78fb      	ldrb	r3, [r7, #3]
 8007964:	b2db      	uxtb	r3, r3
 8007966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800796a:	2b80      	cmp	r3, #128	; 0x80
 800796c:	d0ef      	beq.n	800794e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800796e:	4b1f      	ldr	r3, [pc, #124]	; (80079ec <xPortStartScheduler+0xd4>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f1c3 0307 	rsb	r3, r3, #7
 8007976:	2b04      	cmp	r3, #4
 8007978:	d009      	beq.n	800798e <xPortStartScheduler+0x76>
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	60bb      	str	r3, [r7, #8]
 800798c:	e7fe      	b.n	800798c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800798e:	4b17      	ldr	r3, [pc, #92]	; (80079ec <xPortStartScheduler+0xd4>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	021b      	lsls	r3, r3, #8
 8007994:	4a15      	ldr	r2, [pc, #84]	; (80079ec <xPortStartScheduler+0xd4>)
 8007996:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007998:	4b14      	ldr	r3, [pc, #80]	; (80079ec <xPortStartScheduler+0xd4>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079a0:	4a12      	ldr	r2, [pc, #72]	; (80079ec <xPortStartScheduler+0xd4>)
 80079a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079ac:	4b10      	ldr	r3, [pc, #64]	; (80079f0 <xPortStartScheduler+0xd8>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a0f      	ldr	r2, [pc, #60]	; (80079f0 <xPortStartScheduler+0xd8>)
 80079b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80079b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079b8:	4b0d      	ldr	r3, [pc, #52]	; (80079f0 <xPortStartScheduler+0xd8>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a0c      	ldr	r2, [pc, #48]	; (80079f0 <xPortStartScheduler+0xd8>)
 80079be:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80079c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80079c4:	f000 f8b0 	bl	8007b28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80079c8:	4b0a      	ldr	r3, [pc, #40]	; (80079f4 <xPortStartScheduler+0xdc>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079ce:	f7ff ff93 	bl	80078f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079d2:	f7ff fd8d 	bl	80074f0 <vTaskSwitchContext>
	prvTaskExitError();
 80079d6:	f7ff ff4d 	bl	8007874 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	e000e400 	.word	0xe000e400
 80079e8:	20000788 	.word	0x20000788
 80079ec:	2000078c 	.word	0x2000078c
 80079f0:	e000ed20 	.word	0xe000ed20
 80079f4:	2000011c 	.word	0x2000011c

080079f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a10:	4b0e      	ldr	r3, [pc, #56]	; (8007a4c <vPortEnterCritical+0x54>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	3301      	adds	r3, #1
 8007a16:	4a0d      	ldr	r2, [pc, #52]	; (8007a4c <vPortEnterCritical+0x54>)
 8007a18:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a1a:	4b0c      	ldr	r3, [pc, #48]	; (8007a4c <vPortEnterCritical+0x54>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d10e      	bne.n	8007a40 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a22:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <vPortEnterCritical+0x58>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d009      	beq.n	8007a40 <vPortEnterCritical+0x48>
 8007a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	603b      	str	r3, [r7, #0]
 8007a3e:	e7fe      	b.n	8007a3e <vPortEnterCritical+0x46>
	}
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bc80      	pop	{r7}
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	2000011c 	.word	0x2000011c
 8007a50:	e000ed04 	.word	0xe000ed04

08007a54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a5a:	4b10      	ldr	r3, [pc, #64]	; (8007a9c <vPortExitCritical+0x48>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d109      	bne.n	8007a76 <vPortExitCritical+0x22>
 8007a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	607b      	str	r3, [r7, #4]
 8007a74:	e7fe      	b.n	8007a74 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007a76:	4b09      	ldr	r3, [pc, #36]	; (8007a9c <vPortExitCritical+0x48>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	4a07      	ldr	r2, [pc, #28]	; (8007a9c <vPortExitCritical+0x48>)
 8007a7e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a80:	4b06      	ldr	r3, [pc, #24]	; (8007a9c <vPortExitCritical+0x48>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d104      	bne.n	8007a92 <vPortExitCritical+0x3e>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a92:	bf00      	nop
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bc80      	pop	{r7}
 8007a9a:	4770      	bx	lr
 8007a9c:	2000011c 	.word	0x2000011c

08007aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007aa0:	f3ef 8009 	mrs	r0, PSP
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	4b0d      	ldr	r3, [pc, #52]	; (8007ae0 <pxCurrentTCBConst>)
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007ab0:	6010      	str	r0, [r2, #0]
 8007ab2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007ab6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007aba:	f380 8811 	msr	BASEPRI, r0
 8007abe:	f7ff fd17 	bl	80074f0 <vTaskSwitchContext>
 8007ac2:	f04f 0000 	mov.w	r0, #0
 8007ac6:	f380 8811 	msr	BASEPRI, r0
 8007aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007ace:	6819      	ldr	r1, [r3, #0]
 8007ad0:	6808      	ldr	r0, [r1, #0]
 8007ad2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007ad6:	f380 8809 	msr	PSP, r0
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	4770      	bx	lr

08007ae0 <pxCurrentTCBConst>:
 8007ae0:	2000065c 	.word	0x2000065c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ae4:	bf00      	nop
 8007ae6:	bf00      	nop

08007ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b00:	f7ff fc3a 	bl	8007378 <xTaskIncrementTick>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d003      	beq.n	8007b12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b0a:	4b06      	ldr	r3, [pc, #24]	; (8007b24 <SysTick_Handler+0x3c>)
 8007b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b10:	601a      	str	r2, [r3, #0]
 8007b12:	2300      	movs	r3, #0
 8007b14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b1c:	bf00      	nop
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	e000ed04 	.word	0xe000ed04

08007b28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b28:	b480      	push	{r7}
 8007b2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b2c:	4b0a      	ldr	r3, [pc, #40]	; (8007b58 <vPortSetupTimerInterrupt+0x30>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b32:	4b0a      	ldr	r3, [pc, #40]	; (8007b5c <vPortSetupTimerInterrupt+0x34>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b38:	4b09      	ldr	r3, [pc, #36]	; (8007b60 <vPortSetupTimerInterrupt+0x38>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a09      	ldr	r2, [pc, #36]	; (8007b64 <vPortSetupTimerInterrupt+0x3c>)
 8007b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b42:	099b      	lsrs	r3, r3, #6
 8007b44:	4a08      	ldr	r2, [pc, #32]	; (8007b68 <vPortSetupTimerInterrupt+0x40>)
 8007b46:	3b01      	subs	r3, #1
 8007b48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b4a:	4b03      	ldr	r3, [pc, #12]	; (8007b58 <vPortSetupTimerInterrupt+0x30>)
 8007b4c:	2207      	movs	r2, #7
 8007b4e:	601a      	str	r2, [r3, #0]
}
 8007b50:	bf00      	nop
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bc80      	pop	{r7}
 8007b56:	4770      	bx	lr
 8007b58:	e000e010 	.word	0xe000e010
 8007b5c:	e000e018 	.word	0xe000e018
 8007b60:	20000000 	.word	0x20000000
 8007b64:	10624dd3 	.word	0x10624dd3
 8007b68:	e000e014 	.word	0xe000e014

08007b6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b08a      	sub	sp, #40	; 0x28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b74:	2300      	movs	r3, #0
 8007b76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b78:	f7ff fb54 	bl	8007224 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b7c:	4b57      	ldr	r3, [pc, #348]	; (8007cdc <pvPortMalloc+0x170>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b84:	f000 f90c 	bl	8007da0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b88:	4b55      	ldr	r3, [pc, #340]	; (8007ce0 <pvPortMalloc+0x174>)
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4013      	ands	r3, r2
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f040 808c 	bne.w	8007cae <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d01c      	beq.n	8007bd6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007b9c:	2208      	movs	r2, #8
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d013      	beq.n	8007bd6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f023 0307 	bic.w	r3, r3, #7
 8007bb4:	3308      	adds	r3, #8
 8007bb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f003 0307 	and.w	r3, r3, #7
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d009      	beq.n	8007bd6 <pvPortMalloc+0x6a>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	617b      	str	r3, [r7, #20]
 8007bd4:	e7fe      	b.n	8007bd4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d068      	beq.n	8007cae <pvPortMalloc+0x142>
 8007bdc:	4b41      	ldr	r3, [pc, #260]	; (8007ce4 <pvPortMalloc+0x178>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d863      	bhi.n	8007cae <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007be6:	4b40      	ldr	r3, [pc, #256]	; (8007ce8 <pvPortMalloc+0x17c>)
 8007be8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bea:	4b3f      	ldr	r3, [pc, #252]	; (8007ce8 <pvPortMalloc+0x17c>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bf0:	e004      	b.n	8007bfc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d903      	bls.n	8007c0e <pvPortMalloc+0xa2>
 8007c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1f1      	bne.n	8007bf2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c0e:	4b33      	ldr	r3, [pc, #204]	; (8007cdc <pvPortMalloc+0x170>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d04a      	beq.n	8007cae <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2208      	movs	r2, #8
 8007c1e:	4413      	add	r3, r2
 8007c20:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	1ad2      	subs	r2, r2, r3
 8007c32:	2308      	movs	r3, #8
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d91e      	bls.n	8007c78 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4413      	add	r3, r2
 8007c40:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	f003 0307 	and.w	r3, r3, #7
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d009      	beq.n	8007c60 <pvPortMalloc+0xf4>
 8007c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	613b      	str	r3, [r7, #16]
 8007c5e:	e7fe      	b.n	8007c5e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	1ad2      	subs	r2, r2, r3
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c72:	69b8      	ldr	r0, [r7, #24]
 8007c74:	f000 f8f6 	bl	8007e64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c78:	4b1a      	ldr	r3, [pc, #104]	; (8007ce4 <pvPortMalloc+0x178>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	4a18      	ldr	r2, [pc, #96]	; (8007ce4 <pvPortMalloc+0x178>)
 8007c84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c86:	4b17      	ldr	r3, [pc, #92]	; (8007ce4 <pvPortMalloc+0x178>)
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	4b18      	ldr	r3, [pc, #96]	; (8007cec <pvPortMalloc+0x180>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d203      	bcs.n	8007c9a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c92:	4b14      	ldr	r3, [pc, #80]	; (8007ce4 <pvPortMalloc+0x178>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a15      	ldr	r2, [pc, #84]	; (8007cec <pvPortMalloc+0x180>)
 8007c98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	4b10      	ldr	r3, [pc, #64]	; (8007ce0 <pvPortMalloc+0x174>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	2200      	movs	r2, #0
 8007cac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cae:	f7ff fac7 	bl	8007240 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	f003 0307 	and.w	r3, r3, #7
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d009      	beq.n	8007cd0 <pvPortMalloc+0x164>
 8007cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	60fb      	str	r3, [r7, #12]
 8007cce:	e7fe      	b.n	8007cce <pvPortMalloc+0x162>
	return pvReturn;
 8007cd0:	69fb      	ldr	r3, [r7, #28]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3728      	adds	r7, #40	; 0x28
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20001398 	.word	0x20001398
 8007ce0:	200013a4 	.word	0x200013a4
 8007ce4:	2000139c 	.word	0x2000139c
 8007ce8:	20001390 	.word	0x20001390
 8007cec:	200013a0 	.word	0x200013a0

08007cf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d046      	beq.n	8007d90 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d02:	2308      	movs	r3, #8
 8007d04:	425b      	negs	r3, r3
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	4413      	add	r3, r2
 8007d0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	4b20      	ldr	r3, [pc, #128]	; (8007d98 <vPortFree+0xa8>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4013      	ands	r3, r2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d109      	bne.n	8007d32 <vPortFree+0x42>
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	60fb      	str	r3, [r7, #12]
 8007d30:	e7fe      	b.n	8007d30 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d009      	beq.n	8007d4e <vPortFree+0x5e>
 8007d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	60bb      	str	r3, [r7, #8]
 8007d4c:	e7fe      	b.n	8007d4c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	685a      	ldr	r2, [r3, #4]
 8007d52:	4b11      	ldr	r3, [pc, #68]	; (8007d98 <vPortFree+0xa8>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4013      	ands	r3, r2
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d019      	beq.n	8007d90 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d115      	bne.n	8007d90 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	4b0b      	ldr	r3, [pc, #44]	; (8007d98 <vPortFree+0xa8>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	43db      	mvns	r3, r3
 8007d6e:	401a      	ands	r2, r3
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d74:	f7ff fa56 	bl	8007224 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	4b07      	ldr	r3, [pc, #28]	; (8007d9c <vPortFree+0xac>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4413      	add	r3, r2
 8007d82:	4a06      	ldr	r2, [pc, #24]	; (8007d9c <vPortFree+0xac>)
 8007d84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d86:	6938      	ldr	r0, [r7, #16]
 8007d88:	f000 f86c 	bl	8007e64 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007d8c:	f7ff fa58 	bl	8007240 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d90:	bf00      	nop
 8007d92:	3718      	adds	r7, #24
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	200013a4 	.word	0x200013a4
 8007d9c:	2000139c 	.word	0x2000139c

08007da0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007da6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007daa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007dac:	4b27      	ldr	r3, [pc, #156]	; (8007e4c <prvHeapInit+0xac>)
 8007dae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f003 0307 	and.w	r3, r3, #7
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00c      	beq.n	8007dd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	3307      	adds	r3, #7
 8007dbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f023 0307 	bic.w	r3, r3, #7
 8007dc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	4a1f      	ldr	r2, [pc, #124]	; (8007e4c <prvHeapInit+0xac>)
 8007dd0:	4413      	add	r3, r2
 8007dd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dd8:	4a1d      	ldr	r2, [pc, #116]	; (8007e50 <prvHeapInit+0xb0>)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007dde:	4b1c      	ldr	r3, [pc, #112]	; (8007e50 <prvHeapInit+0xb0>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	4413      	add	r3, r2
 8007dea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007dec:	2208      	movs	r2, #8
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	1a9b      	subs	r3, r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f023 0307 	bic.w	r3, r3, #7
 8007dfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4a15      	ldr	r2, [pc, #84]	; (8007e54 <prvHeapInit+0xb4>)
 8007e00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e02:	4b14      	ldr	r3, [pc, #80]	; (8007e54 <prvHeapInit+0xb4>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2200      	movs	r2, #0
 8007e08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e0a:	4b12      	ldr	r3, [pc, #72]	; (8007e54 <prvHeapInit+0xb4>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	1ad2      	subs	r2, r2, r3
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e20:	4b0c      	ldr	r3, [pc, #48]	; (8007e54 <prvHeapInit+0xb4>)
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	4a0a      	ldr	r2, [pc, #40]	; (8007e58 <prvHeapInit+0xb8>)
 8007e2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	4a09      	ldr	r2, [pc, #36]	; (8007e5c <prvHeapInit+0xbc>)
 8007e36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e38:	4b09      	ldr	r3, [pc, #36]	; (8007e60 <prvHeapInit+0xc0>)
 8007e3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e3e:	601a      	str	r2, [r3, #0]
}
 8007e40:	bf00      	nop
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bc80      	pop	{r7}
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	20000790 	.word	0x20000790
 8007e50:	20001390 	.word	0x20001390
 8007e54:	20001398 	.word	0x20001398
 8007e58:	200013a0 	.word	0x200013a0
 8007e5c:	2000139c 	.word	0x2000139c
 8007e60:	200013a4 	.word	0x200013a4

08007e64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e6c:	4b27      	ldr	r3, [pc, #156]	; (8007f0c <prvInsertBlockIntoFreeList+0xa8>)
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	e002      	b.n	8007e78 <prvInsertBlockIntoFreeList+0x14>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	60fb      	str	r3, [r7, #12]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d8f7      	bhi.n	8007e72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d108      	bne.n	8007ea6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	441a      	add	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	441a      	add	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d118      	bne.n	8007eec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	4b14      	ldr	r3, [pc, #80]	; (8007f10 <prvInsertBlockIntoFreeList+0xac>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d00d      	beq.n	8007ee2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685a      	ldr	r2, [r3, #4]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	441a      	add	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	601a      	str	r2, [r3, #0]
 8007ee0:	e008      	b.n	8007ef4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ee2:	4b0b      	ldr	r3, [pc, #44]	; (8007f10 <prvInsertBlockIntoFreeList+0xac>)
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	601a      	str	r2, [r3, #0]
 8007eea:	e003      	b.n	8007ef4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d002      	beq.n	8007f02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f02:	bf00      	nop
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bc80      	pop	{r7}
 8007f0a:	4770      	bx	lr
 8007f0c:	20001390 	.word	0x20001390
 8007f10:	20001398 	.word	0x20001398

08007f14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	4912      	ldr	r1, [pc, #72]	; (8007f64 <MX_USB_DEVICE_Init+0x50>)
 8007f1c:	4812      	ldr	r0, [pc, #72]	; (8007f68 <MX_USB_DEVICE_Init+0x54>)
 8007f1e:	f7fd fdaf 	bl	8005a80 <USBD_Init>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d001      	beq.n	8007f2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f28:	f7f8 ff68 	bl	8000dfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f2c:	490f      	ldr	r1, [pc, #60]	; (8007f6c <MX_USB_DEVICE_Init+0x58>)
 8007f2e:	480e      	ldr	r0, [pc, #56]	; (8007f68 <MX_USB_DEVICE_Init+0x54>)
 8007f30:	f7fd fdd1 	bl	8005ad6 <USBD_RegisterClass>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f3a:	f7f8 ff5f 	bl	8000dfc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f3e:	490c      	ldr	r1, [pc, #48]	; (8007f70 <MX_USB_DEVICE_Init+0x5c>)
 8007f40:	4809      	ldr	r0, [pc, #36]	; (8007f68 <MX_USB_DEVICE_Init+0x54>)
 8007f42:	f7fd fd31 	bl	80059a8 <USBD_CDC_RegisterInterface>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f4c:	f7f8 ff56 	bl	8000dfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f50:	4805      	ldr	r0, [pc, #20]	; (8007f68 <MX_USB_DEVICE_Init+0x54>)
 8007f52:	f7fd fdd9 	bl	8005b08 <USBD_Start>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f5c:	f7f8 ff4e 	bl	8000dfc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f60:	bf00      	nop
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	20000130 	.word	0x20000130
 8007f68:	20001684 	.word	0x20001684
 8007f6c:	20000018 	.word	0x20000018
 8007f70:	20000120 	.word	0x20000120

08007f74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007f78:	2200      	movs	r2, #0
 8007f7a:	4905      	ldr	r1, [pc, #20]	; (8007f90 <CDC_Init_FS+0x1c>)
 8007f7c:	4805      	ldr	r0, [pc, #20]	; (8007f94 <CDC_Init_FS+0x20>)
 8007f7e:	f7fd fd29 	bl	80059d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007f82:	4905      	ldr	r1, [pc, #20]	; (8007f98 <CDC_Init_FS+0x24>)
 8007f84:	4803      	ldr	r0, [pc, #12]	; (8007f94 <CDC_Init_FS+0x20>)
 8007f86:	f7fd fd3e 	bl	8005a06 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007f8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	20001d30 	.word	0x20001d30
 8007f94:	20001684 	.word	0x20001684
 8007f98:	20001948 	.word	0x20001948

08007f9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007fa0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bc80      	pop	{r7}
 8007fa8:	4770      	bx	lr
	...

08007fac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	6039      	str	r1, [r7, #0]
 8007fb6:	71fb      	strb	r3, [r7, #7]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007fbc:	79fb      	ldrb	r3, [r7, #7]
 8007fbe:	2b23      	cmp	r3, #35	; 0x23
 8007fc0:	d84a      	bhi.n	8008058 <CDC_Control_FS+0xac>
 8007fc2:	a201      	add	r2, pc, #4	; (adr r2, 8007fc8 <CDC_Control_FS+0x1c>)
 8007fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc8:	08008059 	.word	0x08008059
 8007fcc:	08008059 	.word	0x08008059
 8007fd0:	08008059 	.word	0x08008059
 8007fd4:	08008059 	.word	0x08008059
 8007fd8:	08008059 	.word	0x08008059
 8007fdc:	08008059 	.word	0x08008059
 8007fe0:	08008059 	.word	0x08008059
 8007fe4:	08008059 	.word	0x08008059
 8007fe8:	08008059 	.word	0x08008059
 8007fec:	08008059 	.word	0x08008059
 8007ff0:	08008059 	.word	0x08008059
 8007ff4:	08008059 	.word	0x08008059
 8007ff8:	08008059 	.word	0x08008059
 8007ffc:	08008059 	.word	0x08008059
 8008000:	08008059 	.word	0x08008059
 8008004:	08008059 	.word	0x08008059
 8008008:	08008059 	.word	0x08008059
 800800c:	08008059 	.word	0x08008059
 8008010:	08008059 	.word	0x08008059
 8008014:	08008059 	.word	0x08008059
 8008018:	08008059 	.word	0x08008059
 800801c:	08008059 	.word	0x08008059
 8008020:	08008059 	.word	0x08008059
 8008024:	08008059 	.word	0x08008059
 8008028:	08008059 	.word	0x08008059
 800802c:	08008059 	.word	0x08008059
 8008030:	08008059 	.word	0x08008059
 8008034:	08008059 	.word	0x08008059
 8008038:	08008059 	.word	0x08008059
 800803c:	08008059 	.word	0x08008059
 8008040:	08008059 	.word	0x08008059
 8008044:	08008059 	.word	0x08008059
 8008048:	08008059 	.word	0x08008059
 800804c:	08008059 	.word	0x08008059
 8008050:	08008059 	.word	0x08008059
 8008054:	08008059 	.word	0x08008059
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008058:	bf00      	nop
  }

  return (USBD_OK);
 800805a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	bc80      	pop	{r7}
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop

08008068 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008072:	6879      	ldr	r1, [r7, #4]
 8008074:	4805      	ldr	r0, [pc, #20]	; (800808c <CDC_Receive_FS+0x24>)
 8008076:	f7fd fcc6 	bl	8005a06 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800807a:	4804      	ldr	r0, [pc, #16]	; (800808c <CDC_Receive_FS+0x24>)
 800807c:	f7fd fcd6 	bl	8005a2c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008080:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20001684 	.word	0x20001684

08008090 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	6039      	str	r1, [r7, #0]
 800809a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	2212      	movs	r2, #18
 80080a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80080a2:	4b03      	ldr	r3, [pc, #12]	; (80080b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bc80      	pop	{r7}
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	2000014c 	.word	0x2000014c

080080b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	4603      	mov	r3, r0
 80080bc:	6039      	str	r1, [r7, #0]
 80080be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	2204      	movs	r2, #4
 80080c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80080c6:	4b03      	ldr	r3, [pc, #12]	; (80080d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bc80      	pop	{r7}
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	20000160 	.word	0x20000160

080080d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	4603      	mov	r3, r0
 80080e0:	6039      	str	r1, [r7, #0]
 80080e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080e4:	79fb      	ldrb	r3, [r7, #7]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d105      	bne.n	80080f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	4907      	ldr	r1, [pc, #28]	; (800810c <USBD_FS_ProductStrDescriptor+0x34>)
 80080ee:	4808      	ldr	r0, [pc, #32]	; (8008110 <USBD_FS_ProductStrDescriptor+0x38>)
 80080f0:	f7fe fc75 	bl	80069de <USBD_GetString>
 80080f4:	e004      	b.n	8008100 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	4904      	ldr	r1, [pc, #16]	; (800810c <USBD_FS_ProductStrDescriptor+0x34>)
 80080fa:	4805      	ldr	r0, [pc, #20]	; (8008110 <USBD_FS_ProductStrDescriptor+0x38>)
 80080fc:	f7fe fc6f 	bl	80069de <USBD_GetString>
  }
  return USBD_StrDesc;
 8008100:	4b02      	ldr	r3, [pc, #8]	; (800810c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008102:	4618      	mov	r0, r3
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	20002118 	.word	0x20002118
 8008110:	080088e8 	.word	0x080088e8

08008114 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	4603      	mov	r3, r0
 800811c:	6039      	str	r1, [r7, #0]
 800811e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	4904      	ldr	r1, [pc, #16]	; (8008134 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008124:	4804      	ldr	r0, [pc, #16]	; (8008138 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008126:	f7fe fc5a 	bl	80069de <USBD_GetString>
  return USBD_StrDesc;
 800812a:	4b02      	ldr	r3, [pc, #8]	; (8008134 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800812c:	4618      	mov	r0, r3
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20002118 	.word	0x20002118
 8008138:	08008900 	.word	0x08008900

0800813c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	4603      	mov	r3, r0
 8008144:	6039      	str	r1, [r7, #0]
 8008146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	221a      	movs	r2, #26
 800814c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800814e:	f000 f843 	bl	80081d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008152:	4b02      	ldr	r3, [pc, #8]	; (800815c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008154:	4618      	mov	r0, r3
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	20000164 	.word	0x20000164

08008160 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	4603      	mov	r3, r0
 8008168:	6039      	str	r1, [r7, #0]
 800816a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800816c:	79fb      	ldrb	r3, [r7, #7]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d105      	bne.n	800817e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	4907      	ldr	r1, [pc, #28]	; (8008194 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008176:	4808      	ldr	r0, [pc, #32]	; (8008198 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008178:	f7fe fc31 	bl	80069de <USBD_GetString>
 800817c:	e004      	b.n	8008188 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	4904      	ldr	r1, [pc, #16]	; (8008194 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008182:	4805      	ldr	r0, [pc, #20]	; (8008198 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008184:	f7fe fc2b 	bl	80069de <USBD_GetString>
  }
  return USBD_StrDesc;
 8008188:	4b02      	ldr	r3, [pc, #8]	; (8008194 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800818a:	4618      	mov	r0, r3
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	20002118 	.word	0x20002118
 8008198:	08008914 	.word	0x08008914

0800819c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	4603      	mov	r3, r0
 80081a4:	6039      	str	r1, [r7, #0]
 80081a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081a8:	79fb      	ldrb	r3, [r7, #7]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d105      	bne.n	80081ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	4907      	ldr	r1, [pc, #28]	; (80081d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081b2:	4808      	ldr	r0, [pc, #32]	; (80081d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081b4:	f7fe fc13 	bl	80069de <USBD_GetString>
 80081b8:	e004      	b.n	80081c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081ba:	683a      	ldr	r2, [r7, #0]
 80081bc:	4904      	ldr	r1, [pc, #16]	; (80081d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081be:	4805      	ldr	r0, [pc, #20]	; (80081d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081c0:	f7fe fc0d 	bl	80069de <USBD_GetString>
  }
  return USBD_StrDesc;
 80081c4:	4b02      	ldr	r3, [pc, #8]	; (80081d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20002118 	.word	0x20002118
 80081d4:	08008920 	.word	0x08008920

080081d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80081de:	4b0f      	ldr	r3, [pc, #60]	; (800821c <Get_SerialNum+0x44>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80081e4:	4b0e      	ldr	r3, [pc, #56]	; (8008220 <Get_SerialNum+0x48>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80081ea:	4b0e      	ldr	r3, [pc, #56]	; (8008224 <Get_SerialNum+0x4c>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4413      	add	r3, r2
 80081f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d009      	beq.n	8008212 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80081fe:	2208      	movs	r2, #8
 8008200:	4909      	ldr	r1, [pc, #36]	; (8008228 <Get_SerialNum+0x50>)
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 f814 	bl	8008230 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008208:	2204      	movs	r2, #4
 800820a:	4908      	ldr	r1, [pc, #32]	; (800822c <Get_SerialNum+0x54>)
 800820c:	68b8      	ldr	r0, [r7, #8]
 800820e:	f000 f80f 	bl	8008230 <IntToUnicode>
  }
}
 8008212:	bf00      	nop
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	1ffff7e8 	.word	0x1ffff7e8
 8008220:	1ffff7ec 	.word	0x1ffff7ec
 8008224:	1ffff7f0 	.word	0x1ffff7f0
 8008228:	20000166 	.word	0x20000166
 800822c:	20000176 	.word	0x20000176

08008230 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008230:	b480      	push	{r7}
 8008232:	b087      	sub	sp, #28
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	4613      	mov	r3, r2
 800823c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800823e:	2300      	movs	r3, #0
 8008240:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008242:	2300      	movs	r3, #0
 8008244:	75fb      	strb	r3, [r7, #23]
 8008246:	e027      	b.n	8008298 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	0f1b      	lsrs	r3, r3, #28
 800824c:	2b09      	cmp	r3, #9
 800824e:	d80b      	bhi.n	8008268 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	0f1b      	lsrs	r3, r3, #28
 8008254:	b2da      	uxtb	r2, r3
 8008256:	7dfb      	ldrb	r3, [r7, #23]
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	4619      	mov	r1, r3
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	440b      	add	r3, r1
 8008260:	3230      	adds	r2, #48	; 0x30
 8008262:	b2d2      	uxtb	r2, r2
 8008264:	701a      	strb	r2, [r3, #0]
 8008266:	e00a      	b.n	800827e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	0f1b      	lsrs	r3, r3, #28
 800826c:	b2da      	uxtb	r2, r3
 800826e:	7dfb      	ldrb	r3, [r7, #23]
 8008270:	005b      	lsls	r3, r3, #1
 8008272:	4619      	mov	r1, r3
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	440b      	add	r3, r1
 8008278:	3237      	adds	r2, #55	; 0x37
 800827a:	b2d2      	uxtb	r2, r2
 800827c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	011b      	lsls	r3, r3, #4
 8008282:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008284:	7dfb      	ldrb	r3, [r7, #23]
 8008286:	005b      	lsls	r3, r3, #1
 8008288:	3301      	adds	r3, #1
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	4413      	add	r3, r2
 800828e:	2200      	movs	r2, #0
 8008290:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008292:	7dfb      	ldrb	r3, [r7, #23]
 8008294:	3301      	adds	r3, #1
 8008296:	75fb      	strb	r3, [r7, #23]
 8008298:	7dfa      	ldrb	r2, [r7, #23]
 800829a:	79fb      	ldrb	r3, [r7, #7]
 800829c:	429a      	cmp	r2, r3
 800829e:	d3d3      	bcc.n	8008248 <IntToUnicode+0x18>
  }
}
 80082a0:	bf00      	nop
 80082a2:	371c      	adds	r7, #28
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bc80      	pop	{r7}
 80082a8:	4770      	bx	lr
	...

080082ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a0d      	ldr	r2, [pc, #52]	; (80082f0 <HAL_PCD_MspInit+0x44>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d113      	bne.n	80082e6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80082be:	4b0d      	ldr	r3, [pc, #52]	; (80082f4 <HAL_PCD_MspInit+0x48>)
 80082c0:	69db      	ldr	r3, [r3, #28]
 80082c2:	4a0c      	ldr	r2, [pc, #48]	; (80082f4 <HAL_PCD_MspInit+0x48>)
 80082c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80082c8:	61d3      	str	r3, [r2, #28]
 80082ca:	4b0a      	ldr	r3, [pc, #40]	; (80082f4 <HAL_PCD_MspInit+0x48>)
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80082d6:	2200      	movs	r2, #0
 80082d8:	2100      	movs	r1, #0
 80082da:	2014      	movs	r0, #20
 80082dc:	f7f9 fe6d 	bl	8001fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80082e0:	2014      	movs	r0, #20
 80082e2:	f7f9 fe86 	bl	8001ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80082e6:	bf00      	nop
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	40005c00 	.word	0x40005c00
 80082f4:	40021000 	.word	0x40021000

080082f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800830c:	4619      	mov	r1, r3
 800830e:	4610      	mov	r0, r2
 8008310:	f7fd fc42 	bl	8005b98 <USBD_LL_SetupStage>
}
 8008314:	bf00      	nop
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800832e:	78fb      	ldrb	r3, [r7, #3]
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	015b      	lsls	r3, r3, #5
 8008334:	4413      	add	r3, r2
 8008336:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	78fb      	ldrb	r3, [r7, #3]
 800833e:	4619      	mov	r1, r3
 8008340:	f7fd fc75 	bl	8005c2e <USBD_LL_DataOutStage>
}
 8008344:	bf00      	nop
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	460b      	mov	r3, r1
 8008356:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800835e:	78fb      	ldrb	r3, [r7, #3]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	015b      	lsls	r3, r3, #5
 8008364:	4413      	add	r3, r2
 8008366:	333c      	adds	r3, #60	; 0x3c
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	78fb      	ldrb	r3, [r7, #3]
 800836c:	4619      	mov	r1, r3
 800836e:	f7fd fccf 	bl	8005d10 <USBD_LL_DataInStage>
}
 8008372:	bf00      	nop
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b082      	sub	sp, #8
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008388:	4618      	mov	r0, r3
 800838a:	f7fd fddf 	bl	8005f4c <USBD_LL_SOF>
}
 800838e:	bf00      	nop
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800839e:	2301      	movs	r3, #1
 80083a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d001      	beq.n	80083ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80083aa:	f7f8 fd27 	bl	8000dfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80083b4:	7bfa      	ldrb	r2, [r7, #15]
 80083b6:	4611      	mov	r1, r2
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7fd fd8f 	bl	8005edc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fd fd48 	bl	8005e5a <USBD_LL_Reset>
}
 80083ca:	bf00      	nop
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fd fd89 	bl	8005efa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d005      	beq.n	80083fc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80083f0:	4b04      	ldr	r3, [pc, #16]	; (8008404 <HAL_PCD_SuspendCallback+0x30>)
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	4a03      	ldr	r2, [pc, #12]	; (8008404 <HAL_PCD_SuspendCallback+0x30>)
 80083f6:	f043 0306 	orr.w	r3, r3, #6
 80083fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80083fc:	bf00      	nop
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	e000ed00 	.word	0xe000ed00

08008408 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008416:	4618      	mov	r0, r3
 8008418:	f7fd fd83 	bl	8005f22 <USBD_LL_Resume>
}
 800841c:	bf00      	nop
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800842c:	4a28      	ldr	r2, [pc, #160]	; (80084d0 <USBD_LL_Init+0xac>)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a26      	ldr	r2, [pc, #152]	; (80084d0 <USBD_LL_Init+0xac>)
 8008438:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800843c:	4b24      	ldr	r3, [pc, #144]	; (80084d0 <USBD_LL_Init+0xac>)
 800843e:	4a25      	ldr	r2, [pc, #148]	; (80084d4 <USBD_LL_Init+0xb0>)
 8008440:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008442:	4b23      	ldr	r3, [pc, #140]	; (80084d0 <USBD_LL_Init+0xac>)
 8008444:	2208      	movs	r2, #8
 8008446:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008448:	4b21      	ldr	r3, [pc, #132]	; (80084d0 <USBD_LL_Init+0xac>)
 800844a:	2202      	movs	r2, #2
 800844c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800844e:	4b20      	ldr	r3, [pc, #128]	; (80084d0 <USBD_LL_Init+0xac>)
 8008450:	2200      	movs	r2, #0
 8008452:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008454:	4b1e      	ldr	r3, [pc, #120]	; (80084d0 <USBD_LL_Init+0xac>)
 8008456:	2200      	movs	r2, #0
 8008458:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800845a:	4b1d      	ldr	r3, [pc, #116]	; (80084d0 <USBD_LL_Init+0xac>)
 800845c:	2200      	movs	r2, #0
 800845e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008460:	481b      	ldr	r0, [pc, #108]	; (80084d0 <USBD_LL_Init+0xac>)
 8008462:	f7fa f94c 	bl	80026fe <HAL_PCD_Init>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800846c:	f7f8 fcc6 	bl	8000dfc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008476:	2318      	movs	r3, #24
 8008478:	2200      	movs	r2, #0
 800847a:	2100      	movs	r1, #0
 800847c:	f7fa ffe4 	bl	8003448 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008486:	2358      	movs	r3, #88	; 0x58
 8008488:	2200      	movs	r2, #0
 800848a:	2180      	movs	r1, #128	; 0x80
 800848c:	f7fa ffdc 	bl	8003448 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008496:	23c0      	movs	r3, #192	; 0xc0
 8008498:	2200      	movs	r2, #0
 800849a:	2181      	movs	r1, #129	; 0x81
 800849c:	f7fa ffd4 	bl	8003448 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084a6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80084aa:	2200      	movs	r2, #0
 80084ac:	2101      	movs	r1, #1
 80084ae:	f7fa ffcb 	bl	8003448 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084bc:	2200      	movs	r2, #0
 80084be:	2182      	movs	r1, #130	; 0x82
 80084c0:	f7fa ffc2 	bl	8003448 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	20002318 	.word	0x20002318
 80084d4:	40005c00 	.word	0x40005c00

080084d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e0:	2300      	movs	r3, #0
 80084e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084e4:	2300      	movs	r3, #0
 80084e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fa f9e6 	bl	80028c0 <HAL_PCD_Start>
 80084f4:	4603      	mov	r3, r0
 80084f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 f948 	bl	8008790 <USBD_Get_USB_Status>
 8008500:	4603      	mov	r3, r0
 8008502:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008504:	7bbb      	ldrb	r3, [r7, #14]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b084      	sub	sp, #16
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	4608      	mov	r0, r1
 8008518:	4611      	mov	r1, r2
 800851a:	461a      	mov	r2, r3
 800851c:	4603      	mov	r3, r0
 800851e:	70fb      	strb	r3, [r7, #3]
 8008520:	460b      	mov	r3, r1
 8008522:	70bb      	strb	r3, [r7, #2]
 8008524:	4613      	mov	r3, r2
 8008526:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008536:	78bb      	ldrb	r3, [r7, #2]
 8008538:	883a      	ldrh	r2, [r7, #0]
 800853a:	78f9      	ldrb	r1, [r7, #3]
 800853c:	f7fa fb19 	bl	8002b72 <HAL_PCD_EP_Open>
 8008540:	4603      	mov	r3, r0
 8008542:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008544:	7bfb      	ldrb	r3, [r7, #15]
 8008546:	4618      	mov	r0, r3
 8008548:	f000 f922 	bl	8008790 <USBD_Get_USB_Status>
 800854c:	4603      	mov	r3, r0
 800854e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008550:	7bbb      	ldrb	r3, [r7, #14]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b084      	sub	sp, #16
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	460b      	mov	r3, r1
 8008564:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008566:	2300      	movs	r3, #0
 8008568:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008574:	78fa      	ldrb	r2, [r7, #3]
 8008576:	4611      	mov	r1, r2
 8008578:	4618      	mov	r0, r3
 800857a:	f7fa fb5a 	bl	8002c32 <HAL_PCD_EP_Close>
 800857e:	4603      	mov	r3, r0
 8008580:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008582:	7bfb      	ldrb	r3, [r7, #15]
 8008584:	4618      	mov	r0, r3
 8008586:	f000 f903 	bl	8008790 <USBD_Get_USB_Status>
 800858a:	4603      	mov	r3, r0
 800858c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800858e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	460b      	mov	r3, r1
 80085a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085b2:	78fa      	ldrb	r2, [r7, #3]
 80085b4:	4611      	mov	r1, r2
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fa fc04 	bl	8002dc4 <HAL_PCD_EP_SetStall>
 80085bc:	4603      	mov	r3, r0
 80085be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 f8e4 	bl	8008790 <USBD_Get_USB_Status>
 80085c8:	4603      	mov	r3, r0
 80085ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b084      	sub	sp, #16
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	460b      	mov	r3, r1
 80085e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085f0:	78fa      	ldrb	r2, [r7, #3]
 80085f2:	4611      	mov	r1, r2
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7fa fc3f 	bl	8002e78 <HAL_PCD_EP_ClrStall>
 80085fa:	4603      	mov	r3, r0
 80085fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
 8008600:	4618      	mov	r0, r3
 8008602:	f000 f8c5 	bl	8008790 <USBD_Get_USB_Status>
 8008606:	4603      	mov	r3, r0
 8008608:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800860a:	7bbb      	ldrb	r3, [r7, #14]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	460b      	mov	r3, r1
 800861e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008626:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008628:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800862c:	2b00      	cmp	r3, #0
 800862e:	da08      	bge.n	8008642 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008630:	78fb      	ldrb	r3, [r7, #3]
 8008632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	015b      	lsls	r3, r3, #5
 800863a:	4413      	add	r3, r2
 800863c:	332a      	adds	r3, #42	; 0x2a
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	e008      	b.n	8008654 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008642:	78fb      	ldrb	r3, [r7, #3]
 8008644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	015b      	lsls	r3, r3, #5
 800864c:	4413      	add	r3, r2
 800864e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008652:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008654:	4618      	mov	r0, r3
 8008656:	3714      	adds	r7, #20
 8008658:	46bd      	mov	sp, r7
 800865a:	bc80      	pop	{r7}
 800865c:	4770      	bx	lr

0800865e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	460b      	mov	r3, r1
 8008668:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008678:	78fa      	ldrb	r2, [r7, #3]
 800867a:	4611      	mov	r1, r2
 800867c:	4618      	mov	r0, r3
 800867e:	f7fa fa53 	bl	8002b28 <HAL_PCD_SetAddress>
 8008682:	4603      	mov	r3, r0
 8008684:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008686:	7bfb      	ldrb	r3, [r7, #15]
 8008688:	4618      	mov	r0, r3
 800868a:	f000 f881 	bl	8008790 <USBD_Get_USB_Status>
 800868e:	4603      	mov	r3, r0
 8008690:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008692:	7bbb      	ldrb	r3, [r7, #14]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	607a      	str	r2, [r7, #4]
 80086a6:	461a      	mov	r2, r3
 80086a8:	460b      	mov	r3, r1
 80086aa:	72fb      	strb	r3, [r7, #11]
 80086ac:	4613      	mov	r3, r2
 80086ae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80086be:	893b      	ldrh	r3, [r7, #8]
 80086c0:	7af9      	ldrb	r1, [r7, #11]
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	f7fa fb45 	bl	8002d52 <HAL_PCD_EP_Transmit>
 80086c8:	4603      	mov	r3, r0
 80086ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086cc:	7dfb      	ldrb	r3, [r7, #23]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 f85e 	bl	8008790 <USBD_Get_USB_Status>
 80086d4:	4603      	mov	r3, r0
 80086d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3718      	adds	r7, #24
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b086      	sub	sp, #24
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	607a      	str	r2, [r7, #4]
 80086ec:	461a      	mov	r2, r3
 80086ee:	460b      	mov	r3, r1
 80086f0:	72fb      	strb	r3, [r7, #11]
 80086f2:	4613      	mov	r3, r2
 80086f4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008704:	893b      	ldrh	r3, [r7, #8]
 8008706:	7af9      	ldrb	r1, [r7, #11]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	f7fa fad4 	bl	8002cb6 <HAL_PCD_EP_Receive>
 800870e:	4603      	mov	r3, r0
 8008710:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008712:	7dfb      	ldrb	r3, [r7, #23]
 8008714:	4618      	mov	r0, r3
 8008716:	f000 f83b 	bl	8008790 <USBD_Get_USB_Status>
 800871a:	4603      	mov	r3, r0
 800871c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800871e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3718      	adds	r7, #24
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800873a:	78fa      	ldrb	r2, [r7, #3]
 800873c:	4611      	mov	r1, r2
 800873e:	4618      	mov	r0, r3
 8008740:	f7fa faf3 	bl	8002d2a <HAL_PCD_EP_GetRxCount>
 8008744:	4603      	mov	r3, r0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
	...

08008750 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008758:	4b02      	ldr	r3, [pc, #8]	; (8008764 <USBD_static_malloc+0x14>)
}
 800875a:	4618      	mov	r0, r3
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	bc80      	pop	{r7}
 8008762:	4770      	bx	lr
 8008764:	200013a8 	.word	0x200013a8

08008768 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]

}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	bc80      	pop	{r7}
 8008778:	4770      	bx	lr

0800877a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800877a:	b480      	push	{r7}
 800877c:	b083      	sub	sp, #12
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	460b      	mov	r3, r1
 8008784:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008786:	bf00      	nop
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	bc80      	pop	{r7}
 800878e:	4770      	bx	lr

08008790 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	4603      	mov	r3, r0
 8008798:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800879e:	79fb      	ldrb	r3, [r7, #7]
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d817      	bhi.n	80087d4 <USBD_Get_USB_Status+0x44>
 80087a4:	a201      	add	r2, pc, #4	; (adr r2, 80087ac <USBD_Get_USB_Status+0x1c>)
 80087a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087aa:	bf00      	nop
 80087ac:	080087bd 	.word	0x080087bd
 80087b0:	080087c3 	.word	0x080087c3
 80087b4:	080087c9 	.word	0x080087c9
 80087b8:	080087cf 	.word	0x080087cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	73fb      	strb	r3, [r7, #15]
    break;
 80087c0:	e00b      	b.n	80087da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80087c2:	2302      	movs	r3, #2
 80087c4:	73fb      	strb	r3, [r7, #15]
    break;
 80087c6:	e008      	b.n	80087da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80087c8:	2301      	movs	r3, #1
 80087ca:	73fb      	strb	r3, [r7, #15]
    break;
 80087cc:	e005      	b.n	80087da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80087ce:	2302      	movs	r3, #2
 80087d0:	73fb      	strb	r3, [r7, #15]
    break;
 80087d2:	e002      	b.n	80087da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80087d4:	2302      	movs	r3, #2
 80087d6:	73fb      	strb	r3, [r7, #15]
    break;
 80087d8:	bf00      	nop
  }
  return usb_status;
 80087da:	7bfb      	ldrb	r3, [r7, #15]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bc80      	pop	{r7}
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop

080087e8 <__libc_init_array>:
 80087e8:	b570      	push	{r4, r5, r6, lr}
 80087ea:	2500      	movs	r5, #0
 80087ec:	4e0c      	ldr	r6, [pc, #48]	; (8008820 <__libc_init_array+0x38>)
 80087ee:	4c0d      	ldr	r4, [pc, #52]	; (8008824 <__libc_init_array+0x3c>)
 80087f0:	1ba4      	subs	r4, r4, r6
 80087f2:	10a4      	asrs	r4, r4, #2
 80087f4:	42a5      	cmp	r5, r4
 80087f6:	d109      	bne.n	800880c <__libc_init_array+0x24>
 80087f8:	f000 f822 	bl	8008840 <_init>
 80087fc:	2500      	movs	r5, #0
 80087fe:	4e0a      	ldr	r6, [pc, #40]	; (8008828 <__libc_init_array+0x40>)
 8008800:	4c0a      	ldr	r4, [pc, #40]	; (800882c <__libc_init_array+0x44>)
 8008802:	1ba4      	subs	r4, r4, r6
 8008804:	10a4      	asrs	r4, r4, #2
 8008806:	42a5      	cmp	r5, r4
 8008808:	d105      	bne.n	8008816 <__libc_init_array+0x2e>
 800880a:	bd70      	pop	{r4, r5, r6, pc}
 800880c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008810:	4798      	blx	r3
 8008812:	3501      	adds	r5, #1
 8008814:	e7ee      	b.n	80087f4 <__libc_init_array+0xc>
 8008816:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800881a:	4798      	blx	r3
 800881c:	3501      	adds	r5, #1
 800881e:	e7f2      	b.n	8008806 <__libc_init_array+0x1e>
 8008820:	08008f18 	.word	0x08008f18
 8008824:	08008f18 	.word	0x08008f18
 8008828:	08008f18 	.word	0x08008f18
 800882c:	08008f1c 	.word	0x08008f1c

08008830 <memset>:
 8008830:	4603      	mov	r3, r0
 8008832:	4402      	add	r2, r0
 8008834:	4293      	cmp	r3, r2
 8008836:	d100      	bne.n	800883a <memset+0xa>
 8008838:	4770      	bx	lr
 800883a:	f803 1b01 	strb.w	r1, [r3], #1
 800883e:	e7f9      	b.n	8008834 <memset+0x4>

08008840 <_init>:
 8008840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008842:	bf00      	nop
 8008844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008846:	bc08      	pop	{r3}
 8008848:	469e      	mov	lr, r3
 800884a:	4770      	bx	lr

0800884c <_fini>:
 800884c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884e:	bf00      	nop
 8008850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008852:	bc08      	pop	{r3}
 8008854:	469e      	mov	lr, r3
 8008856:	4770      	bx	lr
